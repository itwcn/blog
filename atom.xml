<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TRHX&#39;S BLOG</title>
  
  <subtitle>一入 IT 深似海 从此学习无绝期</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.itrhx.com/"/>
  <updated>2020-03-31T09:27:43.584Z</updated>
  <id>https://www.itrhx.com/</id>
  
  <author>
    <name>TRHX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用 VPS 搭建一个自己的 SSR 服务器</title>
    <link href="https://www.itrhx.com/2020/01/10/A61-build-a-SSR-server-with-VPS/"/>
    <id>https://www.itrhx.com/2020/01/10/A61-build-a-SSR-server-with-VPS/</id>
    <published>2020-01-10T13:38:13.786Z</published>
    <updated>2020-03-31T09:27:43.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>俗话说得好：预先善其事，必先利其器，作为一个程序员，经常会用到 GitHub、Google、Stack Overflow 啥的，由于国内政策原因，想要访问国外网站就得科学上网，最常见的工具就是 ShadowsocksR，又被称为酸酸乳、SSR、小飞机，目前市面上有很多很多的机场，价格也不是很高，完全可以订阅别人的，但是订阅别人的，数据安全没有保障，有可能你的浏览历史啥的别人都能掌握，别人也有随时跑路的可能，总之，只有完全属于自己的东西才是最香的！</p><a id="more"></a><hr><h1 id="购买-VPS"><a href="#购买-VPS" class="headerlink" title="购买 VPS"></a><font color="#FF0000">购买 VPS</font></h1><p>VPS（Virtual Private Server）即虚拟专用服务器技术，在购买 VPS 服务器的时候要选择国外的，推荐 <a href="https://www.vultr.com/" target="_blank" rel="noopener">Vultr</a>，国际知名，性价比比较高，最低有$2.5/月、$3.5/月的，个人用的话应该足够了。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/01.png" alt="01"><br></fancybox><p>点击链接注册 Vultr 账号：<a href="https://www.vultr.com/?ref=8367048" target="_blank" rel="noopener">https://www.vultr.com/?ref=8367048</a>，目前新注册用户充值10刀可以赠送50刀，注册完毕之后来到充值页面，最低充值10刀，可以选择支付宝或者微信支付。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/02.png" alt="02"><br></fancybox><p>充值完毕之后，点击左侧 Products，选择服务器，一共有16个地区的，选择不同地区的服务器，最后的网速也有差别，那如何选择一个速度最优的呢？很简单，你可以一次性选择多个服务器，都部署上去，搭建完毕之后，测试其速度，选择最快的，最后再把其他的都删了，可能你会想，部署多个，那费用岂不是很贵，这里注意，虽然写的是多少钱一个月，而实际上它是按照小时计费的，从你部署之后开始计费，$5/月 ≈ $0.00694/小时，你部署完毕再删掉，这段时间的费用很低，可以忽略不计，一般来说，日本和新加坡的比较快一点，也有人说日本和新加坡服务器的端口封得比较多，容易搭建失败，具体可以自己测试一下，还有就是，只有部分地区的服务器有$2.5/月、$3.5/月的套餐，其中$2.5/月的只支持 IPv6，可以根据自己情况选择，<font color="#FF0000">最后操作系统建议选择 CentOS 7 x64 的，不然有可能搭建失败，</font>后面还有个 Enable IPv6 的选项，对 IPv6 有需求的话可以勾上，其他选项就可以不用管了。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/03.png" alt="03"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/04.png" alt="04"><br></fancybox><p>部署成功后，点 Server Details 可以看到服务器的详细信息，其中有 IP、用户名、密码等信息，后面搭建 SSR 的时候会用到，此时你可以 ping 一下你的服务器 IP，如果 ping 不通的话，可以删掉再重新开一个服务器。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/05.png" alt="05"><br></fancybox><hr><h1 id="搭建-SSR"><a href="#搭建-SSR" class="headerlink" title="搭建 SSR"></a><font color="#FF0000">搭建 SSR</font></h1><p>我们购买的是虚拟的服务器，因此需要工具远程连接到 VPS，如果是 Mac/Linux 系统，可以直接在终端用 SSH 连接 VPS：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@你VPS的IP -p 22 (22是你VPS的SSH端口)</span><br></pre></td></tr></table></figure><p>如果是 Windows 系统，可以用第三方工具连接到 VPS，如：Xshell、Putty 等，可以百度下载，以下以 Xshell 为例：</p><p>点击文件，新建会话，名称可以随便填，协议为 SSH，主机为你服务器的 IP 地址，点击确定，左侧双击这个会话开始连接，最开始会出现一个 SSH安全警告，点击接受并保存即可，然后会让你输入服务器的用户名和密码，直接在 Vultr 那边复制过来即可，最后看到 <code>[root@vultr ~]#</code> 字样表示连接成功。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/06.png" alt="06"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/07.png" alt="07"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/08.png" alt="08"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/09.png" alt="09"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/10.png" alt="10"><br></fancybox><p>连接成功后执行以下命令开始安装 SSR：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</span><br></pre></td></tr></table></figure><p>如果提示 <code>wget :command not found</code>，可先执行 <code>yum -y install wget</code>，再执行上述命令即可。</p><p>执行完毕后会让你设置 SSR 连接密码和端口，然后按任意键开始搭建。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/11.png" alt="11"><br></fancybox><p>搭建成功后会显示你服务器 IP，端口，连接密码，协议等信息，这些信息要记住，后面使用 ShadowsocksR 的时候要用到。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/12.png" alt="12"><br></fancybox><hr><h1 id="安装锐速"><a href="#安装锐速" class="headerlink" title="安装锐速"></a><font color="#FF0000">安装锐速</font></h1><p>由于我们购买的服务器位于国外，如果遇到上网高峰期，速度就会变慢，而锐速就是一款专业的连接加速器，可以充分利用服务器带宽，提升带宽吞吐量，其他还有类似的程序如 Google BBR 等，可以自行比较其加速效果，以下以操作系统为 CentOS 6&amp;7 锐速的安装为例。</p><p>如果你服务器操作系统选择的是 CentOS 6 x64，则直接执行以下命令，一直回车即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/hombo125/doubi/master/appex.sh &amp;&amp; bash appex.sh install <span class="string">'2.6.32-642.el6.x86_64'</span></span><br></pre></td></tr></table></figure><p>如果你服务器操作系统选择的是 CentOS 7 x64，则需要先执行以下命令更换内核：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/hombo125/doubi/master/rskernel.sh &amp;&amp; bash rskernel.sh</span><br></pre></td></tr></table></figure><p>如下图所示表示内核更换完毕，此时已经断开与服务器的连接，我们需要重新连接到服务器，再执行后面的操作：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/13.png" alt="13"><br></fancybox><p>重新连接到服务器后，再执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install</span><br></pre></td></tr></table></figure><p>然后一直回车即可，系统会自动安装锐速。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/14.png" alt="14"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/15.png" alt="15"><br></fancybox><p>出现以下信息表示安装成功：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/16.png" alt="16"><br></fancybox><hr><h1 id="使用-SSR"><a href="#使用-SSR" class="headerlink" title="使用 SSR"></a><font color="#FF0000">使用 SSR</font></h1><p>常见的工具有 ShadowsocksR、SSTap（原本是个游戏加速器，现在已经停止维护，但 GitHub 上仍然可以找到）等。</p><p>Shadowsocks 官网：<a href="https://shadowsocks.org/" target="_blank" rel="noopener">https://shadowsocks.org/</a><br>ShadowsocksR 下载地址：<a href="https://github.com/Anankke/SSRR-Windows" target="_blank" rel="noopener">https://github.com/Anankke/SSRR-Windows</a><br>SSTap GitHub 地址：<a href="https://github.com/FQrabbit/SSTap-Rule" target="_blank" rel="noopener">https://github.com/FQrabbit/SSTap-Rule</a></p><p>不管什么工具，用法都是一样的，添加一个新的代理服务器，服务器 IP、端口、密码、加密方式等等这些信息保持一致就行了。然后就可以愉快地科学上网了！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/16.png" alt="17"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A61/18.png" alt="18"><br></fancybox><hr><h1 id="多端口配置"><a href="#多端口配置" class="headerlink" title="多端口配置"></a><font color="#FF0000">多端口配置</font></h1><p>经过以上步骤我们就可以科学上网了，但是目前为止只有一个端口，只能一个人用，那么如何实现多个端口多人使用呢？事实上端口、密码等信息是储存在一个叫做 <code>shadowsocks.json</code> 文件里的，如果要添加端口或者更改密码，只需要修改此文件即可。</p><p>连接到自己的 VPS，输入以下命令，使用 vim 编辑文件：<code>vi /etc/shadowsocks.json</code></p><p>原文件内容大概如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>: <span class="number">8686</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1081</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"SSR12345"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">"udp_timeout"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"auth_sha1_v4_compatible"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>: <span class="string">"http_simple_compatible"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"connect_verbose_info"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加端口，我们将其修改为如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">    <span class="attr">"server_ipv6"</span>: <span class="string">"::"</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>: <span class="number">1081</span>,</span><br><span class="line">    <span class="attr">"port_password"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"8686"</span>:<span class="string">"SSR1"</span>,</span><br><span class="line">        <span class="attr">"8687"</span>:<span class="string">"SSR2"</span>,</span><br><span class="line">        <span class="attr">"8688"</span>:<span class="string">"SSR3"</span>,</span><br><span class="line">        <span class="attr">"8689"</span>:<span class="string">"SSR4"</span>,</span><br><span class="line">        <span class="attr">"8690"</span>:<span class="string">"SSR5"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">"udp_timeout"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"auth_sha1_v4_compatible"</span>,</span><br><span class="line">    <span class="attr">"protocol_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"obfs"</span>: <span class="string">"http_simple_compatible"</span>,</span><br><span class="line">    <span class="attr">"obfs_param"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"dns_ipv6"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"connect_verbose_info"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"redirect"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workers"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是删除原来的 <code>server_port</code> 和 <code>password</code> 这两项，然后增加 <code>port_password</code> 这一项，前面是端口号，后面是密码，注意不要把格式改错了！！！修改完毕并保存！！！</p><p>接下来配置一下防火墙，同样的，输入以下命令，用 vim 编辑文件：<code>vi /etc/firewalld/zones/public.xml</code></p><p>初始的防火墙只开放了最初配置 SSR 默认的那个端口，现在需要我们手动加上那几个新加的端口，<font color="#FF0000"><strong>注意：一个端口需要复制两行，一行是 tcp，一行是 udp。</strong></font></p><p>原文件内容大概如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short</span>&gt;</span>Public<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"dhcpv6-client"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"ssh"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8686"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8686"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zone</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">zone</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">short</span>&gt;</span>Public<span class="tag">&lt;/<span class="name">short</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"dhcpv6-client"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">service</span> <span class="attr">name</span>=<span class="string">"ssh"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8686"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8686"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8687"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8687"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8688"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8688"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8689"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8689"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"tcp"</span> <span class="attr">port</span>=<span class="string">"8690"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">port</span> <span class="attr">protocol</span>=<span class="string">"udp"</span> <span class="attr">port</span>=<span class="string">"8690"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zone</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改完毕并保存，最后重启一下 shadowsocks，然后重新载入防火墙即可，两条命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks restart</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>完成之后，我们新加的这几个端口就可以使用了</p><p>另外还可以将配置转换成我们常见的链接形式，如：<code>ss://xxxxx</code> 或 <code>ssr://xxxxx</code>，其实这种链接就是把 IP，端口，密码等信息按照一定的格式拼接起来，然后经过 Base64 编码后实现的，有兴趣或者有需求的可以自行百度。</p><hr><h1 id="扩展命令"><a href="#扩展命令" class="headerlink" title="扩展命令"></a><font color="#FF0000">扩展命令</font></h1><p>SSR 常用命令：<br>启动：<code>/etc/init.d/shadowsocks start</code><br>停止：<code>/etc/init.d/shadowsocks stop</code><br>重启：<code>/etc/init.d/shadowsocks restart</code><br>状态：<code>/etc/init.d/shadowsocks status</code><br>卸载：<code>./shadowsocks-all.sh uninstall</code><br>更改配置参数：<code>vim /etc/shadowsocks-r/config.json</code></p><hr><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=mpa02hyz07v5" target="_blank" rel="noopener">https://cloud.tencent.com/developer/support-plan?invite_code=mpa02hyz07v5</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;俗话说得好：预先善其事，必先利其器，作为一个程序员，经常会用到 GitHub、Google、Stack Overflow 啥的，由于国内政策原因，想要访问国外网站就得科学上网，最常见的工具就是 ShadowsocksR，又被称为酸酸乳、SSR、小飞机，目前市面上有很多很多的机场，价格也不是很高，完全可以订阅别人的，但是订阅别人的，数据安全没有保障，有可能你的浏览历史啥的别人都能掌握，别人也有随时跑路的可能，总之，只有完全属于自己的东西才是最香的！&lt;/p&gt;
    
    </summary>
    
      <category term="VPS" scheme="https://www.itrhx.com/categories/VPS/"/>
    
    
      <category term="VPS" scheme="https://www.itrhx.com/tags/VPS/"/>
    
      <category term="SSR" scheme="https://www.itrhx.com/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>2019年总结【跨越今天，更不平凡】</title>
    <link href="https://www.itrhx.com/2019/12/31/A60-2019-summary/"/>
    <id>https://www.itrhx.com/2019/12/31/A60-2019-summary/</id>
    <published>2019-12-31T15:14:59.983Z</published>
    <updated>2020-03-16T09:21:52.219Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/1.png" alt="1"><br></fancybox><a id="more"></a><hr><p>还记得小时候写作文，畅想2020会怎样怎样，光阴似箭，2020真的来了，度过了艰难的考试周，抽了个晚上，回想了一下，决定写一写总结吧，似乎以前都没写过呢，那干脆连带2017、2018也写写吧，重点写一写2019的，以后争取每年都做一下总结。</p><hr><h1 id="【2017】"><a href="#【2017】" class="headerlink" title="【2017】"></a><font color="#FF000">【2017】</font></h1><p>2017年高三，上半年就不用说了，所有高三考生都一个样吧，下半年考进了武汉的某二本院校，软件工程专业，现在回想起来，当时把时间浪费得太多了，最开始加了一个部门，后来退了（<del>事实上啥也学不到，浪费时间</del> ），然后除了完成学校的课程以外，其他啥也没搞，剩下的时间基本上全拿来骑车了，从高一开始就热爱单车运动，刚上大学肯定得放飞自我了，没课的时候就天天和学长到处跑，都快把武汉跑了个遍了，当时还定了个计划，大学四年骑车去一次西藏或者青海湖，其他的什么都没想，也没有对以后具体干哪方面做过规划，这一年收获最多的应该就是路上的风景了。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/2.png" alt="2"><br></fancybox><h1 id="【2018】"><a href="#【2018】" class="headerlink" title="【2018】"></a><font color="#FF000">【2018】</font></h1><p>2018上半年，大一下学期，学习方面就过了个英语四级，然后依旧热衷于我的单车，暑假的时候疯狂了一把，7天干了700多公里，从学校骑回家了，那个时候正是热的时候，白天基本上在三十度，从武汉往西边走，后面全是爬山，上山爬不动，下山刹不住，路上也遇到了不少牛逼人物，有徒步西藏的，有环游中国的，直播平台有好几十万粉丝的……遇到的人都很善良，很硬汉，这次经历从某种程度上来说也是一次成长吧，一次很有意义的骑行。</p><p>下半年，也就是大二开始，才慢慢开始重视专业知识的学习，大二上学期搭建了个人博客，开始尝试写博客，其实就是把博客当做笔记吧，记性不好，学了的东西容易忘记，忘记了可以经常翻自己博客再复习复习，自己踩过的坑也记录记录，后来没想到有些文章访问量还挺高的，在博客搭建方面也帮到了一些网友，最重要的是结识了不少博友，有各行各业的大佬，下半年也定了方向，开始专注Python的学习，从此开始慢慢熬夜，也渐渐地不怎么出去骑车了。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/3.png" alt="3"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/4.png" alt="4"><br></fancybox><h1 id="【2019】"><a href="#【2019】" class="headerlink" title="【2019】"></a><font color="#FF000">【2019】</font></h1><p>2019 总的来说，还比较满意吧，主要是感觉过得很充实，大三基本上每天一整天都是上机课，没有太多时间搞自己的，自己倾向于Python、网络爬虫、数据分析方面，然而这些课程学校都没有，每天晚上以及周六周日都是自己在学，找了不少视频在看，有时候感觉自己还是差点火候，感觉一个简单的东西人家看一遍就会，但是我要看好几遍，不管怎样，我还是相信勤能补拙的。</p><h5 id="【学习方面】"><a href="#【学习方面】" class="headerlink" title="【学习方面】"></a>【学习方面】</h5><ul><li>[√] 通过软考中级软件设计师</li><li>[√] 成为入党积极分子</li><li>[√] 学校大课基金结题</li><li style="list-style: none"><input type="checkbox"> 英语六级未通过</li><li style="list-style: none"><input type="checkbox"> 国家专利未通过</li></ul><h5 id="【看完或者大部分看完的书籍】"><a href="#【看完或者大部分看完的书籍】" class="headerlink" title="【看完或者大部分看完的书籍】"></a>【看完或者大部分看完的书籍】</h5><ul><li>[√] 《软件设计师考试》</li><li>[√] 《Python 编程从入门到实践》</li><li>[√] 《Python 编程从零基础到项目实战》</li><li>[√] 《Python3 网络爬虫开发实战》</li><li>[√] 《Python 网络爬虫从入门到实践》</li><li>[√] 《精通 Python 爬虫框架 Scrapy》</li><li>[√] 《Python 程序员面试宝典(算法+数据结构)》</li><li>[√] 《Selenium 自动化测试 — 基于 Python 语言》</li><li>[√] 《重构，改善既有代码的设计》</li></ul><h5 id="【生活方面】"><a href="#【生活方面】" class="headerlink" title="【生活方面】"></a>【生活方面】</h5><p>暑假受家族前辈的邀请，为整个姓氏家族编写族谱，感觉这是今年收获最大的一件事情吧，当时背着电脑跟着前辈下乡，挨家挨户统计资料，纯手工录入电脑（感觉那是我活了二十年打字打得最多的一个月，祖宗十八代都搞清楚了），最后排版打印成书，一个月下来感受到了信息化时代和传统文化的碰撞，见了很多古书，古迹，当然还领略到了古繁体字的魅力，前辈一路上给我讲述了很多书本上学不到的东西，一段很有意义的体验，感触颇深。</p><p>个人爱好上面，今年就基本上没有骑车了，没有经常骑车，开学骑了两次就跟不上别人了，后面就洗干净用布遮起来放在寝室了，按照目前情况来看，多半是要“退役”了，不知道何时才会又一次踩上脚踏，不过偶尔还是在抖音上刷刷关注的单车大佬，看看别人的视频，看到友链小伙伴 <a href="https://shan333.cn/" target="_blank" rel="noopener">Shan San</a> 在今年总结也写了他一年没有跳舞了，抛弃了曾经热爱的 Breaking，真的是深有感触啊。</p><p>有个遗憾就是大一的愿望实现不了了，恐怕大学四年也不会去西藏或者青海湖了，此处放一个到目前为止的骑行数据，以此纪念一下我的单车生涯吧。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/5.png" alt="5"><br></fancybox><h5 id="【技术交流-amp-实践】"><a href="#【技术交流-amp-实践】" class="headerlink" title="【技术交流&amp;实践】"></a>【技术交流&amp;实践】</h5><p>自从搭建了博客之后，认识了不少大佬，经常会去大佬博客逛逛，涨涨知识</p><p>截止目前，个人博客 PV：4万+，UV：1万+，知乎：400+赞同，CSDN：43万+访问量，400+赞同</p><p>此外今年第一次为开源做了一点儿微不足道的贡献，为 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 博客主题 <a href="https://github.com/xaoxuu/hexo-theme-material-x" target="_blank" rel="noopener">Material X</a> 添加了文章字数统计和阅读时长的功能，提交了人生当中第一个 <a href="https://github.com/xaoxuu/hexo-theme-material-x/pull/117" target="_blank" rel="noopener">PR</a>。第一次嘛，还是值得纪念一下的。</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/6.png" alt="6"><br></fancybox><p>我 GitHub 上虽然有一些小绿点，但是很大一部分都是推送的博客相关的东西，剩下的有几个仓库也就是 Python 相关的了，一些实战的代码放在了上面，很多时候是拿 GitHub 围观一些牛逼代码或者资源，还需要努力学习啊！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/7.png" alt="7"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/8.png" alt="8"><br></fancybox><p>实战方面，爬虫自己也爬了很多网站，遇到一些反爬网站还不能解决，也刷了一些 <a href="https://checkio.org/" target="_blank" rel="noopener">Checkio</a> 上面的题，做了题，和其他大佬相比才会发现自己的代码水平有多低，最直接的感受就是我用了很多行代码，而大神一行代码就解决了，只能说自己的水平还有很大的增进空间，新的一年继续努力吧！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/9.png" alt="9"><br></fancybox><h1 id="【2020】"><a href="#【2020】" class="headerlink" title="【2020】"></a><font color="#FF000">【2020】</font></h1><p><strong>1024 + 996 = 2020</strong>，2020注定是不平凡的一年，定下目标，努力实现，只谈技术，莫问前程！</p><h5 id="【计划目标】"><a href="#【计划目标】" class="headerlink" title="【计划目标】"></a>【计划目标】</h5><ul><li style="list-style: none"><input type="checkbox"> 4月蓝桥杯拿奖</li><li style="list-style: none"><input type="checkbox"> 5月通过软考高级信息系统项目管理师</li><li style="list-style: none"><input type="checkbox"> 6月通过英语六级</li><li style="list-style: none"><input type="checkbox"> 坚持记笔记、写博客</li><li style="list-style: none"><input type="checkbox"> 学习 JavaScript 逆向</li><li style="list-style: none"><input type="checkbox"> 研究网站常用反爬策略，掌握反反爬虫技术</li><li style="list-style: none"><input type="checkbox"> 掌握两到三个主流爬虫框架</li><li style="list-style: none"><input type="checkbox"> 加深 Python 算法和数据结构的学习</li><li style="list-style: none"><input type="checkbox"> 学习 Python 数据可视化和数据分析</li><li style="list-style: none"><input type="checkbox"> 做一个 Python 相关的优秀开源项目（爬虫类最好）</li><li style="list-style: none"><input type="checkbox"> 向优秀爬虫工程师方向迈进</li><li style="list-style: none"><input type="checkbox"> 参加 PyCon China 2020</li></ul><h5 id="【计划要看的书籍】"><a href="#【计划要看的书籍】" class="headerlink" title="【计划要看的书籍】"></a>【计划要看的书籍】</h5><ul><li style="list-style: none"><input type="checkbox"> 《JavaScript 从入门到精通》</li><li style="list-style: none"><input type="checkbox"> 《Python3 反爬虫原理与绕过实战》</li><li style="list-style: none"><input type="checkbox"> 《Python 数据可视化编程实战》</li><li style="list-style: none"><input type="checkbox"> 《Python 数据可视化之 matplotlib 实践》</li><li style="list-style: none"><input type="checkbox"> 《Python 数据可视化之 matplotlib 精进》</li><li style="list-style: none"><input type="checkbox"> 《基于 Python的大数据分析基础及实战》</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pip uninstall <span class="number">2019</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pip install <span class="number">2020</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Live a good life, write some good code !!!'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;fancybox&gt;&lt;br&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A60/1.png&quot; alt=&quot;1&quot;&gt;&lt;br&gt;&lt;/fancybox&gt;
    
    </summary>
    
      <category term="BLOG" scheme="https://www.itrhx.com/categories/BLOG/"/>
    
    
      <category term="年终总结" scheme="https://www.itrhx.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫实战 — 瓜子全国二手车</title>
    <link href="https://www.itrhx.com/2019/11/15/A59-pyspider-guazi/"/>
    <id>https://www.itrhx.com/2019/11/15/A59-pyspider-guazi/</id>
    <published>2019-11-14T16:10:55.649Z</published>
    <updated>2019-12-29T07:14:02.938Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-11-14<br>爬取难度：★★☆☆☆☆<br>请求链接：<a href="https://www.guazi.com/www/buy/" target="_blank" rel="noopener">https://www.guazi.com/www/buy/</a><br>爬取目标：爬取瓜子全国二手车信息，包括价格、上牌时间、表显里程等；保存车辆图片<br>涉及知识：请求库 requests、解析库 lxml、Xpath 语法、数据库 MongoDB 的操作<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/guazi" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/guazi</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】提取所有二手车详情页URL"><a href="#【1x00】提取所有二手车详情页URL" class="headerlink" title="【1x00】提取所有二手车详情页URL"></a><font color="#FF0000">【1x00】提取所有二手车详情页URL</font></h1><p>分析页面，按照习惯，最开始在 headers 里面只加入 User-Agent 字段，向主页发送请求，然而返回的东西并不是主页真正的源码，因此我们加入 Cookie，再次发起请求，即可得到真实数据。</p><p>获取 Cookie：打开浏览器访问网站，打开开发工具，切换到 Network 选项卡，筛选 Doc 文件，在 Request Headers 里可以看到 Cookie 值。</p><font color="#FF0000"><strong>注意在爬取瓜子二手车的时候，User-Agent 与 Cookie 要对应一致，也就是直接复制 Request Headers 里的 User-Agent 和 Cookie，不要自己定义一个 User-Agent，不然有可能获取不到信息！</strong></font><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A59/01.png" alt="01"><br></fancybox><p>分析页面，请求地址为：<a href="https://www.guazi.com/www/buy/" target="_blank" rel="noopener">https://www.guazi.com/www/buy/</a></p><p>第一页：<a href="https://www.guazi.com/www/buy/" target="_blank" rel="noopener">https://www.guazi.com/www/buy/</a></p><p>第二页：<a href="https://www.guazi.com/www/buy/o2c-1/" target="_blank" rel="noopener">https://www.guazi.com/www/buy/o2c-1/</a></p><p>第三页：<a href="https://www.guazi.com/www/buy/o3c-1/" target="_blank" rel="noopener">https://www.guazi.com/www/buy/o3c-1/</a></p><p>一共有50页数据，利用 for 循环，每次改变 URL 中 <code>o2c-1</code> 参数里面的数字即可实现所有页面的爬取，由于我们是想爬取每台二手车详情页的数据，所以定义一个 <code>parse_index()</code> 函数，提取每一页的所有详情页的 URL，保存在列表 <code>url_list</code> 中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须要有 Cookie 和 User-Agent，且两者必须对应（用浏览器访问网站后控制台里面复制）</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'uuid=06ce7520-ebd1-45bc-f41f-a95f2c9b2283; ganji_uuid=7044571161649671972745; lg=1; clueSourceCode=%2A%2300; user_city_id=-1; sessionid=fefbd4f8-0a06-4e8a-dc49-8856e1a02a07; Hm_lvt_936a6d5df3f3d309bda39e92da3dd52f=1573469368,1573541270,1573541964,1573715863; close_finance_popup=2019-11-14; cainfo=%7B%22ca_a%22%3A%22-%22%2C%22ca_b%22%3A%22-%22%2C%22ca_s%22%3A%22seo_baidu%22%2C%22ca_n%22%3A%22default%22%2C%22ca_medium%22%3A%22-%22%2C%22ca_term%22%3A%22-%22%2C%22ca_content%22%3A%22-%22%2C%22ca_campaign%22%3A%22-%22%2C%22ca_kw%22%3A%22-%22%2C%22ca_i%22%3A%22-%22%2C%22scode%22%3A%22-%22%2C%22keyword%22%3A%22-%22%2C%22ca_keywordid%22%3A%22-%22%2C%22display_finance_flag%22%3A%22-%22%2C%22platform%22%3A%221%22%2C%22version%22%3A1%2C%22client_ab%22%3A%22-%22%2C%22guid%22%3A%2206ce7520-ebd1-45bc-f41f-a95f2c9b2283%22%2C%22ca_city%22%3A%22wh%22%2C%22sessionid%22%3A%22fefbd4f8-0a06-4e8a-dc49-8856e1a02a07%22%7D; _gl_tracker=%7B%22ca_source%22%3A%22-%22%2C%22ca_name%22%3A%22-%22%2C%22ca_kw%22%3A%22-%22%2C%22ca_id%22%3A%22-%22%2C%22ca_s%22%3A%22self%22%2C%22ca_n%22%3A%22-%22%2C%22ca_i%22%3A%22-%22%2C%22sid%22%3A56473912809%7D; cityDomain=www; preTime=%7B%22last%22%3A1573720945%2C%22this%22%3A1573469364%2C%22pre%22%3A1573469364%7D; Hm_lpvt_936a6d5df3f3d309bda39e92da3dd52f=1573720946; rfnl=https://www.guazi.com/www/chevrolet/i2c-1r18/; antipas=675i0t513a7447M2L9y418Qq869'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有二手车详情页URL</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_index</span><span class="params">()</span>:</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(response.text)</span><br><span class="line">    url_list = tree.xpath(<span class="string">'//li/a[@class="car-a"]/@href'</span>)</span><br><span class="line">    <span class="comment"># print(len(url_list))</span></span><br><span class="line">    <span class="keyword">return</span> url_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        url = <span class="string">'https://www.guazi.com/www/buy/o%sc-1/'</span> % i</span><br><span class="line">        detail_urls = parse_index()</span><br></pre></td></tr></table></figure><hr><h1 id="【2x00】获取二手车详细信息并保存图片"><a href="#【2x00】获取二手车详细信息并保存图片" class="headerlink" title="【2x00】获取二手车详细信息并保存图片"></a><font color="#FF0000">【2x00】获取二手车详细信息并保存图片</font></h1><p>前面的第一步我们已经获取到了二手车详情页的 URL，现在定义一个 <code>parse_detail()</code> 函数，向其中循环传入每一条 URL，利用 Xpath 语法匹配每一条信息，所有信息包含：<strong>标题、二手车价格、新车指导价、车主、上牌时间、表显里程、上牌地、排放标准、变速箱、排量、过户次数、看车地点、年检到期、交强险、商业险到期</strong>。</p><p>其中有部分信息可能包含空格，可以用 strip() 方法将其去掉。</p><p>需要注意的是，<strong>上牌地</strong>对应的是一个 <code>class=&quot;three&quot;</code> 的 <code>li</code> 标签，有些二手车没有上牌地信息，匹配的结果将是空，在数据储存时就有可能出现数组越界的错误信息，所以这里可以加一个判断，如果没有上牌地信息，可以将其赋值为：未知。</p><p>保存车辆图片时，为了节省时间和空间，避免频繁爬取被封，所以只保存第一张图片，同样利用 Xpath 匹配到第一张图片的地址，以标题为图片的名称，定义储存路径后，以二进制形式保存图片。</p><p>最后整个函数返回的是一个列表 <code>data</code>，这个列表包含每辆二手车的所有信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取二手车详细信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(content)</span>:</span></span><br><span class="line">    detail_response = requests.get(url=content, headers=headers)</span><br><span class="line">    tree = etree.HTML(detail_response.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    title = tree.xpath(<span class="string">'//h2[@class="titlebox"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    title = [t.strip() <span class="keyword">for</span> t <span class="keyword">in</span> title]</span><br><span class="line">    <span class="comment"># 匹配到两个元素，只取其中一个为标题</span></span><br><span class="line">    title = title[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(title)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 价格</span></span><br><span class="line">    price_old = tree.xpath(<span class="string">'//span[@class="pricestype"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    price_old = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> price_old]</span><br><span class="line">    <span class="comment"># 加入单位</span></span><br><span class="line">    price_old = [<span class="string">''</span>.join(price_old + [<span class="string">'万'</span>])]</span><br><span class="line">    <span class="comment"># print(price_old)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新车指导价</span></span><br><span class="line">    price_new = tree.xpath(<span class="string">'//span[@class="newcarprice"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    price_new = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> price_new]</span><br><span class="line">    <span class="comment"># 对字符串进行切片，只取数字多少万</span></span><br><span class="line">    price_new = [<span class="string">'¥'</span> + price_new[<span class="number">0</span>].split(<span class="string">'价'</span>)[<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># print(price_new)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 车主</span></span><br><span class="line">    owner = tree.xpath(<span class="string">'//dl/dt/span/text()'</span>)</span><br><span class="line">    owner = [owner[<span class="number">0</span>].replace(<span class="string">'车主：'</span>, <span class="string">''</span>)]</span><br><span class="line">    <span class="comment"># print(owner)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上牌时间</span></span><br><span class="line">    spsj = tree.xpath(<span class="string">'//li[@class="one"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(spsj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表显里程</span></span><br><span class="line">    bxlc = tree.xpath(<span class="string">'//li[@class="two"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(bxlc)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上牌地</span></span><br><span class="line">    spd = tree.xpath(<span class="string">'//li[@class="three"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># 某些二手车没有上牌地，没有的将其赋值为：未知</span></span><br><span class="line">    <span class="keyword">if</span> len(spd) == <span class="number">0</span>:</span><br><span class="line">        spd = [<span class="string">'未知'</span>]</span><br><span class="line">    <span class="comment"># print(spd)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排放标准</span></span><br><span class="line">    pfbz = tree.xpath(<span class="string">'//li[@class="four"]/div/text()'</span>)</span><br><span class="line">    pfbz = pfbz[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(pfbz)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变速箱</span></span><br><span class="line">    bsx = tree.xpath(<span class="string">'//li[@class="five"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(bsx)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排量</span></span><br><span class="line">    pl = tree.xpath(<span class="string">'//li[@class="six"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(pl)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过户次数</span></span><br><span class="line">    ghcs = tree.xpath(<span class="string">'//li[@class="seven"]/div/text()'</span>)</span><br><span class="line">    ghcs = [g.strip() <span class="keyword">for</span> g <span class="keyword">in</span> ghcs]</span><br><span class="line">    ghcs = ghcs[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(ghcs)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 看车地点</span></span><br><span class="line">    kcdd = tree.xpath(<span class="string">'//li[@class="eight"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(kcdd)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 年检到期</span></span><br><span class="line">    njdq = tree.xpath(<span class="string">'//li[@class="nine"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(njdq)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交强险</span></span><br><span class="line">    jqx = tree.xpath(<span class="string">'//li[@class="ten"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(jqx)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 商业险到期</span></span><br><span class="line">    syxdq = tree.xpath(<span class="string">'//li[@class="last"]/div/text()'</span>)</span><br><span class="line">    syxdq = [s.strip() <span class="keyword">for</span> s <span class="keyword">in</span> syxdq]</span><br><span class="line">    syxdq = syxdq[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(syxdq)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存车辆图片</span></span><br><span class="line">    <span class="comment"># 获取图片地址</span></span><br><span class="line">    pic_url = tree.xpath(<span class="string">'//li[@class="js-bigpic"]/img/@data-src'</span>)[<span class="number">0</span>]</span><br><span class="line">    pic_response = requests.get(pic_url)</span><br><span class="line">    <span class="comment"># 定义图片名称以及保存的文件夹</span></span><br><span class="line">    pic_name = title[<span class="number">0</span>] + <span class="string">'.jpg'</span></span><br><span class="line">    dir_name = <span class="string">'guazi_pic'</span></span><br><span class="line">    <span class="comment"># 如果没有该文件夹则创建该文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">        os.mkdir(dir_name)</span><br><span class="line">    <span class="comment"># 定义储存路径</span></span><br><span class="line">    pic_path = dir_name + <span class="string">'/'</span> + pic_name</span><br><span class="line">    <span class="keyword">with</span> open(pic_path, <span class="string">"wb"</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(pic_response.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将每辆二手车的所有信息合并为一个列表</span></span><br><span class="line">    data = title + price_old + price_new + owner + spsj + bxlc + spd + pfbz + bsx + pl + ghcs + kcdd + njdq + jqx + syxdq</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        url = <span class="string">'https://www.guazi.com/www/buy/o%sc-1/'</span> % i</span><br><span class="line">        detail_urls = parse_index()</span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">            car_url = <span class="string">'https://www.guazi.com'</span> + detail_url</span><br><span class="line">            car_data = parse_detail(car_url)</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】将数据储存到-MongoDB"><a href="#【3x00】将数据储存到-MongoDB" class="headerlink" title="【3x00】将数据储存到 MongoDB"></a><font color="#FF0000">【3x00】将数据储存到 MongoDB</font></h1><p>定义数据储存函数 <code>save_data()</code></p><p>使用 <code>MongoClient()</code> 方法，向其传入地址参数 <code>host</code> 和 端口参数 <code>port</code>，指定数据库为 <code>guazi</code>，集合为 <code>esc</code></p><p>传入第二步 <code>parse_detail()</code> 函数返回的二手车信息的列表，依次读取其中的元素，每一个元素对应相应的信息名称</p><p>最后调用 <code>insert_one()</code> 方法，每次插入一辆二手车的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据储存到 MongoDB</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">    db = client.guazi</span><br><span class="line">    collection = db.esc</span><br><span class="line">    esc = &#123;</span><br><span class="line">        <span class="string">'标题'</span>: data[<span class="number">0</span>],</span><br><span class="line">        <span class="string">'二手车价格'</span>: data[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'新车指导价'</span>: data[<span class="number">2</span>],</span><br><span class="line">        <span class="string">'车主'</span>: data[<span class="number">3</span>],</span><br><span class="line">        <span class="string">'上牌时间'</span>: data[<span class="number">4</span>],</span><br><span class="line">        <span class="string">'表显里程'</span>: data[<span class="number">5</span>],</span><br><span class="line">        <span class="string">'上牌地'</span>: data[<span class="number">6</span>],</span><br><span class="line">        <span class="string">'排放标准'</span>: data[<span class="number">7</span>],</span><br><span class="line">        <span class="string">'变速箱'</span>: data[<span class="number">8</span>],</span><br><span class="line">        <span class="string">'排量'</span>: data[<span class="number">9</span>],</span><br><span class="line">        <span class="string">'过户次数'</span>: data[<span class="number">10</span>],</span><br><span class="line">        <span class="string">'看车地点'</span>: data[<span class="number">11</span>],</span><br><span class="line">        <span class="string">'年检到期'</span>: data[<span class="number">12</span>],</span><br><span class="line">        <span class="string">'交强险'</span>: data[<span class="number">13</span>],</span><br><span class="line">        <span class="string">'商业险到期'</span>: data[<span class="number">14</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    collection.insert_one(esc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        url = <span class="string">'https://www.guazi.com/www/buy/o%sc-1/'</span> % i</span><br><span class="line">        detail_urls = parse_index()</span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">            car_url = <span class="string">'https://www.guazi.com'</span> + detail_url</span><br><span class="line">            car_data = parse_detail(car_url)</span><br><span class="line">            save_data(car_data)</span><br><span class="line">            <span class="comment"># 在3-10秒之间随机暂停</span></span><br><span class="line">            time.sleep(random.randint(<span class="number">3</span>, <span class="number">10</span>))</span><br><span class="line">        time.sleep(random.randint(<span class="number">5</span>, <span class="number">60</span>))</span><br><span class="line">    print(<span class="string">'所有数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】完整代码"><a href="#【4x00】完整代码" class="headerlink" title="【4x00】完整代码"></a><font color="#FF0000">【4x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-11-14</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: guazi.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 必须要有 Cookie 和 User-Agent，且两者必须对应（用浏览器访问网站后控制台里面复制）</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'uuid=06ce7520-ebd1-45bc-f41f-a95f2c9b2283; ganji_uuid=7044571161649671972745; lg=1; clueSourceCode=%2A%2300; user_city_id=-1; sessionid=fefbd4f8-0a06-4e8a-dc49-8856e1a02a07; Hm_lvt_936a6d5df3f3d309bda39e92da3dd52f=1573469368,1573541270,1573541964,1573715863; close_finance_popup=2019-11-14; cainfo=%7B%22ca_a%22%3A%22-%22%2C%22ca_b%22%3A%22-%22%2C%22ca_s%22%3A%22seo_baidu%22%2C%22ca_n%22%3A%22default%22%2C%22ca_medium%22%3A%22-%22%2C%22ca_term%22%3A%22-%22%2C%22ca_content%22%3A%22-%22%2C%22ca_campaign%22%3A%22-%22%2C%22ca_kw%22%3A%22-%22%2C%22ca_i%22%3A%22-%22%2C%22scode%22%3A%22-%22%2C%22keyword%22%3A%22-%22%2C%22ca_keywordid%22%3A%22-%22%2C%22display_finance_flag%22%3A%22-%22%2C%22platform%22%3A%221%22%2C%22version%22%3A1%2C%22client_ab%22%3A%22-%22%2C%22guid%22%3A%2206ce7520-ebd1-45bc-f41f-a95f2c9b2283%22%2C%22ca_city%22%3A%22wh%22%2C%22sessionid%22%3A%22fefbd4f8-0a06-4e8a-dc49-8856e1a02a07%22%7D; _gl_tracker=%7B%22ca_source%22%3A%22-%22%2C%22ca_name%22%3A%22-%22%2C%22ca_kw%22%3A%22-%22%2C%22ca_id%22%3A%22-%22%2C%22ca_s%22%3A%22self%22%2C%22ca_n%22%3A%22-%22%2C%22ca_i%22%3A%22-%22%2C%22sid%22%3A56473912809%7D; cityDomain=www; preTime=%7B%22last%22%3A1573720945%2C%22this%22%3A1573469364%2C%22pre%22%3A1573469364%7D; Hm_lpvt_936a6d5df3f3d309bda39e92da3dd52f=1573720946; rfnl=https://www.guazi.com/www/chevrolet/i2c-1r18/; antipas=675i0t513a7447M2L9y418Qq869'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有二手车详情页URL</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_index</span><span class="params">()</span>:</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(response.text)</span><br><span class="line">    url_list = tree.xpath(<span class="string">'//li/a[@class="car-a"]/@href'</span>)</span><br><span class="line">    <span class="comment"># print(len(url_list))</span></span><br><span class="line">    <span class="keyword">return</span> url_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取二手车详细信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(content)</span>:</span></span><br><span class="line">    detail_response = requests.get(url=content, headers=headers)</span><br><span class="line">    tree = etree.HTML(detail_response.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    title = tree.xpath(<span class="string">'//h2[@class="titlebox"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    title = [t.strip() <span class="keyword">for</span> t <span class="keyword">in</span> title]</span><br><span class="line">    <span class="comment"># 匹配到两个元素，只取其中一个为标题</span></span><br><span class="line">    title = title[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(title)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 价格</span></span><br><span class="line">    price_old = tree.xpath(<span class="string">'//span[@class="pricestype"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    price_old = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> price_old]</span><br><span class="line">    <span class="comment"># 加入单位</span></span><br><span class="line">    price_old = [<span class="string">''</span>.join(price_old + [<span class="string">'万'</span>])]</span><br><span class="line">    <span class="comment"># print(price_old)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 新车指导价</span></span><br><span class="line">    price_new = tree.xpath(<span class="string">'//span[@class="newcarprice"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 移除字符串头尾空格</span></span><br><span class="line">    price_new = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> price_new]</span><br><span class="line">    <span class="comment"># 对字符串进行切片，只取数字多少万</span></span><br><span class="line">    price_new = [<span class="string">'¥'</span> + price_new[<span class="number">0</span>].split(<span class="string">'价'</span>)[<span class="number">1</span>]]</span><br><span class="line">    <span class="comment"># print(price_new)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 车主</span></span><br><span class="line">    owner = tree.xpath(<span class="string">'//dl/dt/span/text()'</span>)</span><br><span class="line">    owner = [owner[<span class="number">0</span>].replace(<span class="string">'车主：'</span>, <span class="string">''</span>)]</span><br><span class="line">    <span class="comment"># print(owner)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上牌时间</span></span><br><span class="line">    spsj = tree.xpath(<span class="string">'//li[@class="one"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(spsj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 表显里程</span></span><br><span class="line">    bxlc = tree.xpath(<span class="string">'//li[@class="two"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(bxlc)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上牌地</span></span><br><span class="line">    spd = tree.xpath(<span class="string">'//li[@class="three"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># 某些二手车没有上牌地，没有的将其赋值为：未知</span></span><br><span class="line">    <span class="keyword">if</span> len(spd) == <span class="number">0</span>:</span><br><span class="line">        spd = [<span class="string">'未知'</span>]</span><br><span class="line">    <span class="comment"># print(spd)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排放标准</span></span><br><span class="line">    pfbz = tree.xpath(<span class="string">'//li[@class="four"]/div/text()'</span>)</span><br><span class="line">    pfbz = pfbz[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(pfbz)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 变速箱</span></span><br><span class="line">    bsx = tree.xpath(<span class="string">'//li[@class="five"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(bsx)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排量</span></span><br><span class="line">    pl = tree.xpath(<span class="string">'//li[@class="six"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(pl)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 过户次数</span></span><br><span class="line">    ghcs = tree.xpath(<span class="string">'//li[@class="seven"]/div/text()'</span>)</span><br><span class="line">    ghcs = [g.strip() <span class="keyword">for</span> g <span class="keyword">in</span> ghcs]</span><br><span class="line">    ghcs = ghcs[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(ghcs)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 看车地点</span></span><br><span class="line">    kcdd = tree.xpath(<span class="string">'//li[@class="eight"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(kcdd)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 年检到期</span></span><br><span class="line">    njdq = tree.xpath(<span class="string">'//li[@class="nine"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(njdq)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 交强险</span></span><br><span class="line">    jqx = tree.xpath(<span class="string">'//li[@class="ten"]/div/text()'</span>)</span><br><span class="line">    <span class="comment"># print(jqx)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 商业险到期</span></span><br><span class="line">    syxdq = tree.xpath(<span class="string">'//li[@class="last"]/div/text()'</span>)</span><br><span class="line">    syxdq = [s.strip() <span class="keyword">for</span> s <span class="keyword">in</span> syxdq]</span><br><span class="line">    syxdq = syxdq[:<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(syxdq)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存车辆图片</span></span><br><span class="line">    <span class="comment"># 获取图片地址</span></span><br><span class="line">    pic_url = tree.xpath(<span class="string">'//li[@class="js-bigpic"]/img/@data-src'</span>)[<span class="number">0</span>]</span><br><span class="line">    pic_response = requests.get(pic_url)</span><br><span class="line">    <span class="comment"># 定义图片名称以及保存的文件夹</span></span><br><span class="line">    pic_name = title[<span class="number">0</span>] + <span class="string">'.jpg'</span></span><br><span class="line">    dir_name = <span class="string">'guazi_pic'</span></span><br><span class="line">    <span class="comment"># 如果没有该文件夹则创建该文件夹</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">        os.mkdir(dir_name)</span><br><span class="line">    <span class="comment"># 定义储存路径</span></span><br><span class="line">    pic_path = dir_name + <span class="string">'/'</span> + pic_name</span><br><span class="line">    <span class="keyword">with</span> open(pic_path, <span class="string">"wb"</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(pic_response.content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将每辆二手车的所有信息合并为一个列表</span></span><br><span class="line">    data = title + price_old + price_new + owner + spsj + bxlc + spd + pfbz + bsx + pl + ghcs + kcdd + njdq + jqx + syxdq</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据储存到 MongoDB</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)</span><br><span class="line">    db = client.guazi</span><br><span class="line">    collection = db.esc</span><br><span class="line">    esc = &#123;</span><br><span class="line">        <span class="string">'标题'</span>: data[<span class="number">0</span>],</span><br><span class="line">        <span class="string">'二手车价格'</span>: data[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'新车指导价'</span>: data[<span class="number">2</span>],</span><br><span class="line">        <span class="string">'车主'</span>: data[<span class="number">3</span>],</span><br><span class="line">        <span class="string">'上牌时间'</span>: data[<span class="number">4</span>],</span><br><span class="line">        <span class="string">'表显里程'</span>: data[<span class="number">5</span>],</span><br><span class="line">        <span class="string">'上牌地'</span>: data[<span class="number">6</span>],</span><br><span class="line">        <span class="string">'排放标准'</span>: data[<span class="number">7</span>],</span><br><span class="line">        <span class="string">'变速箱'</span>: data[<span class="number">8</span>],</span><br><span class="line">        <span class="string">'排量'</span>: data[<span class="number">9</span>],</span><br><span class="line">        <span class="string">'过户次数'</span>: data[<span class="number">10</span>],</span><br><span class="line">        <span class="string">'看车地点'</span>: data[<span class="number">11</span>],</span><br><span class="line">        <span class="string">'年检到期'</span>: data[<span class="number">12</span>],</span><br><span class="line">        <span class="string">'交强险'</span>: data[<span class="number">13</span>],</span><br><span class="line">        <span class="string">'商业险到期'</span>: data[<span class="number">14</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    collection.insert_one(esc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">51</span>):</span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        print(<span class="string">'正在爬取第'</span> + str(i) + <span class="string">'页数据...'</span>)</span><br><span class="line">        url = <span class="string">'https://www.guazi.com/www/buy/o%sc-1/'</span> % i</span><br><span class="line">        detail_urls = parse_index()</span><br><span class="line">        <span class="keyword">for</span> detail_url <span class="keyword">in</span> detail_urls:</span><br><span class="line">            car_url = <span class="string">'https://www.guazi.com'</span> + detail_url</span><br><span class="line">            car_data = parse_detail(car_url)</span><br><span class="line">            save_data(car_data)</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            print(<span class="string">'第'</span> + str(num) + <span class="string">'条数据爬取完毕！'</span>)</span><br><span class="line">            <span class="comment"># 在3-10秒之间随机暂停</span></span><br><span class="line">            time.sleep(random.randint(<span class="number">3</span>, <span class="number">10</span>))</span><br><span class="line">        print(<span class="string">'第'</span> + str(i) + <span class="string">'页数据爬取完毕！'</span>)</span><br><span class="line">        print(<span class="string">'====================='</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">5</span>, <span class="number">60</span>))</span><br><span class="line">    print(<span class="string">'所有数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【5x00】数据截图"><a href="#【5x00】数据截图" class="headerlink" title="【5x00】数据截图"></a><font color="#FF0000">【5x00】数据截图</font></h1><p><strong><font color="#1BC3FB">爬取的汽车图片：</font></strong></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A59/02.png" alt="02"><br></fancybox><p><strong><font color="#1BC3FB">储存到 MongoDB 的数据：</font></strong></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A59/03.png" alt="03"><br></fancybox><p><strong><font color="#1BC3FB">数据导出为 CSV 文件：</font></strong></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A59/04.png" alt="04"><br></fancybox><hr><h1 id="【6x00】程序不足的地方"><a href="#【6x00】程序不足的地方" class="headerlink" title="【6x00】程序不足的地方"></a><font color="#FF0000">【6x00】程序不足的地方</font></h1><p>Cookie 过一段时间就会失效，数据还没爬取完就失效了，导致无法继续爬取；爬取效率不高，可以考虑多线程爬取</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;爬取时间：2019-11-14&lt;br&gt;爬取难度：★★☆☆☆☆&lt;br&gt;请求链接：&lt;a href=&quot;https://www.guazi.com/www/buy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.guazi.com/www/buy/&lt;/a&gt;&lt;br&gt;爬取目标：爬取瓜子全国二手车信息，包括价格、上牌时间、表显里程等；保存车辆图片&lt;br&gt;涉及知识：请求库 requests、解析库 lxml、Xpath 语法、数据库 MongoDB 的操作&lt;br&gt;完整代码：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice/tree/master/guazi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice/tree/master/guazi&lt;/a&gt;&lt;br&gt;其他爬虫实战代码合集（持续更新）：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice&lt;/a&gt;&lt;br&gt;爬虫实战专栏（持续更新）：&lt;a href=&quot;https://itrhx.blog.csdn.net/article/category/9351278&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://itrhx.blog.csdn.net/article/category/9351278&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="瓜子二手车" scheme="https://www.itrhx.com/tags/%E7%93%9C%E5%AD%90%E4%BA%8C%E6%89%8B%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫实战 — 58同城武汉出租房【加密字体对抗】</title>
    <link href="https://www.itrhx.com/2019/10/21/A58-pyspider-58tongcheng/"/>
    <id>https://www.itrhx.com/2019/10/21/A58-pyspider-58tongcheng/</id>
    <published>2019-10-21T13:22:53.980Z</published>
    <updated>2019-10-21T13:32:53.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-10-21<br>爬取难度：★★★☆☆☆<br>请求链接：<a href="https://wh.58.com/chuzu/" target="_blank" rel="noopener">https://wh.58.com/chuzu/</a><br>爬取目标：58同城武汉出租房的所有信息<br>涉及知识：网站加密字体的攻克、请求库 requests、解析库 Beautiful Soup、数据库 MySQL 的操作<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/58tongcheng" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/58tongcheng</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】加密字体攻克思路"><a href="#【1x00】加密字体攻克思路" class="headerlink" title="【1x00】加密字体攻克思路"></a><font color="#ff0000">【1x00】加密字体攻克思路</font></h1><p>F12 打开调试模板，通过页面分析，可以观察到，网站里面凡是涉及到有数字的地方，都是显示为乱码，这种情况就是字体加密了，那么是通过什么手段实现字体加密的呢？</p><p>CSS 中有一个 <code>@font-face</code> 规则，它允许为网页指定在线字体，也就是说可以引入自定义字体，这个规则本意是用来消除对电脑字体的依赖，现在不少网站也利用这个规则来实现反爬</p><p>右侧可以看到网站用的字体，其他的都是常见的微软雅黑，宋体等，但是有一个特殊的：<code>fangchan-secret</code> ，不难看出这应该就是58同城的自定义字体了</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/01.png" alt="01"><br></fancybox><p>我们通过控制台看到的乱码事实上是由于 unicode 编码导致，查看网页源代码，我们才能看到他真正的编码信息</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/02.png" alt="02"><br></fancybox><p>要攻克加密字体，那么我们肯定要分析他的字体文件了，先想办法得到他的加密字体文件，同样查看源代码，在源代码中搜索 <code>fangchan-secret</code> 的字体信息</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/03.png" alt="03"><br></fancybox><p>选中的蓝色部分就是 base64 编码的加密字体字符串了，我们将其解码成二进制编码，写进 <code>.woff</code> 的字体文件，这个过程可以通过以下代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://wh.58.com/chuzu/'</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line"><span class="comment"># 匹配 base64 编码的加密字体字符串</span></span><br><span class="line">base64_string = response.text.split(<span class="string">"base64,"</span>)[<span class="number">1</span>].split(<span class="string">"'"</span>)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="comment"># 将 base64 编码的字体字符串解码成二进制编码</span></span><br><span class="line">bin_data = base64.decodebytes(base64_string.encode())</span><br><span class="line"><span class="comment"># 保存为字体文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'58font.woff'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(bin_data)</span><br></pre></td></tr></table></figure><p>得到字体文件后，我们可以通过 <font color="#ff0000">FontCreator</font> 这个软件来看看字体对应的编码是什么：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/04.png" alt="04"><br></fancybox><p>观察我们在网页源代码中看到的编码：类似于 <code>&amp;#x9fa4;</code>、<code>&amp;#x9f92;</code></p><p>对比字体文件对应的编码：类似于 <code>uni9FA4</code>、<code>nui9F92</code></p><p>可以看到除了前面三个字符不一样以外，后面的字符都是一样的，只不过英文大小写有所差异</p><p>现在我们可能会想到，直接把编码替换成对应的数字不就OK了？然而并没有这么简单</p><p>尝试刷新一下网页，可以观察到 base64 编码的加密字体字符串会改变，也就是说编码和数字并不是一一对应的，再次获取几个字体文件，通过对比就可以看出来</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/05.png" alt="05"><br></fancybox><p>可以看到，虽然每次数字对应的编码都不一样，但是编码总是这10个，是不变的，那么编码与数字之间肯定存在某种对应关系，，我们可以将字体文件转换为 xml 文件来观察其中的对应关系，改进原来的代码即可实现转换功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://wh.58.com/chuzu/'</span></span><br><span class="line"></span><br><span class="line">response = requests.get(url=url, headers=headers)</span><br><span class="line"><span class="comment"># 匹配 base64 编码的加密字体字符串</span></span><br><span class="line">base64_string = response.text.split(<span class="string">"base64,"</span>)[<span class="number">1</span>].split(<span class="string">"'"</span>)[<span class="number">0</span>].strip()</span><br><span class="line"><span class="comment"># 将 base64 编码的字体字符串解码成二进制编码</span></span><br><span class="line">bin_data = base64.decodebytes(base64_string.encode())</span><br><span class="line"><span class="comment"># 保存为字体文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'58font.woff'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(bin_data)</span><br><span class="line"><span class="comment"># 获取字体文件，将其转换为xml文件</span></span><br><span class="line">font = TTFont(<span class="string">'58font.woff'</span>)</span><br><span class="line">font.saveXML(<span class="string">'58font.xml'</span>)</span><br></pre></td></tr></table></figure><p>打开 <code>58font.xml</code> 文件并分析，在 <code>&lt;cmap&gt;</code> 标签内可以看到熟悉的类似于 <code>0x9476</code>、<code>0x958f</code> 的编码，其后四位字符恰好是网页字体的加密编码，可以看到每一个编码后面都对应了一个 <code>glyph</code> 开头的编码</p><p>将其与 <code>58font.woff</code> 文件对比，可以看到 code 为 <code>0x958f</code> 这个编码对应的是数字 <code>3</code>，对应的 name 编码是 <code>glyph00004</code></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/06.png" alt="06"><br></fancybox><p>我们再次获取一个字体文件作为对比分析</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/07.png" alt="07"><br></fancybox><p>依然是 <code>0x958f</code> 这个编码，两次对应的 name 分别是 <code>glyph00004</code> 和 <code>glyph00007</code>，两次对应的数字分别是 <code>3</code> 和 <code>6</code>，那么结论就来了，每次发送请求，code 对应的 name 会随机发生变化，而 name 对应的数字不会发生变化，<code>glyph00001</code> 对应数字 <code>0</code>、<code>glyph00002</code> 对应数字 <code>1</code>，以此类推</p><p>那么以 <code>glyph</code> 开头的编码是如何对应相应的数字的呢？在 xml 文件里面，每个编码都有一个 <code>TTGlyph</code> 的标签，标签里面是一行一行的类似于 x,y 坐标的东西，这个其实就是用来绘制字体的，用 matplotlib 根据坐标画个图，就可以看到是一个数字</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/08.png" alt="08"><br></fancybox><p>此时，我们就知道了编码与数字的对应关系，下一步，我们可以查找 xml 文件里，编码对应的 name 的值，也就是以 <code>glyph</code> 开头的编码，然后返回其对应的数字，再替换掉网页源代码里的编码，就能成功获取到我们需要的信息了！</p><p>总结一下攻克加密字体的大致思路：</p><ul><li><p>分析网页，找到对应的加密字体文件</p></li><li><p>如果引用的加密字体是一个 base64 编码的字符串，则需要转换成二进制并保存到 woff 字体文件中</p></li><li><p>将字体文件转换成 xml 文件</p></li><li><p>用 FontCreator 软件观察字体文件，结合 xml 文件，分析其编码与真实字体的关系</p></li><li><p>搞清楚编码与字体的关系后，想办法将编码替换成正常字体 </p></li></ul><hr><h1 id="【2x00】思维导图"><a href="#【2x00】思维导图" class="headerlink" title="【2x00】思维导图"></a><font color="#ff0000">【2x00】思维导图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/09.png" alt="09"><br></fancybox><hr><h1 id="【3x00】加密字体处理模块"><a href="#【3x00】加密字体处理模块" class="headerlink" title="【3x00】加密字体处理模块"></a><font color="#ff0000">【3x00】加密字体处理模块</font></h1><h2 id="【3x01】获取字体文件并转换为xml文件"><a href="#【3x01】获取字体文件并转换为xml文件" class="headerlink" title="【3x01】获取字体文件并转换为xml文件"></a><font color="#1BC3FB">【3x01】获取字体文件并转换为xml文件</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_font</span><span class="params">(page_url, page_num)</span>:</span></span><br><span class="line">    response = requests.get(url=page_url, headers=headers)</span><br><span class="line">    <span class="comment"># 匹配 base64 编码的加密字体字符串</span></span><br><span class="line">    base64_string = response.text.split(<span class="string">"base64,"</span>)[<span class="number">1</span>].split(<span class="string">"'"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">    <span class="comment"># print(base64_string)</span></span><br><span class="line">    <span class="comment"># 将 base64 编码的字体字符串解码成二进制编码</span></span><br><span class="line">    bin_data = base64.decodebytes(base64_string.encode())</span><br><span class="line">    <span class="comment"># 保存为字体文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'58font.woff'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bin_data)</span><br><span class="line">    print(<span class="string">'第'</span> + str(page_num) + <span class="string">'次访问网页，字体文件保存成功！'</span>)</span><br><span class="line">    <span class="comment"># 获取字体文件，将其转换为xml文件</span></span><br><span class="line">    font = TTFont(<span class="string">'58font.woff'</span>)</span><br><span class="line">    font.saveXML(<span class="string">'58font.xml'</span>)</span><br><span class="line">    print(<span class="string">'已成功将字体文件转换为xml文件！'</span>)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br></pre></td></tr></table></figure><p>由主函数传入要发送请求的 url，利用字符串的 <code>split()</code> 方法，匹配 base64 编码的加密字体字符串，利用 <code>base64</code> 模块的 <code>base64.decodebytes()</code> 方法，将 base64 编码的字体字符串解码成二进制编码并保存为字体文件，利用 <code>FontTools</code> 库，将字体文件转换为 xml 文件</p><hr><h2 id="【3x02】将加密字体编码与真实字体进行匹配"><a href="#【3x02】将加密字体编码与真实字体进行匹配" class="headerlink" title="【3x02】将加密字体编码与真实字体进行匹配"></a><font color="#1BC3FB">【3x02】将加密字体编码与真实字体进行匹配</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_font</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 以glyph开头的编码对应的数字</span></span><br><span class="line">    glyph_list = &#123;</span><br><span class="line">        <span class="string">'glyph00001'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'glyph00002'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'glyph00003'</span>: <span class="string">'2'</span>,</span><br><span class="line">        <span class="string">'glyph00004'</span>: <span class="string">'3'</span>,</span><br><span class="line">        <span class="string">'glyph00005'</span>: <span class="string">'4'</span>,</span><br><span class="line">        <span class="string">'glyph00006'</span>: <span class="string">'5'</span>,</span><br><span class="line">        <span class="string">'glyph00007'</span>: <span class="string">'6'</span>,</span><br><span class="line">        <span class="string">'glyph00008'</span>: <span class="string">'7'</span>,</span><br><span class="line">        <span class="string">'glyph00009'</span>: <span class="string">'8'</span>,</span><br><span class="line">        <span class="string">'glyph00010'</span>: <span class="string">'9'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 十个加密字体编码</span></span><br><span class="line">    unicode_list = [<span class="string">'0x9476'</span>, <span class="string">'0x958f'</span>, <span class="string">'0x993c'</span>, <span class="string">'0x9a4b'</span>, <span class="string">'0x9e3a'</span>, <span class="string">'0x9ea3'</span>, <span class="string">'0x9f64'</span>, <span class="string">'0x9f92'</span>, <span class="string">'0x9fa4'</span>, <span class="string">'0x9fa5'</span>]</span><br><span class="line">    num_list = []</span><br><span class="line">    <span class="comment"># 利用xpath语法匹配xml文件内容</span></span><br><span class="line">    font_data = etree.parse(<span class="string">'./58font.xml'</span>)</span><br><span class="line">    <span class="keyword">for</span> unicode <span class="keyword">in</span> unicode_list:</span><br><span class="line">        <span class="comment"># 依次循环查找xml文件里code对应的name</span></span><br><span class="line">        result = font_data.xpath(<span class="string">"//cmap//map[@code='&#123;&#125;']/@name"</span>.format(unicode))[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        <span class="comment"># 循环字典的key，如果code对应的name与字典的key相同，则得到key对应的value</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> glyph_list.keys():</span><br><span class="line">            <span class="keyword">if</span> key == result:</span><br><span class="line">                num_list.append(glyph_list[key])</span><br><span class="line">    print(<span class="string">'已成功找到编码所对应的数字！'</span>)</span><br><span class="line">    <span class="comment"># print(num_list)</span></span><br><span class="line">    <span class="comment"># 返回value列表</span></span><br><span class="line">    <span class="keyword">return</span> num_list</span><br></pre></td></tr></table></figure><p>由前面的分析，我们知道 name 的值（即以 glyph 开头的编码）对应的数字是固定的，<code>glyph00001</code> 对应数字 <code>0</code>、<code>glyph00002</code> 对应数字 <code>1</code>，以此类推，所以可以将其构造成为一个字典 <code>glyph_list</code></p><p>同样将十个 code（即类似于 <code>0x9476</code> 的加密字体编码）构造成一个列表</p><p>循环查找这十个 <code>code</code> 在 xml 文件里对应的 <code>name</code> 的值，然后将 <code>name</code> 的值与字典文件的 <code>key</code> 值进行对比，如果两者值相同，则获取这个 <code>key</code> 的 <code>value</code> 值，最终得到的列表 <code>num_list</code>，里面的元素就是 <code>unicode_list</code> 列表里面每个加密字体的真实值</p><hr><h2 id="【3x03】替换掉网页中所有的加密字体编码"><a href="#【3x03】替换掉网页中所有的加密字体编码" class="headerlink" title="【3x03】替换掉网页中所有的加密字体编码"></a><font color="#1BC3FB">【3x03】替换掉网页中所有的加密字体编码</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_font</span><span class="params">(num, page_response)</span>:</span></span><br><span class="line">    <span class="comment"># 9476 958F 993C 9A4B 9E3A 9EA3 9F64 9F92 9FA4 9FA5</span></span><br><span class="line">    result = page_response.replace(<span class="string">'&amp;#x9476;'</span>, num[<span class="number">0</span>]).replace(<span class="string">'&amp;#x958f;'</span>, num[<span class="number">1</span>]).replace(<span class="string">'&amp;#x993c;'</span>, num[<span class="number">2</span>]).replace(<span class="string">'&amp;#x9a4b;'</span>, num[<span class="number">3</span>]).replace(<span class="string">'&amp;#x9e3a;'</span>, num[<span class="number">4</span>]).replace(<span class="string">'&amp;#x9ea3;'</span>, num[<span class="number">5</span>]).replace(<span class="string">'&amp;#x9f64;'</span>, num[<span class="number">6</span>]).replace(<span class="string">'&amp;#x9f92;'</span>, num[<span class="number">7</span>]).replace(<span class="string">'&amp;#x9fa4;'</span>, num[<span class="number">8</span>]).replace(<span class="string">'&amp;#x9fa5;'</span>, num[<span class="number">9</span>])</span><br><span class="line">    print(<span class="string">'已成功将所有加密字体替换！'</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>传入由上一步 <code>find_font()</code> 函数得到的真实字体的列表，利用 <code>replace()</code> 方法，依次将十个加密字体编码替换掉</p><hr><h1 id="【4x00】租房信息提取模块"><a href="#【4x00】租房信息提取模块" class="headerlink" title="【4x00】租房信息提取模块"></a><font color="#FF0000">【4x00】租房信息提取模块</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(pages)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    soup = BeautifulSoup(pages, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment"># 查找到包含所有租房的li标签</span></span><br><span class="line">    all_house = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'house-cell'</span>)</span><br><span class="line">    <span class="keyword">for</span> house <span class="keyword">in</span> all_house:</span><br><span class="line">        <span class="comment"># 标题</span></span><br><span class="line">        title = house.find(<span class="string">'a'</span>, class_=<span class="string">'strongbox'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 价格</span></span><br><span class="line">        price = house.find(<span class="string">'div'</span>, class_=<span class="string">'money'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(price)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 户型和面积</span></span><br><span class="line">        layout = house.find(<span class="string">'p'</span>, class_=<span class="string">'room'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(layout)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 楼盘和地址</span></span><br><span class="line">        address = house.find(<span class="string">'p'</span>, class_=<span class="string">'infor'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(address)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果存在经纪人</span></span><br><span class="line">        <span class="keyword">if</span> house.find(<span class="string">'div'</span>, class_=<span class="string">'jjr'</span>):</span><br><span class="line">            agent = house.find(<span class="string">'div'</span>, class_=<span class="string">'jjr'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 如果存在品牌公寓</span></span><br><span class="line">        <span class="keyword">elif</span> house.find(<span class="string">'p'</span>, class_=<span class="string">'gongyu'</span>):</span><br><span class="line">            agent = house.find(<span class="string">'p'</span>, class_=<span class="string">'gongyu'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 如果存在个人房源</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            agent = house.find(<span class="string">'p'</span>, class_=<span class="string">'geren'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(agent)</span></span><br><span class="line"></span><br><span class="line">        data = [title, price, layout, address, agent]</span><br><span class="line">        save_to_mysql(data)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'第'</span> + str(num) + <span class="string">'条数据爬取完毕，暂停3秒！'</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>利用 BeautifulSoup 解析库很容易提取到相关信息，这里要注意的是，租房信息来源分为三种：经纪人、品牌公寓和个人房源，这三个的元素节点也不一样，因此匹配的时候要注意</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/10.png" alt="10"><br></fancybox><hr><h1 id="【5x00】MySQL数据储存模块"><a href="#【5x00】MySQL数据储存模块" class="headerlink" title="【5x00】MySQL数据储存模块"></a><font color="#FF0000">【5x00】MySQL数据储存模块</font></h1><h2 id="【5x01】创建MySQL数据库的表"><a href="#【5x01】创建MySQL数据库的表" class="headerlink" title="【5x01】创建MySQL数据库的表"></a><font color="#1BC3FB">【5x01】创建MySQL数据库的表</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_mysql_table</span><span class="params">()</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'58tc_spiders'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">'CREATE TABLE IF NOT EXISTS 58tc_data (title VARCHAR(255) NOT NULL, price VARCHAR(255) NOT NULL, layout VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, agent VARCHAR(255) NOT NULL)'</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p>首先指定数据库为 58tc_spiders，需要事先使用 MySQL 语句创建，也可以通过 MySQL Workbench 手动创建</p><p>然后使用 SQL 语句创建 一个表：58tc_data，表中包含 title、price、layout、address、agent 五个字段，类型都为 varchar</p><p>此创建表的操作也可以事先手动创建，手动创建后就不需要此函数了</p><hr><h2 id="【5x02】将数据储存到MySQL数据库"><a href="#【5x02】将数据储存到MySQL数据库" class="headerlink" title="【5x02】将数据储存到MySQL数据库"></a><font color="#1BC3FB">【5x02】将数据储存到MySQL数据库</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mysql</span><span class="params">(data)</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'58tc_spiders'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">'INSERT INTO 58tc_data(title, price, layout, address, agent) values(%s, %s, %s, %s, %s)'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(sql, (data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>], data[<span class="number">3</span>], data[<span class="number">4</span>]))</span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        db.rollback()</span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p><code>commit()</code> 方法的作用是实现数据插入，是真正将语句提交到数据库执行的方法，使用 <code>try except</code> 语句实现异常处理，如果执行失败，则调用 <code>rollback()</code> 方法执行数据回滚，保证原数据不被破坏</p><hr><h1 id="【6x00】完整代码"><a href="#【6x00】完整代码" class="headerlink" title="【6x00】完整代码"></a><font color="#FF0000">【6x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-21</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: 58tongcheng.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取字体文件并转换为xml文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_font</span><span class="params">(page_url, page_num)</span>:</span></span><br><span class="line">    response = requests.get(url=page_url, headers=headers)</span><br><span class="line">    <span class="comment"># 匹配 base64 编码的加密字体字符串</span></span><br><span class="line">    base64_string = response.text.split(<span class="string">"base64,"</span>)[<span class="number">1</span>].split(<span class="string">"'"</span>)[<span class="number">0</span>].strip()</span><br><span class="line">    <span class="comment"># print(base64_string)</span></span><br><span class="line">    <span class="comment"># 将 base64 编码的字体字符串解码成二进制编码</span></span><br><span class="line">    bin_data = base64.decodebytes(base64_string.encode())</span><br><span class="line">    <span class="comment"># 保存为字体文件</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'58font.woff'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bin_data)</span><br><span class="line">    print(<span class="string">'第'</span> + str(page_num) + <span class="string">'次访问网页，字体文件保存成功！'</span>)</span><br><span class="line">    <span class="comment"># 获取字体文件，将其转换为xml文件</span></span><br><span class="line">    font = TTFont(<span class="string">'58font.woff'</span>)</span><br><span class="line">    font.saveXML(<span class="string">'58font.xml'</span>)</span><br><span class="line">    print(<span class="string">'已成功将字体文件转换为xml文件！'</span>)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将加密字体编码与真实字体进行匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_font</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 以glyph开头的编码对应的数字</span></span><br><span class="line">    glyph_list = &#123;</span><br><span class="line">        <span class="string">'glyph00001'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'glyph00002'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'glyph00003'</span>: <span class="string">'2'</span>,</span><br><span class="line">        <span class="string">'glyph00004'</span>: <span class="string">'3'</span>,</span><br><span class="line">        <span class="string">'glyph00005'</span>: <span class="string">'4'</span>,</span><br><span class="line">        <span class="string">'glyph00006'</span>: <span class="string">'5'</span>,</span><br><span class="line">        <span class="string">'glyph00007'</span>: <span class="string">'6'</span>,</span><br><span class="line">        <span class="string">'glyph00008'</span>: <span class="string">'7'</span>,</span><br><span class="line">        <span class="string">'glyph00009'</span>: <span class="string">'8'</span>,</span><br><span class="line">        <span class="string">'glyph00010'</span>: <span class="string">'9'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 十个加密字体编码</span></span><br><span class="line">    unicode_list = [<span class="string">'0x9476'</span>, <span class="string">'0x958f'</span>, <span class="string">'0x993c'</span>, <span class="string">'0x9a4b'</span>, <span class="string">'0x9e3a'</span>, <span class="string">'0x9ea3'</span>, <span class="string">'0x9f64'</span>, <span class="string">'0x9f92'</span>, <span class="string">'0x9fa4'</span>, <span class="string">'0x9fa5'</span>]</span><br><span class="line">    num_list = []</span><br><span class="line">    <span class="comment"># 利用xpath语法匹配xml文件内容</span></span><br><span class="line">    font_data = etree.parse(<span class="string">'./58font.xml'</span>)</span><br><span class="line">    <span class="keyword">for</span> unicode <span class="keyword">in</span> unicode_list:</span><br><span class="line">        <span class="comment"># 依次循环查找xml文件里code对应的name</span></span><br><span class="line">        result = font_data.xpath(<span class="string">"//cmap//map[@code='&#123;&#125;']/@name"</span>.format(unicode))[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        <span class="comment"># 循环字典的key，如果code对应的name与字典的key相同，则得到key对应的value</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> glyph_list.keys():</span><br><span class="line">            <span class="keyword">if</span> key == result:</span><br><span class="line">                num_list.append(glyph_list[key])</span><br><span class="line">    print(<span class="string">'已成功找到编码所对应的数字！'</span>)</span><br><span class="line">    <span class="comment"># print(num_list)</span></span><br><span class="line">    <span class="comment"># 返回value列表</span></span><br><span class="line">    <span class="keyword">return</span> num_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉网页中所有的加密字体编码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_font</span><span class="params">(num, page_response)</span>:</span></span><br><span class="line">    <span class="comment"># 9476 958F 993C 9A4B 9E3A 9EA3 9F64 9F92 9FA4 9FA5</span></span><br><span class="line">    result = page_response.replace(<span class="string">'&amp;#x9476;'</span>, num[<span class="number">0</span>]).replace(<span class="string">'&amp;#x958f;'</span>, num[<span class="number">1</span>]).replace(<span class="string">'&amp;#x993c;'</span>, num[<span class="number">2</span>]).replace(<span class="string">'&amp;#x9a4b;'</span>, num[<span class="number">3</span>]).replace(<span class="string">'&amp;#x9e3a;'</span>, num[<span class="number">4</span>]).replace(<span class="string">'&amp;#x9ea3;'</span>, num[<span class="number">5</span>]).replace(<span class="string">'&amp;#x9f64;'</span>, num[<span class="number">6</span>]).replace(<span class="string">'&amp;#x9f92;'</span>, num[<span class="number">7</span>]).replace(<span class="string">'&amp;#x9fa4;'</span>, num[<span class="number">8</span>]).replace(<span class="string">'&amp;#x9fa5;'</span>, num[<span class="number">9</span>])</span><br><span class="line">    print(<span class="string">'已成功将所有加密字体替换！'</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取租房信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(pages)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    soup = BeautifulSoup(pages, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="comment"># 查找到包含所有租房的li标签</span></span><br><span class="line">    all_house = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'house-cell'</span>)</span><br><span class="line">    <span class="keyword">for</span> house <span class="keyword">in</span> all_house:</span><br><span class="line">        <span class="comment"># 标题</span></span><br><span class="line">        title = house.find(<span class="string">'a'</span>, class_=<span class="string">'strongbox'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 价格</span></span><br><span class="line">        price = house.find(<span class="string">'div'</span>, class_=<span class="string">'money'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(price)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 户型和面积</span></span><br><span class="line">        layout = house.find(<span class="string">'p'</span>, class_=<span class="string">'room'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(layout)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 楼盘和地址</span></span><br><span class="line">        address = house.find(<span class="string">'p'</span>, class_=<span class="string">'infor'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(address)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果存在经纪人</span></span><br><span class="line">        <span class="keyword">if</span> house.find(<span class="string">'div'</span>, class_=<span class="string">'jjr'</span>):</span><br><span class="line">            agent = house.find(<span class="string">'div'</span>, class_=<span class="string">'jjr'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 如果存在品牌公寓</span></span><br><span class="line">        <span class="keyword">elif</span> house.find(<span class="string">'p'</span>, class_=<span class="string">'gongyu'</span>):</span><br><span class="line">            agent = house.find(<span class="string">'p'</span>, class_=<span class="string">'gongyu'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 如果存在个人房源</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            agent = house.find(<span class="string">'p'</span>, class_=<span class="string">'geren'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(agent)</span></span><br><span class="line"></span><br><span class="line">        data = [title, price, layout, address, agent]</span><br><span class="line">        save_to_mysql(data)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'第'</span> + str(num) + <span class="string">'条数据爬取完毕，暂停3秒！'</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建MySQL数据库的表：58tc_data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_mysql_table</span><span class="params">()</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'58tc_spiders'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">'CREATE TABLE IF NOT EXISTS 58tc_data (title VARCHAR(255) NOT NULL, price VARCHAR(255) NOT NULL, layout VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, agent VARCHAR(255) NOT NULL)'</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据储存到MySQL数据库</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mysql</span><span class="params">(data)</span>:</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, password=<span class="string">'000000'</span>, port=<span class="number">3306</span>, db=<span class="string">'58tc_spiders'</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    sql = <span class="string">'INSERT INTO 58tc_data(title, price, layout, address, agent) values(%s, %s, %s, %s, %s)'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(sql, (data[<span class="number">0</span>], data[<span class="number">1</span>], data[<span class="number">2</span>], data[<span class="number">3</span>], data[<span class="number">4</span>]))</span><br><span class="line">        db.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        db.rollback()</span><br><span class="line">    db.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    create_mysql_table()</span><br><span class="line">    print(<span class="string">'MySQL表58tc_data创建成功！'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">71</span>):</span><br><span class="line">        url = <span class="string">'https://wh.58.com/chuzu/pn'</span> + str(i) + <span class="string">'/'</span></span><br><span class="line">        response = get_font(url, i)</span><br><span class="line">        num_list = find_font()</span><br><span class="line">        pro_pages = replace_font(num_list, response)</span><br><span class="line">        parse_pages(pro_pages)</span><br><span class="line">        print(<span class="string">'第'</span> + str(i) + <span class="string">'页数据爬取完毕！'</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">3</span>, <span class="number">60</span>))</span><br><span class="line">    print(<span class="string">'所有数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【7x00】数据截图"><a href="#【7x00】数据截图" class="headerlink" title="【7x00】数据截图"></a><font color="#FF0000">【7x00】数据截图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A58/11.png" alt="11"><br></fancybox>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;爬取时间：2019-10-21&lt;br&gt;爬取难度：★★★☆☆☆&lt;br&gt;请求链接：&lt;a href=&quot;https://wh.58.com/chuzu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wh.58.com/chuzu/&lt;/a&gt;&lt;br&gt;爬取目标：58同城武汉出租房的所有信息&lt;br&gt;涉及知识：网站加密字体的攻克、请求库 requests、解析库 Beautiful Soup、数据库 MySQL 的操作&lt;br&gt;完整代码：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice/tree/master/58tongcheng&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice/tree/master/58tongcheng&lt;/a&gt;&lt;br&gt;其他爬虫实战代码合集（持续更新）：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice&lt;/a&gt;&lt;br&gt;爬虫实战专栏（持续更新）：&lt;a href=&quot;https://itrhx.blog.csdn.net/article/category/9351278&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://itrhx.blog.csdn.net/article/category/9351278&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="58同城" scheme="https://www.itrhx.com/tags/58%E5%90%8C%E5%9F%8E/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫实战 — 模拟登陆12306【点触验证码对抗】</title>
    <link href="https://www.itrhx.com/2019/10/21/A57-pyspider-12306-login/"/>
    <id>https://www.itrhx.com/2019/10/21/A57-pyspider-12306-login/</id>
    <published>2019-10-21T08:41:50.349Z</published>
    <updated>2019-10-21T13:33:47.617Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>登陆时间：2019-10-21<br>实现难度：★★★☆☆☆<br>请求链接：<a href="https://kyfw.12306.cn/otn/resources/login.html" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/resources/login.html</a><br>实现目标：模拟登陆中国铁路12306，攻克点触验证码<br>涉及知识：点触验证码的攻克、自动化测试工具 Selenium 的使用、对接在线打码平台<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/12306-login" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/12306-login</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】思维导图"><a href="#【1x00】思维导图" class="headerlink" title="【1x00】思维导图"></a><font color="#ff0000">【1x00】思维导图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A57/01.png" alt="01"><br></fancybox><ul><li><p>利用自动化测试工具 Selenium 直接模拟人的行为方式来完成验证</p></li><li><p>发送请求，出现验证码后，剪裁并保存验证码图片</p></li><li><p>选择在线打码平台，获取其API，以字节流格式发送图片</p></li><li><p>打码平台人工识别验证码，返回验证码的坐标信息</p></li><li><p>解析返回的坐标信息，模拟点击验证码，完成验证后点击登陆</p></li></ul><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A57/02.png" alt="02"><br></fancybox><hr><h1 id="【2x00】打码平台选择"><a href="#【2x00】打码平台选择" class="headerlink" title="【2x00】打码平台选择"></a><font color="#ff0000">【2x00】打码平台选择</font></h1><p>关于打码平台：在线打码平台全部都是人工在线识别，准确率非常高，原理就是先将验证码图片提交给平台，平台会返回识别结果在图片中的坐标位置，然后我们再解析坐标模拟点击即可，常见的打码平台有超级鹰、云打码等，打码平台是收费的，拿超级鹰来说，1元 = 1000题分，识别一次验证码将花费一定的题分，不同类型验证码需要的题分不同，验证码越复杂所需题分越高，比如 7 位中文汉字需要 70 题分，常见 4 ~ 6 位英文数字只要 10 题分，其他打码平台价格也都差不多，本次实战使用<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">超级鹰打码平台</a></p><p>使用打码平台：在超级鹰打码平台注册账号，官网：<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">http://www.chaojiying.com/</a> ，充值一块钱得到 1000 题分，在用户中心里面申请一个软件 ID  ，在<a href="http://www.chaojiying.com/price.html" target="_blank" rel="noopener">价格体系</a>里面确定验证码的类型，先观察 12306 官网，发现验证码是要我们点击所有满足条件的图片，一般有 1 至 4 张图片满足要求，由此可确定在超级鹰打码平台的验证码类型为 9004（坐标多选,返回1~4个坐标,如:x1,y1|x2,y2|x3,y3）， 然后在<a href="http://www.chaojiying.com/api.html" target="_blank" rel="noopener">开发文档</a>里面获取其 <a href="http://www.chaojiying.com/download/Chaojiying_Python.rar" target="_blank" rel="noopener">Python API</a>，下载下来以备后用</p><hr><h1 id="【3x00】初始化模块"><a href="#【3x00】初始化模块" class="headerlink" title="【3x00】初始化模块"></a><font color="#ff0000">【3x00】初始化模块</font></h1><h2 id="【3x01】初始化函数"><a href="#【3x01】初始化函数" class="headerlink" title="【3x01】初始化函数"></a><font color="#1BC3FB">【3x01】初始化函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 12306账号密码</span></span><br><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超级鹰打码平台账号密码</span></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'*******'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'*******'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超级鹰打码平台软件ID</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'********'</span></span><br><span class="line"><span class="comment"># 验证码类型</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        <span class="comment"># path是谷歌浏览器驱动的目录，如果已经将目录添加到系统变量，则不用设置此路径</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.username = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = ChaojiyingClient(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br></pre></td></tr></table></figure><p>定义 12306 账号（<code>USERNAME</code>）、密码（<code>PASSWORD</code>）、超级鹰用户名（<code>CHAOJIYING_USERNAME</code>）、超级鹰登录密码（<code>CHAOJIYING_PASSWORD</code>）、超级鹰软件 ID（<code>CHAOJIYING_SOFT_ID</code>）、验证码类型（<code>CHAOJIYING_KIND</code>），登录页面 url ，谷歌浏览器驱动的目录（<code>path</code>），浏览器启动参数等，将超级鹰账号密码等相关参数传递给超级鹰 API</p><hr><h2 id="【3x02】账号密码输入函数"><a href="#【3x02】账号密码输入函数" class="headerlink" title="【3x02】账号密码输入函数"></a><font color="#1BC3FB">【3x02】账号密码输入函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_input_element</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 登录页面发送请求</span></span><br><span class="line">    self.browser.get(self.url)</span><br><span class="line">    <span class="comment"># 登录页面默认是扫码登录，所以首先要点击账号登录</span></span><br><span class="line">    login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">    login.click()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 查找到账号密码输入位置的元素</span></span><br><span class="line">    username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">    password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">    <span class="comment"># 输入账号密码</span></span><br><span class="line">    username.send_keys(self.username)</span><br><span class="line">    password.send_keys(self.password)</span><br></pre></td></tr></table></figure><p>分析页面可知，登陆页面默认出现的是扫描二维码登陆，所以要先点击账号登录，找到该 CSS 元素为 <code>login-hd-account</code>，调用 <code>click()</code> 方法实现模拟点击，此时出现账号密码输入框，同样找到其 ID 分别为 <code>J-userName</code> 和 <code>J-password</code>，调用 <code>send_keys()</code> 方法输入账号密码</p><hr><h1 id="【4x00】验证码处理模块"><a href="#【4x00】验证码处理模块" class="headerlink" title="【4x00】验证码处理模块"></a><font color="#ff0000">【4x00】验证码处理模块</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 调用账号密码输入函数</span></span><br><span class="line">    self.get_input_element()</span><br><span class="line">    <span class="comment"># 调用验证码图片剪裁函数</span></span><br><span class="line">    image = self.get_touclick_image()</span><br><span class="line">    bytes_array = BytesIO()</span><br><span class="line">    image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">    <span class="comment"># 利用超级鹰打码平台的 API PostPic() 方法把图片发送给超级鹰后台，发送的图像是字节流格式，返回的结果是一个JSON</span></span><br><span class="line">    result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">    print(result)</span><br><span class="line">    <span class="comment"># 调用验证码坐标解析函数</span></span><br><span class="line">    locations = self.get_points(result)</span><br><span class="line">    <span class="comment"># 调用模拟点击验证码函数</span></span><br><span class="line">    self.touch_click_words(locations)</span><br><span class="line">    <span class="comment"># 调用模拟点击登录函数</span></span><br><span class="line">    self.login()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 查找是否出现用户的姓名，若出现表示登录成功</span></span><br><span class="line">        success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'谭先生'</span>))</span><br><span class="line">        print(success)</span><br><span class="line">        cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">        print(<span class="string">'用户'</span> + cc.text + <span class="string">'登录成功'</span>)</span><br><span class="line">        <span class="comment"># 若没有出现表示登录失败，继续重试，超级鹰会返回本次识别的分值</span></span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">        self.crack()</span><br></pre></td></tr></table></figure><p><code>crack()</code>  为验证码处理模块的主函数</p><p>调用账号密码输入函数 <code>get_input_element()</code>，等待账号密码输入完毕</p><p>调用验证码图片剪裁函数 <code>get_touclick_image()</code>，得到验证码图片</p><p>利用超级鹰打码平台的 API <code>PostPic()</code> 方法把图片发送给超级鹰后台，发送的图像是字节流格式，返回的结果是一个JSON，如果识别成功，典型的返回结果类似于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'err_no'</span>: <span class="number">0</span>, <span class="string">'err_str'</span>: <span class="string">'OK'</span>, <span class="string">'pic_id'</span>: <span class="string">'6002001380949200001'</span>, <span class="string">'pic_str'</span>: <span class="string">'132,127|56,77'</span>, <span class="string">'md5'</span>: </span><br><span class="line"><span class="string">'1f8e1d4bef8b11484cb1f1f34299865b'</span>&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>pic_str</code> 就是识别的文字的坐标，是以字符串形式返回的，每个坐标都以 <code>|</code> 分隔</p><p>调用 <code>get_points()</code> 函数解析超级鹰识别结果</p><p>调用 <code>touch_click_words()</code> 函数对符合要求的图片进行点击</p><p>调用模拟点击登录函数 <code>login()</code>，点击登陆按钮模拟登陆</p><p>使用 <code>try-except</code> 语句判断是否出现了用户信息，判断依据是是否有用户姓名的出现，出现的姓名和实际姓名一致则登录成功，如果失败了就重试，超级鹰会返回该分值</p><hr><h2 id="【4x01】验证码图片剪裁函数"><a href="#【4x01】验证码图片剪裁函数" class="headerlink" title="【4x01】验证码图片剪裁函数"></a><font color="#1BC3FB">【4x01】验证码图片剪裁函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 获取验证码的位置</span></span><br><span class="line">    element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    location = element.location</span><br><span class="line">    size = element.size</span><br><span class="line">    top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</span><br><span class="line">    <span class="comment"># 先对整个页面截图</span></span><br><span class="line">    screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">    screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">    <span class="comment"># 根据验证码坐标信息，剪裁出验证码图片</span></span><br><span class="line">    captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">    captcha.save(name)</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure><p>首先查找到验证码的坐标信息，先对整个页面截图，然后根据验证码坐标信息，剪裁出验证码图片</p><p>location 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x 轴向右递增，y 轴向下递增，size 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息</p><hr><h2 id="【4x02】验证码坐标解析函数"><a href="#【4x02】验证码坐标解析函数" class="headerlink" title="【4x02】验证码坐标解析函数"></a><font color="#1BC3FB">【4x02】验证码坐标解析函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">    <span class="comment"># 超级鹰识别结果以字符串形式返回，每个坐标都以|分隔</span></span><br><span class="line">    groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">    <span class="comment"># 将坐标信息变成列表的形式</span></span><br><span class="line">    locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">    <span class="keyword">return</span> locations</span><br></pre></td></tr></table></figure><p><code>get_points()</code> 方法将超级鹰的验证码识别结果变成列表的形式</p><hr><h2 id="【4x03】模拟点击验证码函数"><a href="#【4x03】模拟点击验证码函数" class="headerlink" title="【4x03】模拟点击验证码函数"></a><font color="#1BC3FB">【4x03】模拟点击验证码函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">    element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">    <span class="comment"># 循环点击正确验证码的坐标</span></span><br><span class="line">    <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">        print(location)</span><br><span class="line">        ActionChains(self.browser).move_to_element_with_offset(element, location[<span class="number">0</span>], location[<span class="number">1</span>]).click().perform()</span><br></pre></td></tr></table></figure><p>循环提取正确的验证码坐标信息，依次点击验证码</p><hr><h1 id="【5x00】登录模块"><a href="#【5x00】登录模块" class="headerlink" title="【5x00】登录模块"></a><font color="#ff0000">【5x00】登录模块</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">    submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">    submit.click()</span><br></pre></td></tr></table></figure><p>分析页面，找到登陆按钮的 ID 为 <code>J-login</code>，调用 <code>click()</code> 方法模拟点击按钮实现登录</p><hr><h1 id="【6x00】完整代码"><a href="#【6x00】完整代码" class="headerlink" title="【6x00】完整代码"></a><font color="#ff0000">【6x00】完整代码</font></h1><h2 id="【6x01】12306-py"><a href="#【6x01】12306-py" class="headerlink" title="【6x01】12306.py"></a><font color="#1BC3FB">【6x01】12306.py</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-21</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: 12306.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> ChaojiyingClient</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12306账号密码</span></span><br><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超级鹰打码平台账号密码</span></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'********'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'********'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 超级鹰打码平台软件ID</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'******'</span></span><br><span class="line"><span class="comment"># 验证码类型</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        <span class="comment"># path是谷歌浏览器驱动的目录，如果已经将目录添加到系统变量，则不用设置此路径</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.username = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = ChaojiyingClient(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 调用账号密码输入函数</span></span><br><span class="line">        self.get_input_element()</span><br><span class="line">        <span class="comment"># 调用验证码图片剪裁函数</span></span><br><span class="line">        image = self.get_touclick_image()</span><br><span class="line">        bytes_array = BytesIO()</span><br><span class="line">        image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">        <span class="comment"># 利用超级鹰打码平台的 API PostPic() 方法把图片发送给超级鹰后台，发送的图像是字节流格式，返回的结果是一个JSON</span></span><br><span class="line">        result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">        print(result)</span><br><span class="line">        <span class="comment"># 调用验证码坐标解析函数</span></span><br><span class="line">        locations = self.get_points(result)</span><br><span class="line">        <span class="comment"># 调用模拟点击验证码函数</span></span><br><span class="line">        self.touch_click_words(locations)</span><br><span class="line">        <span class="comment"># 调用模拟点击登录函数</span></span><br><span class="line">        self.login()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 查找是否出现用户的姓名，若出现表示登录成功</span></span><br><span class="line">            success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'谭先生'</span>))</span><br><span class="line">            print(success)</span><br><span class="line">            cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">            print(<span class="string">'用户'</span> + cc.text + <span class="string">'登录成功'</span>)</span><br><span class="line">            <span class="comment"># 若没有出现表示登录失败，继续重试，超级鹰会返回本次识别的分值</span></span><br><span class="line">        <span class="keyword">except</span> TimeoutException:</span><br><span class="line">            self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">            self.crack()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 账号密码输入函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_input_element</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 登录页面发送请求</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        <span class="comment"># 登录页面默认是扫码登录，所以首先要点击账号登录</span></span><br><span class="line">        login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">        login.click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="comment"># 查找到账号密码输入位置的元素</span></span><br><span class="line">        username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">        password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">        <span class="comment"># 输入账号密码</span></span><br><span class="line">        username.send_keys(self.username)</span><br><span class="line">        password.send_keys(self.password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证码图片剪裁函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 获取验证码的位置</span></span><br><span class="line">        element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        location = element.location</span><br><span class="line">        size = element.size</span><br><span class="line">        top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[</span><br><span class="line">            <span class="string">'width'</span>]</span><br><span class="line">        <span class="comment"># 先对整个页面截图</span></span><br><span class="line">        screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">        screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">        <span class="comment"># 根据验证码坐标信息，剪裁出验证码图片</span></span><br><span class="line">        captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">        captcha.save(name)</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证码坐标解析函数，分析超级鹰返回的坐标</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">        <span class="comment"># 超级鹰识别结果以字符串形式返回，每个坐标都以|分隔</span></span><br><span class="line">        groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">        <span class="comment"># 将坐标信息变成列表的形式</span></span><br><span class="line">        locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">        <span class="keyword">return</span> locations</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟点击验证码函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">        element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">        <span class="comment"># 循环点击正确验证码的坐标</span></span><br><span class="line">        <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">            print(location)</span><br><span class="line">            ActionChains(self.browser).move_to_element_with_offset(element, location[<span class="number">0</span>], location[<span class="number">1</span>]).click().perform()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟点击登录函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">        submit.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackTouClick()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure><hr><h2 id="【6x02】chaojiying-py"><a href="#【6x02】chaojiying-py" class="headerlink" title="【6x02】chaojiying.py"></a><font color="#1BC3FB">【6x02】chaojiying.py</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChaojiyingClient</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, soft_id)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">        password = password.encode(<span class="string">'utf8'</span>)</span><br><span class="line">        self.password = md5(password).hexdigest()</span><br><span class="line">        self.soft_id = soft_id</span><br><span class="line">        self.base_params = &#123;</span><br><span class="line">            <span class="string">'user'</span>: self.username,</span><br><span class="line">            <span class="string">'pass2'</span>: self.password,</span><br><span class="line">            <span class="string">'softid'</span>: self.soft_id,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostPic</span><span class="params">(self, im, codetype)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im: 图片字节</span></span><br><span class="line"><span class="string">        codetype: 题目类型 参考 http://www.chaojiying.com/price.html</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'codetype'</span>: codetype,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReportError</span><span class="params">(self, im_id)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im_id:报错题目的图片ID</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'id'</span>: im_id,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/ReportError.php'</span>, data=params, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br></pre></td></tr></table></figure><hr><h1 id="【7x00】效果实现动图"><a href="#【7x00】效果实现动图" class="headerlink" title="【7x00】效果实现动图"></a><font color="#ff0000">【7x00】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A57/12306.gif" alt="02"><br></fancybox>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;登陆时间：2019-10-21&lt;br&gt;实现难度：★★★☆☆☆&lt;br&gt;请求链接：&lt;a href=&quot;https://kyfw.12306.cn/otn/resources/login.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://kyfw.12306.cn/otn/resources/login.html&lt;/a&gt;&lt;br&gt;实现目标：模拟登陆中国铁路12306，攻克点触验证码&lt;br&gt;涉及知识：点触验证码的攻克、自动化测试工具 Selenium 的使用、对接在线打码平台&lt;br&gt;完整代码：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice/tree/master/12306-login&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice/tree/master/12306-login&lt;/a&gt;&lt;br&gt;其他爬虫实战代码合集（持续更新）：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice&lt;/a&gt;&lt;br&gt;爬虫实战专栏（持续更新）：&lt;a href=&quot;https://itrhx.blog.csdn.net/article/category/9351278&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://itrhx.blog.csdn.net/article/category/9351278&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="12306" scheme="https://www.itrhx.com/tags/12306/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫实战 — 模拟登陆哔哩哔哩【滑动验证码对抗】</title>
    <link href="https://www.itrhx.com/2019/10/21/A56-pyspider-bilibili-login/"/>
    <id>https://www.itrhx.com/2019/10/21/A56-pyspider-bilibili-login/</id>
    <published>2019-10-21T04:26:46.838Z</published>
    <updated>2019-10-21T13:33:57.637Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>登陆时间：2019-10-21<br>实现难度：★★★☆☆☆<br>请求链接：<a href="https://passport.bilibili.com/login" target="_blank" rel="noopener">https://passport.bilibili.com/login</a><br>实现目标：模拟登陆哔哩哔哩，攻克滑动验证码<br>涉及知识：滑动验证码的攻克、自动化测试工具 Selenium 的使用<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/bilibili-login" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/bilibili-login</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】思维导图"><a href="#【1x00】思维导图" class="headerlink" title="【1x00】思维导图"></a><font color="#ff0000">【1x00】思维导图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A56/01.png" alt="01"><br></fancybox><ul><li><p>利用自动化测试工具 Selenium 直接模拟人的行为方式来完成验证</p></li><li><p>分析页面，想办法找到滑动验证码的完整图片、带有缺口的图片和需要滑动的图片</p></li><li><p>对比原始的图片和带缺口的图片的像素，像素不同的地方就是缺口位置</p></li><li><p>计算出滑块缺口的位置，得到所需要滑动的距离</p></li><li><p>拖拽时要模仿人的行为，由于有个对准过程，所以要构造先快后慢的运动轨迹</p></li><li><p>最后利用 Selenium 进行对滑块的拖拽</p></li></ul><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A56/02.png" alt="02"><br></fancybox><hr><h1 id="【2x00】登陆模块"><a href="#【2x00】登陆模块" class="headerlink" title="【2x00】登陆模块"></a><font color="#ff0000">【2x00】登陆模块</font></h1><h2 id="【2x01】初始化函数"><a href="#【2x01】初始化函数" class="headerlink" title="【2x01】初始化函数"></a><font color="#1BC3FB">【2x01】初始化函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    <span class="comment"># path是谷歌浏览器驱动的目录，如果已经将目录添加到系统变量，则不用设置此路径</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    <span class="comment"># 你的哔哩哔哩用户名</span></span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    <span class="comment"># 你的哔哩哔哩登陆密码</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><code>global</code> 关键字定义了发起请求的url、用户名、密码等全局变量，随后是登录页面url、谷歌浏览器驱动的目录path、实例化 Chrome 浏览器、设置浏览器分辨率最大化、用户名、密码、<code>WebDriverWait()</code> 方法设置等待超时</p><hr><h2 id="【2x02】登陆函数"><a href="#【2x02】登陆函数" class="headerlink" title="【2x02】登陆函数"></a><font color="#1BC3FB">【2x02】登陆函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    <span class="comment"># 获取用户名输入框</span></span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    <span class="comment"># 获取密码输入框</span></span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    <span class="comment"># 输入用户名</span></span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    <span class="comment"># 输入密码</span></span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    <span class="comment"># 获取登录按钮</span></span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    <span class="comment"># 随机暂停几秒</span></span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 点击登陆按钮</span></span><br><span class="line">    login_btn.click()</span><br></pre></td></tr></table></figure><p>等待用户名输入框和密码输入框对应的 ID 节点加载出来</p><p>获取这两个节点，用户名输入框 <code>id=&quot;login-username&quot;</code>，密码输入框 <code>id=&quot;login-passwd&quot;</code></p><p>调用 <code>send_keys()</code> 方法输入用户名和密码</p><p>获取登录按钮 <code>class=&quot;btn btn-login&quot;</code></p><p>随机产生一个数并将其扩大三倍作为暂停时间</p><p>最后调用 <code>click()</code> 方法实现登录按钮的点击</p><hr><h1 id="【3x00】验证码处理模块"><a href="#【3x00】验证码处理模块" class="headerlink" title="【3x00】验证码处理模块"></a><font color="#ff0000">【3x00】验证码处理模块</font></h1><h2 id="【3x01】验证码元素查找函数"><a href="#【3x01】验证码元素查找函数" class="headerlink" title="【3x01】验证码元素查找函数"></a><font color="#1BC3FB">【3x01】验证码元素查找函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取带有缺口的图片</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 获取需要滑动的图片</span></span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 获取完整的图片</span></span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 隐藏需要滑动的图片</span></span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    <span class="comment"># 保存带有缺口的图片</span></span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    <span class="comment"># 显示需要滑动的图片</span></span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    <span class="comment"># 保存需要滑动的图片</span></span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    <span class="comment"># 显示完整的图片</span></span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    <span class="comment"># 保存完整的图片</span></span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br></pre></td></tr></table></figure><p>获取验证码的三张图片，分别是完整的图片、带有缺口的图片和需要滑动的图片</p><p>分析页面代码，三张图片是由 3 个 canvas 组成，3 个 canvas 元素包含 CSS  <code>display</code> 属性，<code>display:block</code> 为可见，<code>display:none</code> 为不可见，在分别获取三张图片时要将其他两张图片设置为 <code>display:none</code>，这样做才能单独提取到每张图片</p><p>定位三张图片的 class 分别为：带有缺口的图片（c_background）：<code>geetest_canvas_bg geetest_absolute</code>、需要滑动的图片（c_slice）：<code>geetest_canvas_slice geetest_absolute</code>、完整图片（c_full_bg）：<code>geetest_canvas_fullbg geetest_fade geetest_absolute</code></p><p>最后传值给 <code>save_screenshot()</code> 函数，进一步对验证码进行处理</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A56/03.png" alt="03"><br></fancybox><hr><h2 id="【3x02】元素可见性设置函数"><a href="#【3x02】元素可见性设置函数" class="headerlink" title="【3x02】元素可见性设置函数"></a><font color="#1BC3FB">【3x02】元素可见性设置函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置元素不可见</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: none;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置元素可见</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: block;"</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="【3x03】验证码截图函数"><a href="#【3x03】验证码截图函数" class="headerlink" title="【3x03】验证码截图函数"></a><font color="#1BC3FB">【3x03】验证码截图函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 首先对出现验证码后的整个页面进行截图保存</span></span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        <span class="comment"># 计算传入的obj，也就是三张图片的位置信息</span></span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        <span class="comment"># 打印输出一下每一张图的位置信息</span></span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 在整个页面截图的基础上，根据位置信息，分别剪裁出三张验证码图片并保存</span></span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br></pre></td></tr></table></figure><p><code>location</code> 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x轴向右递增，y轴向下递增</p><p><code>size</code> 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息</p><p>首先调用 <code>save_screenshot()</code> 属性对整个页面截图并保存</p><p>然后向 <code>crop()</code> 方法传入验证码的位置信息，由位置信息再对验证码进行剪裁并保存</p><hr><h1 id="【4x00】验证码滑动模块"><a href="#【4x00】验证码滑动模块" class="headerlink" title="【4x00】验证码滑动模块"></a><font color="#ff0000">【4x00】验证码滑动模块</font></h1><h2 id="【4x01】滑动主函数"><a href="#【4x01】滑动主函数" class="headerlink" title="【4x01】滑动主函数"></a><font color="#1BC3FB">【4x01】滑动主函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>向 <code>get_distance()</code> 函数传入完整的图片和缺口图片，计算滑块需要滑动的距离，再把距离信息传入 <code>get_trace()</code> 函数，构造滑块的移动轨迹，最后根据轨迹信息调用 <code>move_to_gap()</code> 函数移动滑块完成验证</p><hr><h2 id="【4x02】缺口位置寻找函数"><a href="#【4x02】缺口位置寻找函数" class="headerlink" title="【4x02】缺口位置寻找函数"></a><font color="#1BC3FB">【4x02】缺口位置寻找函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    <span class="comment"># 获取两张图片对应像素点的RGB数据</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    <span class="comment"># 设定一个阈值</span></span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="comment"># 比较两张图 RGB 的绝对值是否均小于定义的阈值</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>将完整图片和缺口图片两个对象分别赋值给变量 <code>bg_image</code> 和 <code>fullbg_image</code>，接下来对比图片获取缺口。遍历图片的每个坐标点，获取两张图片对应像素点的 RGB 数据，判断像素的各个颜色之差，<code>abs()</code> 用于取绝对值，比较两张图 RGB 的绝对值是否均小于定义的阈值 threshold，如果绝对值均在阈值之内，则代表像素点相同，继续遍历，否则代表不相同的像素点，即缺口的位置</p><hr><h2 id="【4x03】计算滑块移动距离函数"><a href="#【4x03】计算滑块移动距离函数" class="headerlink" title="【4x03】计算滑块移动距离函数"></a><font color="#1BC3FB">【4x03】计算滑块移动距离函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    <span class="comment"># 滑块的初始位置</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="comment"># 遍历两张图片的每个像素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="comment"># 调用缺口位置寻找函数</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p><code>get_distance()</code> 方法即获取缺口位置的方法，此方法的参数是两张图片，一张为完整的图片，另一张为带缺口的图片，<code>distance</code> 为滑块的初始位置，遍历两张图片的每个像素，利用 <code>is_pixel_equal()</code> 缺口位置寻找函数判断两张图片同一位置的像素是否相同，若不相同则返回该点的值</p><hr><h2 id="【4x04】构造移动轨迹函数"><a href="#【4x04】构造移动轨迹函数" class="headerlink" title="【4x04】构造移动轨迹函数"></a><font color="#1BC3FB">【4x04】构造移动轨迹函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    <span class="comment"># 设置加速距离为总距离的4/5</span></span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 设置初始位置、初始速度、时间间隔</span></span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-10</span></span><br><span class="line">        <span class="comment"># 位移</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        <span class="comment"># 当前时刻的速度</span></span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="comment"># trace 记录了每个时间间隔移动了多少位移</span></span><br><span class="line">    <span class="keyword">return</span> trace</span><br></pre></td></tr></table></figure><p><code>get_trace()</code> 方法传入的参数为移动的总距离，返回的是运动轨迹，运动轨迹用 trace 表示，它是一个列表，列表的每个元素代表每次移动多少距离，利用 Selenium 进行对滑块的拖拽时要模仿人的行为，由于有个对准过程，所以是先快后慢，匀速移动、随机速度移动都不会成功，因此要设置一个加速和减速的距离，这里设置加速距离 <code>faster_distance</code> 是总距离 <code>distance</code> 的4/5倍，滑块滑动的加速度用 a 来表示，当前速度用 v 表示，初速度用 v0 表示，位移用 move 表示，所需时间用 t 表示，它们之间满足以下关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move = v0 * t + <span class="number">0.5</span> * a * t * t </span><br><span class="line">v = v0 + a * t</span><br></pre></td></tr></table></figure><p>设置初始位置、初始速度、时间间隔分别为0, 0, 0.1，加速阶段和减速阶段的加速度分别设置为10和-10，直到运动轨迹达到总距离时，循环终止，最后得到的 trace 记录了每个时间间隔移动了多少位移，这样滑块的运动轨迹就得到了</p><hr><h2 id="【4x05】模拟拖动函数"><a href="#【4x05】模拟拖动函数" class="headerlink" title="【4x05】模拟拖动函数"></a><font color="#1BC3FB">【4x05】模拟拖动函数</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    <span class="comment"># 获取滑动按钮</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    <span class="comment"># 点击并拖动滑块</span></span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="comment"># 遍历运动轨迹获取每小段位移距离</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        <span class="comment"># 移动此位移</span></span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># 释放鼠标</span></span><br><span class="line">    ActionChains(browser).release().perform()</span><br></pre></td></tr></table></figure><p>传入的参数为运动轨迹，首先查找到滑动按钮，然后调用 ActionChains 的 <code>click_and_hold()</code> 方法按住拖动底部滑块，<code>perform()</code> 方法用于执行，遍历运动轨迹获取每小段位移距离，调用 <code>move_by_offset()</code> 方法移动此位移，最后调用 <code>release()</code> 方法松开鼠标即可</p><hr><h1 id="【5x00】完整代码"><a href="#【5x00】完整代码" class="headerlink" title="【5x00】完整代码"></a><font color="#FF0000">【5x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-21</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: bilibili.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    <span class="comment"># path是谷歌浏览器驱动的目录，如果已经将目录添加到系统变量，则不用设置此路径</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    <span class="comment"># 你的哔哩哔哩用户名</span></span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    <span class="comment"># 你的哔哩哔哩登录密码</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    <span class="comment"># 获取用户名输入框</span></span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    <span class="comment"># 获取密码输入框</span></span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    <span class="comment"># 输入用户名</span></span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    <span class="comment"># 输入密码</span></span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    <span class="comment"># 获取登录按钮</span></span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    <span class="comment"># 随机暂停几秒</span></span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 点击登陆按钮</span></span><br><span class="line">    login_btn.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码元素查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取带有缺口的图片</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 获取需要滑动的图片</span></span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 获取完整的图片</span></span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    <span class="comment"># 隐藏需要滑动的图片</span></span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    <span class="comment"># 保存带有缺口的图片</span></span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    <span class="comment"># 显示需要滑动的图片</span></span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    <span class="comment"># 保存需要滑动的图片</span></span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    <span class="comment"># 显示完整的图片</span></span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    <span class="comment"># 保存完整的图片</span></span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置元素不可见</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: none;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置元素可见</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: block;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码截图函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 首先对出现验证码后的整个页面进行截图保存</span></span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        <span class="comment"># 计算传入的obj，也就是三张图片的位置信息</span></span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        <span class="comment"># 打印输出一下每一张图的位置信息</span></span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        <span class="comment"># 在整个页面截图的基础上，根据位置信息，分别剪裁出三张验证码图片并保存</span></span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 滑动模块的主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算滑块移动距离函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    <span class="comment"># 滑块的初始位置</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="comment"># 遍历两张图片的每个像素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="comment"># 调用缺口位置寻找函数</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺口位置寻找函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    <span class="comment"># 获取两张图片对应像素点的RGB数据</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    <span class="comment"># 设定一个阈值</span></span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="comment"># 比较两张图 RGB 的绝对值是否均小于定义的阈值</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造移动轨迹函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    <span class="comment"># 设置加速距离为总距离的4/5</span></span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 设置初始位置、初始速度、时间间隔</span></span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-10</span></span><br><span class="line">        <span class="comment"># 位移</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        <span class="comment"># 当前时刻的速度</span></span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="comment"># trace 记录了每个时间间隔移动了多少位移</span></span><br><span class="line">    <span class="keyword">return</span> trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟拖动函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    <span class="comment"># 获取滑动按钮</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    <span class="comment"># 点击并拖动滑块</span></span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="comment"># 遍历运动轨迹获取每小段位移距离</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        <span class="comment"># 移动此位移</span></span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># 释放鼠标</span></span><br><span class="line">    ActionChains(browser).release().perform()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    login()</span><br><span class="line">    find_element()</span><br><span class="line">    slide()</span><br></pre></td></tr></table></figure><h1 id="【6x00】效果实现动图"><a href="#【6x00】效果实现动图" class="headerlink" title="【6x00】效果实现动图"></a><font color="#FF0000">【6x00】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A56/bilibili.gif" alt="04"><br></fancybox>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;登陆时间：2019-10-21&lt;br&gt;实现难度：★★★☆☆☆&lt;br&gt;请求链接：&lt;a href=&quot;https://passport.bilibili.com/login&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://passport.bilibili.com/login&lt;/a&gt;&lt;br&gt;实现目标：模拟登陆哔哩哔哩，攻克滑动验证码&lt;br&gt;涉及知识：滑动验证码的攻克、自动化测试工具 Selenium 的使用&lt;br&gt;完整代码：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice/tree/master/bilibili-login&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice/tree/master/bilibili-login&lt;/a&gt;&lt;br&gt;其他爬虫实战代码合集（持续更新）：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice&lt;/a&gt;&lt;br&gt;爬虫实战专栏（持续更新）：&lt;a href=&quot;https://itrhx.blog.csdn.net/article/category/9351278&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://itrhx.blog.csdn.net/article/category/9351278&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="哔哩哔哩" scheme="https://www.itrhx.com/tags/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫实战 — 虎扑论坛步行街</title>
    <link href="https://www.itrhx.com/2019/10/12/A55-pyspider-hupu/"/>
    <id>https://www.itrhx.com/2019/10/12/A55-pyspider-hupu/</id>
    <published>2019-10-12T15:28:23.380Z</published>
    <updated>2019-10-21T04:08:46.598Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-10-12<br>爬取难度：★★☆☆☆☆<br>请求链接：<a href="https://bbs.hupu.com/bxj" target="_blank" rel="noopener">https://bbs.hupu.com/bxj</a><br>爬取目标：爬取虎扑论坛步行街的帖子，包含主题，作者，发布时间等，数据保存到 MongoDB 数据库<br>涉及知识：请求库 requests、解析库 Beautiful Soup、数据库 MongoDB 的操作<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/hupu" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/hupu</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】循环爬取网页模块"><a href="#【1x00】循环爬取网页模块" class="headerlink" title="【1x00】循环爬取网页模块"></a><font color="#FF0000">【1x00】循环爬取网页模块</font></h1><p>观察虎扑论坛步行街分区，请求地址为：<a href="https://bbs.hupu.com/bxj" target="_blank" rel="noopener">https://bbs.hupu.com/bxj</a></p><p>第一页：<a href="https://bbs.hupu.com/bxj" target="_blank" rel="noopener">https://bbs.hupu.com/bxj</a></p><p>第二页：<a href="https://bbs.hupu.com/bxj-2" target="_blank" rel="noopener">https://bbs.hupu.com/bxj-2</a></p><p>第三页：<a href="https://bbs.hupu.com/bxj-3" target="_blank" rel="noopener">https://bbs.hupu.com/bxj-3</a></p><p>不难发现，每增加一页，只需要添加 <code>-页数</code> 参数即可，最后一页是第 50 页，因此可以利用 for 循环依次爬取，定义一个 <code>get_pages()</code> 函数，返回初始化 Beautiful Soup 的对象 page_soup，方便后面的解析函数调用</p><p>虽然一共有 50 页，但是当用户访问第 10 页以后的页面的时候，会要求登录虎扑，不然就没法查看，而且登录时会出现智能验证，所以程序只爬取前 10 页的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pages</span><span class="params">(page_url)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=page_url, headers=headers)</span><br><span class="line">    page_soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="keyword">return</span> page_soup</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        url = <span class="string">'https://bbs.hupu.com/bxj-'</span> + str(i)</span><br><span class="line">        soup = get_pages(url)</span><br></pre></td></tr></table></figure><hr><h1 id="【2x00】解析模块"><a href="#【2x00】解析模块" class="headerlink" title="【2x00】解析模块"></a><font color="#FF0000">【2x00】解析模块</font></h1><p>使用 Beautiful Soup 对网页各个信息进行提取，最后将这些信息放进一个列表里，然后调用列表的 <code>.append()</code> 方法，再将每条帖子的列表依次加到另一个新列表里，最终返回的是类似于如下形式的列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">'帖子1'</span>, <span class="string">'作者1'</span>], [<span class="string">'帖子2'</span>, <span class="string">'作者2'</span>], [<span class="string">'帖子3'</span>, <span class="string">'作者3'</span>]]</span><br></pre></td></tr></table></figure><p>这样做的目的是：方便 MongoDB 依次储存每一条帖子的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(page_soup)</span>:</span></span><br><span class="line">    data_list = []</span><br><span class="line">    all_list = page_soup.find(<span class="string">'ul'</span>, class_=<span class="string">'for-list'</span>)</span><br><span class="line">    post_list = all_list.find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="comment"># print(result_list)</span></span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> post_list:</span><br><span class="line">        <span class="comment"># 帖子名称</span></span><br><span class="line">        post_title = post.find(<span class="string">'a'</span>, class_=<span class="string">'truetit'</span>).text</span><br><span class="line">        <span class="comment"># print(post_title)</span></span><br><span class="line">        <span class="comment"># 帖子链接</span></span><br><span class="line">        post_url = <span class="string">'https://bbs.hupu.com'</span> + post.find(<span class="string">'a'</span>, class_=<span class="string">'truetit'</span>)[<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(post_url)</span></span><br><span class="line">        <span class="comment"># 作者</span></span><br><span class="line">        author = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(author)</span></span><br><span class="line">        <span class="comment"># 作者主页</span></span><br><span class="line">        author_url = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">0</span>][<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(author_url)</span></span><br><span class="line">        <span class="comment"># 发布日期</span></span><br><span class="line">        post_date = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">1</span>].text</span><br><span class="line">        <span class="comment"># print(post_date)</span></span><br><span class="line">        reply_view = post.find(<span class="string">'span'</span>, class_=<span class="string">'ansour'</span>).text</span><br><span class="line">        <span class="comment"># 回复数</span></span><br><span class="line">        post_reply = reply_view.split(<span class="string">'/'</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="comment"># print(post_reply)</span></span><br><span class="line">        <span class="comment"># 浏览量</span></span><br><span class="line">        post_view = reply_view.split(<span class="string">'/'</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        <span class="comment"># print(post_view)</span></span><br><span class="line">        <span class="comment"># 最后回复时间</span></span><br><span class="line">        last_data = post.select(<span class="string">'.endreply &gt; a'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(last_data)</span></span><br><span class="line">        <span class="comment"># 最后回复用户</span></span><br><span class="line">        last_user = post.select(<span class="string">'.endreply &gt; span'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(last_user)</span></span><br><span class="line"></span><br><span class="line">        data_list.append([post_title, post_url, author, author_url, post_date, post_reply, post_view, last_data, last_user])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data_list)</span></span><br><span class="line">    <span class="keyword">return</span> data_list</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】MongoDB-数据储存模块"><a href="#【3x00】MongoDB-数据储存模块" class="headerlink" title="【3x00】MongoDB 数据储存模块"></a><font color="#FF0000">【3x00】MongoDB 数据储存模块</font></h1><p>首先使用 <code>MongoClient()</code> 方法，向其传入地址参数 host 和 端口参数 port，指定数据库为 <code>hupu</code>，集合为 <code>bxj</code></p><p>将解析函数返回的列表传入到储存函数，依次循环该列表，对每一条帖子的信息进行提取并储存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mongodb</span><span class="params">(data_list)</span>:</span></span><br><span class="line">    client = MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">    db = client.hupu</span><br><span class="line">    collection = db.bxj</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">        bxj = &#123;</span><br><span class="line">            <span class="string">'帖子名称'</span>: data[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'帖子链接'</span>: data[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'作者'</span>: data[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'作者主页'</span>: data[<span class="number">3</span>],</span><br><span class="line">            <span class="string">'发布日期'</span>: str(data[<span class="number">4</span>]),</span><br><span class="line">            <span class="string">'回复数'</span>: data[<span class="number">5</span>],</span><br><span class="line">            <span class="string">'浏览量'</span>: data[<span class="number">6</span>],</span><br><span class="line">            <span class="string">'最后回复时间'</span>: str(data[<span class="number">7</span>]),</span><br><span class="line">            <span class="string">'最后回复用户'</span>: data[<span class="number">8</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        collection.insert_one(bxj)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】完整代码"><a href="#【4x00】完整代码" class="headerlink" title="【4x00】完整代码"></a><font color="#FF0000">【4x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-12</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: hupu.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pages</span><span class="params">(page_url)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=page_url, headers=headers)</span><br><span class="line">    page_soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line">    <span class="keyword">return</span> page_soup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(page_soup)</span>:</span></span><br><span class="line">    data_list = []</span><br><span class="line">    all_list = page_soup.find(<span class="string">'ul'</span>, class_=<span class="string">'for-list'</span>)</span><br><span class="line">    post_list = all_list.find_all(<span class="string">'li'</span>)</span><br><span class="line">    <span class="comment"># print(result_list)</span></span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> post_list:</span><br><span class="line">        <span class="comment"># 帖子名称</span></span><br><span class="line">        post_title = post.find(<span class="string">'a'</span>, class_=<span class="string">'truetit'</span>).text</span><br><span class="line">        <span class="comment"># print(post_title)</span></span><br><span class="line">        <span class="comment"># 帖子链接</span></span><br><span class="line">        post_url = <span class="string">'https://bbs.hupu.com'</span> + post.find(<span class="string">'a'</span>, class_=<span class="string">'truetit'</span>)[<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(post_url)</span></span><br><span class="line">        <span class="comment"># 作者</span></span><br><span class="line">        author = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(author)</span></span><br><span class="line">        <span class="comment"># 作者主页</span></span><br><span class="line">        author_url = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">0</span>][<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(author_url)</span></span><br><span class="line">        <span class="comment"># 发布日期</span></span><br><span class="line">        post_date = post.select(<span class="string">'.author &gt; a'</span>)[<span class="number">1</span>].text</span><br><span class="line">        <span class="comment"># print(post_date)</span></span><br><span class="line">        reply_view = post.find(<span class="string">'span'</span>, class_=<span class="string">'ansour'</span>).text</span><br><span class="line">        <span class="comment"># 回复数</span></span><br><span class="line">        post_reply = reply_view.split(<span class="string">'/'</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        <span class="comment"># print(post_reply)</span></span><br><span class="line">        <span class="comment"># 浏览量</span></span><br><span class="line">        post_view = reply_view.split(<span class="string">'/'</span>)[<span class="number">1</span>].strip()</span><br><span class="line">        <span class="comment"># print(post_view)</span></span><br><span class="line">        <span class="comment"># 最后回复时间</span></span><br><span class="line">        last_data = post.select(<span class="string">'.endreply &gt; a'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(last_data)</span></span><br><span class="line">        <span class="comment"># 最后回复用户</span></span><br><span class="line">        last_user = post.select(<span class="string">'.endreply &gt; span'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(last_user)</span></span><br><span class="line"></span><br><span class="line">        data_list.append([post_title, post_url, author, author_url, post_date, post_reply, post_view, last_data, last_user])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(data_list)</span></span><br><span class="line">    <span class="keyword">return</span> data_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mongodb</span><span class="params">(data_list)</span>:</span></span><br><span class="line">    client = MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">    db = client.hupu</span><br><span class="line">    collection = db.bxj</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> data_list:</span><br><span class="line">        bxj = &#123;</span><br><span class="line">            <span class="string">'帖子名称'</span>: data[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'帖子链接'</span>: data[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'作者'</span>: data[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'作者主页'</span>: data[<span class="number">3</span>],</span><br><span class="line">            <span class="string">'发布日期'</span>: str(data[<span class="number">4</span>]),</span><br><span class="line">            <span class="string">'回复数'</span>: data[<span class="number">5</span>],</span><br><span class="line">            <span class="string">'浏览量'</span>: data[<span class="number">6</span>],</span><br><span class="line">            <span class="string">'最后回复时间'</span>: str(data[<span class="number">7</span>]),</span><br><span class="line">            <span class="string">'最后回复用户'</span>: data[<span class="number">8</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        collection.insert_one(bxj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        url = <span class="string">'https://bbs.hupu.com/bxj-'</span> + str(i)</span><br><span class="line">        soup = get_pages(url)</span><br><span class="line">        result_list = parse_pages(soup)</span><br><span class="line">        mongodb(result_list)</span><br><span class="line">        print(<span class="string">'第'</span>, i, <span class="string">'页数据爬取完毕！'</span>)</span><br><span class="line">        time.sleep(random.randint(<span class="number">3</span>, <span class="number">10</span>))</span><br><span class="line">    print(<span class="string">'前10页所有数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【5x00】数据截图"><a href="#【5x00】数据截图" class="headerlink" title="【5x00】数据截图"></a><font color="#FF0000">【5x00】数据截图</font></h1><p>一共爬取到 1180 条数据：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A55/01.png" alt="01"><br></fancybox><h1 id="【6x00】程序不足的地方"><a href="#【6x00】程序不足的地方" class="headerlink" title="【6x00】程序不足的地方"></a><font color="#FF0000">【6x00】程序不足的地方</font></h1><p>程序只能爬取前 10 页的数据，因为虎扑论坛要求从第 11 页开始，必须登录账号才能查看，并且登录时会有智能验证，可以使用自动化测试工具 Selenium 模拟登录账号后再进行爬取。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;爬取时间：2019-10-12&lt;br&gt;爬取难度：★★☆☆☆☆&lt;br&gt;请求链接：&lt;a href=&quot;https://bbs.hupu.com/bxj&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://bbs.hupu.com/bxj&lt;/a&gt;&lt;br&gt;爬取目标：爬取虎扑论坛步行街的帖子，包含主题，作者，发布时间等，数据保存到 MongoDB 数据库&lt;br&gt;涉及知识：请求库 requests、解析库 Beautiful Soup、数据库 MongoDB 的操作&lt;br&gt;完整代码：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice/tree/master/hupu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice/tree/master/hupu&lt;/a&gt;&lt;br&gt;其他爬虫实战代码合集（持续更新）：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice&lt;/a&gt;&lt;br&gt;爬虫实战专栏（持续更新）：&lt;a href=&quot;https://itrhx.blog.csdn.net/article/category/9351278&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://itrhx.blog.csdn.net/article/category/9351278&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="虎扑论坛" scheme="https://www.itrhx.com/tags/%E8%99%8E%E6%89%91%E8%AE%BA%E5%9D%9B/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫实战 — 安居客武汉二手房</title>
    <link href="https://www.itrhx.com/2019/10/09/A54-pyspider-anjuke/"/>
    <id>https://www.itrhx.com/2019/10/09/A54-pyspider-anjuke/</id>
    <published>2019-10-09T15:02:42.994Z</published>
    <updated>2019-10-21T04:05:48.158Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-10-09<br>爬取难度：★★☆☆☆☆<br>请求链接：<a href="https://wuhan.anjuke.com/sale/" target="_blank" rel="noopener">https://wuhan.anjuke.com/sale/</a><br>爬取目标：爬取武汉二手房每一条售房信息，包含地理位置、价格、面积等，保存为 CSV 文件<br>涉及知识：请求库 requests、解析库 Beautiful Soup、CSV 文件储存、列表操作、分页判断<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/anjuke" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/anjuke</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】页面整体分析"><a href="#【1x00】页面整体分析" class="headerlink" title="【1x00】页面整体分析"></a><font color="#FF0000">【1x00】页面整体分析</font></h1><p>分析 <a href="https://wuhan.anjuke.com/sale/" target="_blank" rel="noopener">安居客武汉二手房页面</a>，这次爬取实战准备使用 BeautifulSoup 解析库，熟练 BeautifulSoup 解析库的用法，注意到该页面与其他页面不同的是，不能一次性看到到底有多少页，以前知道一共有多少页，直接一个循环爬取就行了，虽然可以通过改变 url 来尝试找到最后一页，但是这样就显得不程序员了😂，因此可以通过 BeautifulSoup 解析 <code>下一页按钮</code>，提取到下一页的 url，直到没有 <code>下一页按钮</code> 这个元素为止，从而实现所有页面的爬取，剩下的信息提取和储存就比较简单了</p><hr><h1 id="【2x00】解析模块"><a href="#【2x00】解析模块" class="headerlink" title="【2x00】解析模块"></a><font color="#FF0000">【2x00】解析模块</font></h1><p>分析页面，可以发现每条二手房信息都是包含在 <code>&lt;li&gt;</code> 标签内的，因此可以使用 BeautifulSoup 解析页面得到所有的 <code>&lt;li&gt;</code> 标签，然后再循环访问每个 <code>&lt;li&gt;</code> 标签，依次解析得到每条二手房的各种信息</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A54/01.png" alt="01"><br></fancybox><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url, num)</span>:</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line">    result_list = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'list-item'</span>)</span><br><span class="line">    <span class="comment"># print(len(result_list))</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> result_list:</span><br><span class="line">        <span class="comment"># 标题</span></span><br><span class="line">        title = result.find(<span class="string">'a'</span>, class_=<span class="string">'houseListTitle'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line">        <span class="comment"># 户型</span></span><br><span class="line">        layout = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(layout)</span></span><br><span class="line">        <span class="comment"># 面积</span></span><br><span class="line">        cover = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">1</span>].text</span><br><span class="line">        <span class="comment"># print(cover)</span></span><br><span class="line">        <span class="comment"># 楼层</span></span><br><span class="line">        floor = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">2</span>].text</span><br><span class="line">        <span class="comment"># print(floor)</span></span><br><span class="line">        <span class="comment"># 建造年份</span></span><br><span class="line">        year = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">3</span>].text</span><br><span class="line">        <span class="comment"># print(year)</span></span><br><span class="line">        <span class="comment"># 单价</span></span><br><span class="line">        unit_price = result.find(<span class="string">'span'</span>, class_=<span class="string">'unit-price'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(unit_price)</span></span><br><span class="line">        <span class="comment"># 总价</span></span><br><span class="line">        total_price = result.find(<span class="string">'span'</span>, class_=<span class="string">'price-det'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(total_price)</span></span><br><span class="line">        <span class="comment"># 关键字</span></span><br><span class="line">        keyword = result.find(<span class="string">'div'</span>, class_=<span class="string">'tags-bottom'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(keyword)</span></span><br><span class="line">        <span class="comment"># 地址</span></span><br><span class="line">        address = result.find(<span class="string">'span'</span>, class_=<span class="string">'comm-address'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(address)</span></span><br><span class="line">        <span class="comment"># 详情页url</span></span><br><span class="line">        details_url = result.find(<span class="string">'a'</span>, class_=<span class="string">'houseListTitle'</span>)[<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(details_url)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start_num = <span class="number">0</span></span><br><span class="line">    start_url = <span class="string">'https://wuhan.anjuke.com/sale/'</span></span><br><span class="line">    parse_pages(start_url, start_num)</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】循环爬取模块"><a href="#【3x00】循环爬取模块" class="headerlink" title="【3x00】循环爬取模块"></a><font color="#FF0000">【3x00】循环爬取模块</font></h1><p>前面已经分析过，该网页是无法一下就能看到一共有多少页的，尝试找到最后一页，发现一共有50页，那么此时就可以搞个循环，一直到第50页就行了，但是如果有一天页面数增加了呢，那么代码的可维护性就不好了，我们可以观察 <code>下一页按钮</code> ，当存在下一页的时候，是 <code>&lt;a&gt;</code> 标签，并且带有下一页的 URL，不存在下一页的时候是 <code>&lt;i&gt;</code> 标签，因此可以写个 <code>if</code> 语句，判断是否存在此 <code>&lt;a&gt;</code> 标签，若存在，表示有下一页，然后提取其 <code>href</code> 属性并传给解析模块，实现后面所有页面的信息提取，此外，由于安居客有反爬系统，我们还可以利用 Python中的 <code>random.randint()</code> 方法，在两个数值之间随机取一个数，传入 <code>time.sleep()</code> 方法，实现随机暂停爬取</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A54/02.png" alt="02"><br></fancybox><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断是否还有下一页</span></span><br><span class="line">next_url = soup.find_all(<span class="string">'a'</span>, class_=<span class="string">'aNxt'</span>)</span><br><span class="line"><span class="keyword">if</span> len(next_url) != <span class="number">0</span>:</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">'第'</span> + str(num) + <span class="string">'页数据爬取完毕！'</span>)</span><br><span class="line">    <span class="comment"># 3-60秒之间随机暂停</span></span><br><span class="line">    time.sleep(random.randint(<span class="number">3</span>, <span class="number">60</span>))</span><br><span class="line">    parse_pages(next_url[<span class="number">0</span>].attrs[<span class="string">'href'</span>], num)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'所有数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】数据储存模块"><a href="#【4x00】数据储存模块" class="headerlink" title="【4x00】数据储存模块"></a><font color="#FF0000">【4x00】数据储存模块</font></h1><p>数据储存比较简单，将每个二手房信息组成一个列表，依次写入到 anjuke.csv 文件中即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">results = [title, layout, cover, floor, year, unit_price, total_price, keyword, address, details_url]</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'anjuke.csv'</span>, <span class="string">'a'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    w = csv.writer(f)</span><br><span class="line">    w.writerow(results)</span><br></pre></td></tr></table></figure><hr><h1 id="【5x00】完整代码"><a href="#【5x00】完整代码" class="headerlink" title="【5x00】完整代码"></a><font color="#FF0000">【5x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-10-09</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: anjuke.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url, num)</span>:</span></span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">'lxml'</span>)</span><br><span class="line">    result_list = soup.find_all(<span class="string">'li'</span>, class_=<span class="string">'list-item'</span>)</span><br><span class="line">    <span class="comment"># print(len(result_list))</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> result_list:</span><br><span class="line">        <span class="comment"># 标题</span></span><br><span class="line">        title = result.find(<span class="string">'a'</span>, class_=<span class="string">'houseListTitle'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(title)</span></span><br><span class="line">        <span class="comment"># 户型</span></span><br><span class="line">        layout = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">0</span>].text</span><br><span class="line">        <span class="comment"># print(layout)</span></span><br><span class="line">        <span class="comment"># 面积</span></span><br><span class="line">        cover = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">1</span>].text</span><br><span class="line">        <span class="comment"># print(cover)</span></span><br><span class="line">        <span class="comment"># 楼层</span></span><br><span class="line">        floor = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">2</span>].text</span><br><span class="line">        <span class="comment"># print(floor)</span></span><br><span class="line">        <span class="comment"># 建造年份</span></span><br><span class="line">        year = result.select(<span class="string">'.details-item &gt; span'</span>)[<span class="number">3</span>].text</span><br><span class="line">        <span class="comment"># print(year)</span></span><br><span class="line">        <span class="comment"># 单价</span></span><br><span class="line">        unit_price = result.find(<span class="string">'span'</span>, class_=<span class="string">'unit-price'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(unit_price)</span></span><br><span class="line">        <span class="comment"># 总价</span></span><br><span class="line">        total_price = result.find(<span class="string">'span'</span>, class_=<span class="string">'price-det'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(total_price)</span></span><br><span class="line">        <span class="comment"># 关键字</span></span><br><span class="line">        keyword = result.find(<span class="string">'div'</span>, class_=<span class="string">'tags-bottom'</span>).text.strip()</span><br><span class="line">        <span class="comment"># print(keyword)</span></span><br><span class="line">        <span class="comment"># 地址</span></span><br><span class="line">        address = result.find(<span class="string">'span'</span>, class_=<span class="string">'comm-address'</span>).text.replace(<span class="string">' '</span>, <span class="string">''</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">        <span class="comment"># print(address)</span></span><br><span class="line">        <span class="comment"># 详情页url</span></span><br><span class="line">        details_url = result.find(<span class="string">'a'</span>, class_=<span class="string">'houseListTitle'</span>)[<span class="string">'href'</span>]</span><br><span class="line">        <span class="comment"># print(details_url)</span></span><br><span class="line">        results = [title, layout, cover, floor, year, unit_price, total_price, keyword, address, details_url]</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'anjuke.csv'</span>, <span class="string">'a'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            w = csv.writer(f)</span><br><span class="line">            w.writerow(results)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断是否还有下一页</span></span><br><span class="line">    next_url = soup.find_all(<span class="string">'a'</span>, class_=<span class="string">'aNxt'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(next_url) != <span class="number">0</span>:</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        print(<span class="string">'第'</span> + str(num) + <span class="string">'页数据爬取完毕！'</span>)</span><br><span class="line">        <span class="comment"># 3-60秒之间随机暂停</span></span><br><span class="line">        time.sleep(random.randint(<span class="number">3</span>, <span class="number">60</span>))</span><br><span class="line">        parse_pages(next_url[<span class="number">0</span>].attrs[<span class="string">'href'</span>], num)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'所有数据爬取完毕！'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'anjuke.csv'</span>, <span class="string">'a'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow([<span class="string">'标题'</span>, <span class="string">'户型'</span>, <span class="string">'面积'</span>, <span class="string">'楼层'</span>, <span class="string">'建造年份'</span>, <span class="string">'单价'</span>, <span class="string">'总价'</span>, <span class="string">'关键字'</span>, <span class="string">'地址'</span>, <span class="string">'详情页地址'</span>])</span><br><span class="line">    start_num = <span class="number">0</span></span><br><span class="line">    start_url = <span class="string">'https://wuhan.anjuke.com/sale/'</span></span><br><span class="line">    parse_pages(start_url, start_num)</span><br></pre></td></tr></table></figure><hr><h1 id="【6x00】数据截图"><a href="#【6x00】数据截图" class="headerlink" title="【6x00】数据截图"></a><font color="#FF0000">【6x00】数据截图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A54/03.png" alt="03"><br></fancybox><hr><h1 id="【7x00】程序不足的地方"><a href="#【7x00】程序不足的地方" class="headerlink" title="【7x00】程序不足的地方"></a><font color="#FF0000">【7x00】程序不足的地方</font></h1><ul><li><p>虽然使用了随机暂停爬取的方法，但是在爬取了大约 20 页的数据后依然会出现验证页面，导致程序终止</p></li><li><p>原来设想的是可以由用户手动输入城市的拼音来查询不同城市的信息，方法是把用户输入的城市拼音和其他参数一起构造成一个 URL，然后对该 URL 发送请求，判断请求返回的代码，如果是 200 就代表可以访问，也就是用户输入的城市是正确的，然而发现即便是输入错误，该 URL 依然可以访问，只不过会跳转到一个正确的页面，没有搞清楚是什么原理，也就无法实现由用户输入城市来查询这个功能</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;爬取时间：2019-10-09&lt;br&gt;爬取难度：★★☆☆☆☆&lt;br&gt;请求链接：&lt;a href=&quot;https://wuhan.anjuke.com/sale/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://wuhan.anjuke.com/sale/&lt;/a&gt;&lt;br&gt;爬取目标：爬取武汉二手房每一条售房信息，包含地理位置、价格、面积等，保存为 CSV 文件&lt;br&gt;涉及知识：请求库 requests、解析库 Beautiful Soup、CSV 文件储存、列表操作、分页判断&lt;br&gt;完整代码：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice/tree/master/anjuke&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice/tree/master/anjuke&lt;/a&gt;&lt;br&gt;其他爬虫实战代码合集（持续更新）：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice&lt;/a&gt;&lt;br&gt;爬虫实战专栏（持续更新）：&lt;a href=&quot;https://itrhx.blog.csdn.net/article/category/9351278&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://itrhx.blog.csdn.net/article/category/9351278&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="安居客" scheme="https://www.itrhx.com/tags/%E5%AE%89%E5%B1%85%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>使用 Hexo-Git-Backup 插件备份你的 Hexo 博客</title>
    <link href="https://www.itrhx.com/2019/09/29/A53-hexo-backup/"/>
    <id>https://www.itrhx.com/2019/09/29/A53-hexo-backup/</id>
    <published>2019-09-29T10:02:15.603Z</published>
    <updated>2019-12-29T07:19:49.434Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>欢迎关注我的 CSDN 专栏：<a href="https://blog.csdn.net/qq_36759224/article/category/9285510" target="_blank" rel="noopener">《个人博客搭建：Hexo+Github Pages》</a>，从搭建到美化一条龙，帮你解决 Hexo 常见问题！</p><hr><p>由于 Hexo 博客是静态托管的，所有的原始数据都保存在本地，如果哪一天电脑坏了，或者是误删了本地数据，那就是叫天天不应叫地地不灵了，此时定时备份就显得比较重要了，常见的备份方法有：打包数据保存到U盘、云盘或者其他地方，但是早就有大神开发了备份插件：<a href="https://github.com/coneycode/hexo-git-backup" target="_blank" rel="noopener">hexo-git-backup</a> ，只需要一个命令就可以将所有数据包括主题文件备份到 github 了</p><p>首先进入你博客目录，输入命令 <code>hexo version</code> 查看 Hexo 版本，如图所示，我的版本是 3.7.1：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A53/01.png" alt="01"><br></fancybox><p>安装备份插件，如果你的 Hexo 版本是 2.x.x，则使用以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-git-backup@0.0.91 --save</span><br></pre></td></tr></table></figure><p>如果你的 Hexo 版本是 3.x.x，则使用以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-git-backup --save</span><br></pre></td></tr></table></figure><p>到 Hexo 博客根目录的 <code>_config.yml</code> 配置文件里添加以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">backup:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  theme: material-x-1.2.1</span><br><span class="line">  message: Back up my www.itrhx.com blog</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:TRHX/TRHX.github.io.git,backup</span><br><span class="line">    coding: git@git.dev.tencent.com:TRHX/TRHX.git,backup</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>theme：你要备份的主题名称</li><li>message：自定义提交信息</li><li>repository：仓库名，注意仓库地址后面要添加一个分支名，比如我就创建了一个 backup 分支</li></ul><p>最后使用以下命令备份你的博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo backup</span><br></pre></td></tr></table></figure><p>或者使用以下简写命令也可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo b</span><br></pre></td></tr></table></figure><p>备份成功后可以在你的仓库分支下看到备份的原始文件：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A53/02.png" alt="02"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A53/03.png" alt="03"><br></fancybox>]]></content>
    
    <summary type="html">
    
      一键备份博客数据，再也不怕数据丢失了！
    
    </summary>
    
      <category term="Hexo" scheme="https://www.itrhx.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.itrhx.com/tags/Hexo/"/>
    
      <category term="备份" scheme="https://www.itrhx.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫实战 — 豆瓣电影TOP250</title>
    <link href="https://www.itrhx.com/2019/09/28/A52-pyspider-doubantop250/"/>
    <id>https://www.itrhx.com/2019/09/28/A52-pyspider-doubantop250/</id>
    <published>2019-09-28T08:35:19.823Z</published>
    <updated>2019-10-21T04:01:29.248Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-09-27<br>爬取难度：★★☆☆☆☆<br>请求链接：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a> 以及每部电影详情页<br>爬取目标：爬取榜单上每一部电影详情页的数据，保存为 CSV 文件；下载所有电影海报到本地<br>涉及知识：请求库 requests、解析库 lxml、Xpath 语法、正则表达式、CSV 和二进制数据储存、列表操作<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/douban-top250" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/douban-top250</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】循环爬取网页模块"><a href="#【1x00】循环爬取网页模块" class="headerlink" title="【1x00】循环爬取网页模块"></a><font color="#FF0000">【1x00】循环爬取网页模块</font></h1><p>观察豆瓣电影 Top 250，请求地址为：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a></p><p>每页展示25条电影信息，照例翻页观察 url 的变化：</p><p>第一页：<a href="https://movie.douban.com/top250" target="_blank" rel="noopener">https://movie.douban.com/top250</a></p><p>第二页：<a href="https://movie.douban.com/top250?start=25&amp;filter=" target="_blank" rel="noopener">https://movie.douban.com/top250?start=25&amp;filter=</a></p><p>第三页：<a href="https://movie.douban.com/top250?start=50&amp;filter=" target="_blank" rel="noopener">https://movie.douban.com/top250?start=50&amp;filter=</a></p><p>一共有10页，每次改变的是 start 的值，利用一个 for 循环，从 0 到 250 每隔 25 取一个值拼接到 url，实现循环爬取每一页，由于我们的目标是进入每一部电影的详情页，然后爬取详情页的内容，所以我们可以使用 Xpath 提取每一页每部电影详情页的 URL，将其赋值给 <code>m_urls</code>，并返回 <code>m_urls</code>，<code>m_urls</code> 是一个列表，列表元素就是电影详情页的 URL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_pages</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=%s&amp;filter='</span> % number</span><br><span class="line">    index_response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(index_response.text)</span><br><span class="line">    m_urls = tree.xpath(<span class="string">"//li/div/div/a/@href"</span>)</span><br><span class="line">    <span class="keyword">return</span> m_urls</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        movie_urls = index_pages(i)</span><br></pre></td></tr></table></figure><hr><h1 id="【2x00】解析模块"><a href="#【2x00】解析模块" class="headerlink" title="【2x00】解析模块"></a><font color="#FF0000">【2x00】解析模块</font></h1><p>定义一个解析函数 <code>parse_pages()</code>，利用 for 循环，依次提取 <code>index_pages()</code> 函数返回的列表中的元素，也就是每部电影详情页的 URL，将其传给解析函数进行解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_pages</span><span class="params">(number)</span>:</span></span><br><span class="line">expressions</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url)</span>:</span></span><br><span class="line">expressions</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        movie_urls = index_pages(i)</span><br><span class="line">        <span class="keyword">for</span> movie_url <span class="keyword">in</span> movie_urls:</span><br><span class="line">            results = parse_pages(movie_url)</span><br></pre></td></tr></table></figure><p>详细看一下解析函数 <code>parse_pages()</code>，首先要对接收到的详情页 URL 发送请求，获取响应内容，然后再使用 Xpath 提取相关信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url)</span>:</span></span><br><span class="line">    movie_pages = requests.get(url=url, headers=headers)</span><br><span class="line">    parse_movie = etree.HTML(movie_pages.text)</span><br></pre></td></tr></table></figure><hr><h2 id="【2x01】Xpath-解析排名、电影名、评分信息"><a href="#【2x01】Xpath-解析排名、电影名、评分信息" class="headerlink" title="【2x01】Xpath 解析排名、电影名、评分信息"></a><font color="#1BC3FB">【2x01】Xpath 解析排名、电影名、评分信息</font></h2><p>其中排名、电影名和评分信息是最容易匹配到的，直接使用 Xpath 语法就可以轻松解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 排名</span></span><br><span class="line">ranking = parse_movie.xpath(<span class="string">"//span[@class='top250-no']/text()"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 电影名</span></span><br><span class="line">name = parse_movie.xpath(<span class="string">"//h1/span[1]/text()"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评分</span></span><br><span class="line">score = parse_movie.xpath(<span class="string">"//div[@class='rating_self clearfix']/strong/text()"</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="【2x02】Xpath-解析参评人数"><a href="#【2x02】Xpath-解析参评人数" class="headerlink" title="【2x02】Xpath 解析参评人数"></a><font color="#1BC3FB">【2x02】Xpath 解析参评人数</font></h2><p>接下来准备爬取有多少人参与了评价，分析一下页面：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/01.png" alt="01"><br></fancybox><p>如果只爬取这个 <code>&lt;span&gt;</code> 标签下的数字的话，没有任何提示信息，别人看了不知道是啥东西，所以把 <code>人评价</code> 这三个字也爬下来的话就比较好了，但是可以看到数字和文字不在同一个元素标签下，而且文字部分还有空格，要爬取的话就要把 <code>class=&quot;rating_people&quot;</code> 的 <code>a</code> 标签下所有的 <code>text</code> 提取出来，然后再去掉空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参评人数</span></span><br><span class="line"><span class="comment"># 匹配a节点</span></span><br><span class="line">value = parse_movie.xpath(<span class="string">"//a[@class='rating_people']"</span>)</span><br><span class="line"><span class="comment"># 提取a节点下所有文本</span></span><br><span class="line">string = [value[<span class="number">0</span>].xpath(<span class="string">'string(.)'</span>)]</span><br><span class="line"><span class="comment"># 去除多余空格</span></span><br><span class="line">number = [a.strip() <span class="keyword">for</span> a <span class="keyword">in</span> string]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 number = ['1617307人评价']</span></span><br></pre></td></tr></table></figure><p>这样做太麻烦了，我们可以直接提取数字，得到一个列表，然后使用另一个带有提示信息的列表，将两个列表的元素合并，组成一个新列表，这个新列表的元素就是提示信息+人数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参评人数</span></span><br><span class="line">value = parse_movie.xpath(<span class="string">"//span[@property='v:votes']/text()"</span>)</span><br><span class="line"><span class="comment"># 合并元素</span></span><br><span class="line">number = [<span class="string">" "</span>.join([<span class="string">'参评人数：'</span>] + value)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 number = ['参评人数：1617307']</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="【2x03】正则表达式解析制片国家、语言"><a href="#【2x03】正则表达式解析制片国家、语言" class="headerlink" title="【2x03】正则表达式解析制片国家、语言"></a><font color="#1BC3FB">【2x03】正则表达式解析制片国家、语言</font></h2><p>接下来尝试爬取制片国家/地区、语言等信息：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/02.png" alt="02"><br></fancybox><p>分析页面可以观察到，制片国家/地区和语言结构比较特殊，没有特别的 class 或者 id 属性，所包含的层次关系也太复杂，所以这里为了简便，直接采用正则表达式来匹配信息，就没有那么复杂了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 制片国家/地区</span></span><br><span class="line">value = re.findall(<span class="string">'&lt;span class="pl"&gt;制片国家/地区:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">country = [<span class="string">" "</span>.join([<span class="string">'制片国家:'</span>] + value)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语言</span></span><br><span class="line">value = re.findall(<span class="string">'&lt;span class="pl"&gt;语言:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">language = [<span class="string">" "</span>.join([<span class="string">'语言:'</span>] + value)]</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】返回解析数据"><a href="#【3x00】返回解析数据" class="headerlink" title="【3x00】返回解析数据"></a><font color="#FF0000">【3x00】返回解析数据</font></h1><p>其他剩下的信息皆可利用以上方法进行提取，所有信息提取完毕，最后使用 <code>zip()</code> 函数，将所有提取的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> zip(ranking, name, score, number, types, country, language, date, time, other_name, director, screenwriter, performer, m_url, imdb_url)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】数据储存模块"><a href="#【4x00】数据储存模块" class="headerlink" title="【4x00】数据储存模块"></a><font color="#FF0000">【4x00】数据储存模块</font></h1><p>定义一个数据保存函数 <code>save_results()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'douban.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">"utf-8-sig"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(data)</span><br></pre></td></tr></table></figure><p>注意：编码方式要设置为 <code>utf-8-sig</code>，如果设置为 <code>utf-8</code>，则文件会乱码，不设置编码，则可能会报一下类似错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnicodeEncodeError: <span class="string">'gbk'</span> codec can<span class="string">'t encode character '</span>\ub3c4<span class="string">' in position 9: illegal multibyte sequence</span></span><br></pre></td></tr></table></figure><p>可以看到错误出现在 <code>\ub3c4</code> 上，将该 Unicode 编码转换为中文为 <code>도</code>，发现正是排名第 19 的电影：熔炉 도가니，因为标题有韩文，所以在储存为 CSV 文件时会报编码错误，而将编码设置为 <code>utf-8-sig</code> 就不会报错，具体原因参见：<a href="https://www.jianshu.com/p/d9b25fb0a098" target="_blank" rel="noopener">《Python 中文日文汉字乱码处理utf-8-sig》</a></p><p>接下来是保存电影的海报到本地：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存电影海报</span></span><br><span class="line">poster = parse_movie.xpath(<span class="string">"//div[@id='mainpic']/a/img/@src"</span>)</span><br><span class="line">response = requests.get(poster[<span class="number">0</span>])</span><br><span class="line">name2 = re.sub(<span class="string">r'[A-Za-z\:\s]'</span>, <span class="string">''</span>, name[<span class="number">0</span>])</span><br><span class="line">poster_name = str(ranking[<span class="number">0</span>]) + <span class="string">' - '</span> + name2 + <span class="string">'.jpg'</span></span><br><span class="line">dir_name = <span class="string">'douban_poster'</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">    os.mkdir(dir_name)</span><br><span class="line">poster_path = dir_name + <span class="string">'/'</span> + poster_name</span><br><span class="line"><span class="keyword">with</span> open(poster_path, <span class="string">"wb"</span>)<span class="keyword">as</span> f:</span><br><span class="line">    f.write(response.content)</span><br></pre></td></tr></table></figure><p>解析电影详情页，使用 Xpath 提取海报的 URL，向该 URL 发送请求</p><p>图片以 <code>排名+电影名.jpg</code> 的方式命名，但是由于提取的电影名部分含有特殊字符，比如排名第 10 的电影：忠犬八公的故事 Hachi: A Dog’s Tale，其中有个冒号，而 Windows 文件命名是不能包含这些字符的，所以我们直接去除电影名包含的英文字符、空白字符、特殊字符，只留下中文，代码实现： <code>name2 = re.sub(r&#39;[A-Za-z\:\s]&#39;, &#39;&#39;, name[0])</code></p><p>定义一个文件夹名称 <code>douban_poster</code>，利用 <code>os</code> 模块判断当前是否存在该文件夹，若不存在就创建一个</p><p>最后以二进制形式保存海报到当前目录的 douban_poster 文件夹下</p><hr><h1 id="【5x00】完整代码"><a href="#【5x00】完整代码" class="headerlink" title="【5x00】完整代码"></a><font color="#FF0000">【5x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-09-27</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: douban.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_pages</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/top250?start=%s&amp;filter='</span> % number</span><br><span class="line">    index_response = requests.get(url=url, headers=headers)</span><br><span class="line">    tree = etree.HTML(index_response.text)</span><br><span class="line">    m_urls = tree.xpath(<span class="string">"//li/div/div/a/@href"</span>)</span><br><span class="line">    <span class="keyword">return</span> m_urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_pages</span><span class="params">(url)</span>:</span></span><br><span class="line">    movie_pages = requests.get(url=url, headers=headers)</span><br><span class="line">    parse_movie = etree.HTML(movie_pages.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 排名</span></span><br><span class="line">    ranking = parse_movie.xpath(<span class="string">"//span[@class='top250-no']/text()"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 电影名</span></span><br><span class="line">    name = parse_movie.xpath(<span class="string">"//h1/span[1]/text()"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 评分</span></span><br><span class="line">    score = parse_movie.xpath(<span class="string">"//div[@class='rating_self clearfix']/strong/text()"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参评人数</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:votes']/text()"</span>)</span><br><span class="line">    number = [<span class="string">" "</span>.join([<span class="string">'参评人数：'</span>] + value)]</span><br><span class="line">    <span class="comment"># value = parse_movie.xpath("//a[@class='rating_people']")</span></span><br><span class="line">    <span class="comment"># string = [value[0].xpath('string(.)')]</span></span><br><span class="line">    <span class="comment"># number = [a.strip() for a in string]</span></span><br><span class="line">    <span class="comment"># print(number)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类型</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:genre']/text()"</span>)</span><br><span class="line">    types = [<span class="string">" "</span>.join([<span class="string">'类型：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 制片国家/地区</span></span><br><span class="line">    value = re.findall(<span class="string">'&lt;span class="pl"&gt;制片国家/地区:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">    country = [<span class="string">" "</span>.join([<span class="string">'制片国家:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 语言</span></span><br><span class="line">    value = re.findall(<span class="string">'&lt;span class="pl"&gt;语言:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">    language = [<span class="string">" "</span>.join([<span class="string">'语言:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 上映时期</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:initialReleaseDate']/text()"</span>)</span><br><span class="line">    date = [<span class="string">" "</span>.join([<span class="string">'上映日期：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 片长</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//span[@property='v:runtime']/text()"</span>)</span><br><span class="line">    time = [<span class="string">" "</span>.join([<span class="string">'片长：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 又名</span></span><br><span class="line">    value = re.findall(<span class="string">'&lt;span class="pl"&gt;又名:&lt;/span&gt;(.*?)&lt;br/&gt;'</span>, movie_pages.text)</span><br><span class="line">    other_name = [<span class="string">" "</span>.join([<span class="string">'又名:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导演</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/span[1]/span[@class='attrs']/a/text()"</span>)</span><br><span class="line">    director = [<span class="string">" "</span>.join([<span class="string">'导演:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编剧</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/span[2]/span[@class='attrs']/a/text()"</span>)</span><br><span class="line">    screenwriter = [<span class="string">" "</span>.join([<span class="string">'编剧:'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 主演</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/span[3]"</span>)</span><br><span class="line">    performer = [value[<span class="number">0</span>].xpath(<span class="string">'string(.)'</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># URL</span></span><br><span class="line">    m_url = [<span class="string">'豆瓣链接：'</span> + movie_url]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># IMDb链接</span></span><br><span class="line">    value = parse_movie.xpath(<span class="string">"//div[@id='info']/a/@href"</span>)</span><br><span class="line">    imdb_url = [<span class="string">" "</span>.join([<span class="string">'IMDb链接：'</span>] + value)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存电影海报</span></span><br><span class="line">    poster = parse_movie.xpath(<span class="string">"//div[@id='mainpic']/a/img/@src"</span>)</span><br><span class="line">    response = requests.get(poster[<span class="number">0</span>])</span><br><span class="line">    name2 = re.sub(<span class="string">r'[A-Za-z\:\s]'</span>, <span class="string">''</span>, name[<span class="number">0</span>])</span><br><span class="line">    poster_name = str(ranking[<span class="number">0</span>]) + <span class="string">' - '</span> + name2 + <span class="string">'.jpg'</span></span><br><span class="line">    dir_name = <span class="string">'douban_poster'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir_name):</span><br><span class="line">        os.mkdir(dir_name)</span><br><span class="line">    poster_path = dir_name + <span class="string">'/'</span> + poster_name</span><br><span class="line">    <span class="keyword">with</span> open(poster_path, <span class="string">"wb"</span>)<span class="keyword">as</span> f:</span><br><span class="line">        f.write(response.content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> zip(ranking, name, score, number, types, country, language, date, time, other_name, director, screenwriter, performer, m_url, imdb_url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'douban.csv'</span>, <span class="string">'a'</span>, encoding=<span class="string">"utf-8-sig"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">250</span>, <span class="number">25</span>):</span><br><span class="line">        movie_urls = index_pages(i)</span><br><span class="line">        <span class="keyword">for</span> movie_url <span class="keyword">in</span> movie_urls:</span><br><span class="line">            results = parse_pages(movie_url)</span><br><span class="line">            <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                save_results(result)</span><br><span class="line">                print(<span class="string">'第'</span> + str(num) + <span class="string">'条电影信息保存完毕！'</span>)</span><br><span class="line">                time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【6x00】数据截图"><a href="#【6x00】数据截图" class="headerlink" title="【6x00】数据截图"></a><font color="#FF0000">【6x00】数据截图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/03.png" alt="03"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A52/04.png" alt="04"><br></fancybox><hr><h1 id="【7x00】程序不足的地方"><a href="#【7x00】程序不足的地方" class="headerlink" title="【7x00】程序不足的地方"></a><font color="#FF0000">【7x00】程序不足的地方</font></h1><p>程序不足的地方：豆瓣电影有反爬机制，当程序爬取到大约 150 条数据的时候，IP 就会被封掉，第二天 IP 才会解封，可以考虑综合使用多个代理、多个 User-Agent、随机时间暂停等方法进行爬取</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;爬取时间：2019-09-27&lt;br&gt;爬取难度：★★☆☆☆☆&lt;br&gt;请求链接：&lt;a href=&quot;https://movie.douban.com/top250&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://movie.douban.com/top250&lt;/a&gt; 以及每部电影详情页&lt;br&gt;爬取目标：爬取榜单上每一部电影详情页的数据，保存为 CSV 文件；下载所有电影海报到本地&lt;br&gt;涉及知识：请求库 requests、解析库 lxml、Xpath 语法、正则表达式、CSV 和二进制数据储存、列表操作&lt;br&gt;完整代码：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice/tree/master/douban-top250&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice/tree/master/douban-top250&lt;/a&gt;&lt;br&gt;其他爬虫实战代码合集（持续更新）：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice&lt;/a&gt;&lt;br&gt;爬虫实战专栏（持续更新）：&lt;a href=&quot;https://itrhx.blog.csdn.net/article/category/9351278&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://itrhx.blog.csdn.net/article/category/9351278&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="豆瓣电影" scheme="https://www.itrhx.com/tags/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫实战 — 猫眼电影TOP100</title>
    <link href="https://www.itrhx.com/2019/09/24/A51-pyspider-maoyantop100/"/>
    <id>https://www.itrhx.com/2019/09/24/A51-pyspider-maoyantop100/</id>
    <published>2019-09-24T11:31:56.965Z</published>
    <updated>2019-10-21T04:00:20.669Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>爬取时间：2019-09-23<br>爬取难度：★☆☆☆☆☆<br>请求链接：<a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a><br>爬取目标：猫眼 TOP100 的电影名称、排名、主演、上映时间、评分、封面图地址，数据保存为 CSV 文件<br>涉及知识：请求库 requests、解析库 lxml、Xpath 语法、CSV 文件储存<br>完整代码：<a href="https://github.com/TRHX/Python3-Spider-Practice/tree/master/maoyan-top100" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice/tree/master/maoyan-top100</a><br>其他爬虫实战代码合集（持续更新）：<a href="https://github.com/TRHX/Python3-Spider-Practice" target="_blank" rel="noopener">https://github.com/TRHX/Python3-Spider-Practice</a><br>爬虫实战专栏（持续更新）：<a href="https://itrhx.blog.csdn.net/article/category/9351278" target="_blank" rel="noopener">https://itrhx.blog.csdn.net/article/category/9351278</a></p></blockquote><hr><a id="more"></a><h1 id="【1x00】循环爬取网页模块"><a href="#【1x00】循环爬取网页模块" class="headerlink" title="【1x00】循环爬取网页模块"></a><font color="#FF0000">【1x00】循环爬取网页模块</font></h1><p>观察猫眼电影TOP100榜，请求地址为：<a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a></p><p>每页展示10条电影信息，翻页观察 url 变化：</p><p>第一页：<a href="https://maoyan.com/board/4" target="_blank" rel="noopener">https://maoyan.com/board/4</a></p><p>第二页：<a href="https://maoyan.com/board/4?offset=10" target="_blank" rel="noopener">https://maoyan.com/board/4?offset=10</a></p><p>第三页：<a href="https://maoyan.com/board/4?offset=20" target="_blank" rel="noopener">https://maoyan.com/board/4?offset=20</a></p><p>一共有10页，利用一个 for 循环，从 0 到 100 每隔 10 取一个值拼接到 url，实现循环爬取每一页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://maoyan.com/board/4?offset=%s'</span> % number</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        index = index_page(i)</span><br></pre></td></tr></table></figure><hr><h1 id="【2x00】解析模块"><a href="#【2x00】解析模块" class="headerlink" title="【2x00】解析模块"></a><font color="#FF0000">【2x00】解析模块</font></h1><p>定义一个页面解析函数 <code>parse_page()</code>，使用 lxml 解析库的 Xpath 方法依次提取电影排名（ranking）、电影名称（movie_name）、主演（performer）、上映时间（releasetime）、评分（score）、电影封面图 url（movie_img）</p><p>通过对主演部分的提取发现有多余的空格符和换行符，循环 performer 列表，使用 <code>strip()</code> 方法去除字符串头尾空格和换行符</p><p>电影评分分为整数部分和小数部分，依次提取两部分，循环遍历组成一个完整的评分</p><p>最后使用 <code>zip()</code> 函数，将所有提取的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(content)</span>:</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    <span class="comment"># 电影排名</span></span><br><span class="line">    ranking = tree.xpath(<span class="string">"//dd/i/text()"</span>)</span><br><span class="line">    <span class="comment"># 电影名称</span></span><br><span class="line">    movie_name = tree.xpath(<span class="string">'//p[@class="name"]/a/text()'</span>)</span><br><span class="line">    <span class="comment"># 主演</span></span><br><span class="line">    performer = tree.xpath(<span class="string">"//p[@class='star']/text()"</span>)</span><br><span class="line">    performer = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> performer]</span><br><span class="line">    <span class="comment"># 上映时间</span></span><br><span class="line">    releasetime = tree.xpath(<span class="string">'//p[@class="releasetime"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 评分</span></span><br><span class="line">    score1 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="integer"]/text()'</span>)</span><br><span class="line">    score2 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="fraction"]/text()'</span>)</span><br><span class="line">    score = [score1[i] + score2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(min(len(score1), len(score2)))]</span><br><span class="line">    <span class="comment"># 电影封面图</span></span><br><span class="line">    movie_img = tree.xpath(<span class="string">'//img[@class="board-img"]/@data-src'</span>)</span><br><span class="line">    <span class="keyword">return</span> zip(ranking, movie_name, performer, releasetime, score, movie_img)</span><br></pre></td></tr></table></figure><hr><h1 id="【3x00】数据储存模块"><a href="#【3x00】数据储存模块" class="headerlink" title="【3x00】数据储存模块"></a><font color="#FF0000">【3x00】数据储存模块</font></h1><p>定义一个 <code>save_results()</code> 函数，将所有数据保存到 <code>maoyan.csv</code> 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(result)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'maoyan.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(result)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】完整代码"><a href="#【4x00】完整代码" class="headerlink" title="【4x00】完整代码"></a><font color="#FF0000">【4x00】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"><span class="comment"># --*-- coding: utf-8 --*--</span></span><br><span class="line"><span class="comment"># @Time    : 2019-09-23</span></span><br><span class="line"><span class="comment"># @Author  : TRHX</span></span><br><span class="line"><span class="comment"># @Blog    : www.itrhx.com</span></span><br><span class="line"><span class="comment"># @CSDN    : https://blog.csdn.net/qq_36759224</span></span><br><span class="line"><span class="comment"># @FileName: maoyan.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># =============================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(number)</span>:</span></span><br><span class="line">    url = <span class="string">'https://maoyan.com/board/4?offset=%s'</span> % number</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="keyword">return</span> response.text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(content)</span>:</span></span><br><span class="line">    tree = etree.HTML(content)</span><br><span class="line">    <span class="comment"># 电影排名</span></span><br><span class="line">    ranking = tree.xpath(<span class="string">"//dd/i/text()"</span>)</span><br><span class="line">    <span class="comment"># 电影名称</span></span><br><span class="line">    movie_name = tree.xpath(<span class="string">'//p[@class="name"]/a/text()'</span>)</span><br><span class="line">    <span class="comment"># 主演</span></span><br><span class="line">    performer = tree.xpath(<span class="string">"//p[@class='star']/text()"</span>)</span><br><span class="line">    performer = [p.strip() <span class="keyword">for</span> p <span class="keyword">in</span> performer]</span><br><span class="line">    <span class="comment"># 上映时间</span></span><br><span class="line">    releasetime = tree.xpath(<span class="string">'//p[@class="releasetime"]/text()'</span>)</span><br><span class="line">    <span class="comment"># 评分</span></span><br><span class="line">    score1 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="integer"]/text()'</span>)</span><br><span class="line">    score2 = tree.xpath(<span class="string">'//p[@class="score"]/i[@class="fraction"]/text()'</span>)</span><br><span class="line">    score = [score1[i] + score2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(min(len(score1), len(score2)))]</span><br><span class="line">    <span class="comment"># 电影封面图</span></span><br><span class="line">    movie_img = tree.xpath(<span class="string">'//img[@class="board-img"]/@data-src'</span>)</span><br><span class="line">    <span class="keyword">return</span> zip(ranking, movie_name, performer, releasetime, score, movie_img)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_results</span><span class="params">(result)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'maoyan.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        writer = csv.writer(fp)</span><br><span class="line">        writer.writerow(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">print(<span class="string">'开始爬取数据...'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">        index = index_page(i)</span><br><span class="line">        results = parse_page(index)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> results:</span><br><span class="line">            save_results(i)</span><br><span class="line">print(<span class="string">'数据爬取完毕！'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="【4x00】数据截图"><a href="#【4x00】数据截图" class="headerlink" title="【4x00】数据截图"></a><font color="#FF0000">【4x00】数据截图</font></h1><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A51/01.png" alt="01"><br></fancybox>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;爬取时间：2019-09-23&lt;br&gt;爬取难度：★☆☆☆☆☆&lt;br&gt;请求链接：&lt;a href=&quot;https://maoyan.com/board/4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://maoyan.com/board/4&lt;/a&gt;&lt;br&gt;爬取目标：猫眼 TOP100 的电影名称、排名、主演、上映时间、评分、封面图地址，数据保存为 CSV 文件&lt;br&gt;涉及知识：请求库 requests、解析库 lxml、Xpath 语法、CSV 文件储存&lt;br&gt;完整代码：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice/tree/master/maoyan-top100&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice/tree/master/maoyan-top100&lt;/a&gt;&lt;br&gt;其他爬虫实战代码合集（持续更新）：&lt;a href=&quot;https://github.com/TRHX/Python3-Spider-Practice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/TRHX/Python3-Spider-Practice&lt;/a&gt;&lt;br&gt;爬虫实战专栏（持续更新）：&lt;a href=&quot;https://itrhx.blog.csdn.net/article/category/9351278&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://itrhx.blog.csdn.net/article/category/9351278&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫实战" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="猫眼电影" scheme="https://www.itrhx.com/tags/%E7%8C%AB%E7%9C%BC%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C18</title>
    <link href="https://www.itrhx.com/2019/09/21/A50-Python3-spider-C18/"/>
    <id>https://www.itrhx.com/2019/09/21/A50-Python3-spider-C18/</id>
    <published>2019-09-21T03:59:30.358Z</published>
    <updated>2019-09-24T12:41:19.337Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十八章 —— 【爬虫框架 pyspider — 深入理解】</font></center></blockquote><a id="more"></a><hr><h1 id="【18-1】启动参数"><a href="#【18-1】启动参数" class="headerlink" title="【18.1】启动参数"></a><font color="#ff0000">【18.1】启动参数</font></h1><p>常用启动命令：<code>pyspider all</code>，完整命令结构为：<code>pyspider [OPTIONS] COMMAND [ARGS]</code>，OPTIONS 为可选参数，包含以下参数：</p><ul><li><font color="#ff0000"><strong>-c, –config FILENAME</strong></font>：指定配置文件名称</li><li><font color="#ff0000"><strong>–logging-config TEXT</strong></font>：日志配置文件名称，默认: pyspider/pyspider/logging.conf</li><li><font color="#ff0000"><strong>–debug</strong></font>：开启调试模式</li><li><font color="#ff0000"><strong>–queue-maxsize INTEGER</strong></font>：队列的最大长度</li><li><font color="#ff0000"><strong>–taskdb TEXT</strong></font>：taskdb 的数据库连接字符串，默认: sqlite</li><li><font color="#ff0000"><strong>–projectdb TEXT</strong></font>：projectdb 的数据库连接字符串，默认: sqlite</li><li><font color="#ff0000"><strong>–resultdb TEXT</strong></font>：resultdb 的数据库连接字符串，默认: sqlite</li><li><font color="#ff0000"><strong>–message-queue TEXT</strong></font>：消息队列连接字符串，默认: multiprocessing.Queue</li><li><font color="#ff0000"><strong>–phantomjs-proxy TEXT</strong></font>：PhantomJS 使用的代理，ip:port 的形式</li><li><font color="#ff0000"><strong>–data-path TEXT</strong></font>：数据库存放的路径</li><li><font color="#ff0000"><strong>–add-sys-path / –not-add-sys-path</strong></font>：将当前工作目录添加到python lib搜索路径</li><li><font color="#ff0000"><strong>–version</strong></font>：显示 pyspider 的版本信息</li><li><font color="#ff0000"><strong>–help</strong></font>：显示帮助信息</li></ul><p>配置文件为一个 JSON 文件，一般为 config.json 文件，常用配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"taskdb"</span>: <span class="string">"mysql+taskdb://username:password@host:port/taskdb"</span>,</span><br><span class="line">  <span class="string">"projectdb"</span>: <span class="string">"mysql+projectdb://username:password@host:port/projectdb"</span>,</span><br><span class="line">  <span class="string">"resultdb"</span>: <span class="string">"mysql+resultdb://username:password@host:port/resultdb"</span>,</span><br><span class="line">  <span class="string">"message_queue"</span>: <span class="string">"amqp://username:password@host:port/%2F"</span>,</span><br><span class="line">  <span class="string">"webui"</span>: &#123;</span><br><span class="line">  <span class="string">"port"</span>: <span class="number">5000</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"some_name"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"some_passwd"</span>,</span><br><span class="line">    <span class="string">"need-auth"</span>: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以设置对应的用户名，密码，端口等信息，使用命令 <code>pyspider -c config.json all</code> 即可运行</p><hr><h1 id="【18-2】运行单个组件"><a href="#【18-2】运行单个组件" class="headerlink" title="【18.2】运行单个组件"></a><font color="#ff0000">【18.2】运行单个组件</font></h1><p>pyspider 的架构主要分为 Scheduler（调度器）、Fetcher（抓取器）、Processer（处理器）三个部分，都可以单独运行，基本命令： <code>pyspider [component_name] [options]</code></p><hr><h2 id="【18-2-1】运行-Scheduler"><a href="#【18-2-1】运行-Scheduler" class="headerlink" title="【18.2.1】运行 Scheduler"></a><font color="#1BC3FB">【18.2.1】运行 Scheduler</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider scheduler [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --xmlrpc /--no-xmlrpc</span><br><span class="line">  --xmlrpc-host TEXT</span><br><span class="line">  --xmlrpc-port INTEGER</span><br><span class="line">  --inqueue-limit INTEGER  任务队列的最大长度，如果满了则新的任务会被忽略</span><br><span class="line">  --delete-time INTEGER    设置为 delete 标记之前的删除时间</span><br><span class="line">  --active-tasks INTEGER   当前活跃任务数量配置</span><br><span class="line">  --loop-limit INTEGER     单轮最多调度的任务数量</span><br><span class="line">  --fail-pause-num INTEGER 上次失败时自动暂停项目暂停次数，任务失败，将<span class="number">0</span>设置为禁用</span><br><span class="line">  --scheduler-cls TEXT     Scheduler 使用的类</span><br><span class="line">  --threads TEXT           ThreadBaseScheduler 的线程号，默认值：<span class="number">4</span></span><br><span class="line">  --help                   显示帮助信息</span><br></pre></td></tr></table></figure><hr><h2 id="【18-2-2】运行-Fetcher"><a href="#【18-2-2】运行-Fetcher" class="headerlink" title="【18.2.2】运行 Fetcher"></a><font color="#1BC3FB">【18.2.2】运行 Fetcher</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider fetcher [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --xmlrpc /--no-xmlrpc</span><br><span class="line">  --xmlrpc-host TEXT</span><br><span class="line">  --xmlrpc-port INTEGER</span><br><span class="line">  --poolsize INTEGER         同时请求的个数</span><br><span class="line">  --proxy TEXT               使用的代理</span><br><span class="line">  --user-agent TEXT          使用的 User-Agent</span><br><span class="line">  --timeout TEXT             超时时间</span><br><span class="line">  --phantomjs-endpoint TEXT  phantomjs 的端点，通过 pyspider 启动 phantomjs</span><br><span class="line">  --splash-endpoint TEXT     执行 splash 的端点：http://splash.readthedocs.io/en/stable/api.html execut</span><br><span class="line">  --fetcher-cls TEXT         Fetcher 使用的类</span><br><span class="line">  --help                     显示帮助信息</span><br></pre></td></tr></table></figure><hr><h2 id="【18-2-3】运行-Processer"><a href="#【18-2-3】运行-Processer" class="headerlink" title="【18.2.3】运行 Processer"></a><font color="#1BC3FB">【18.2.3】运行 Processer</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider processor [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --processor-cls TEXT  Processor 使用的类</span><br><span class="line">  --process-time-limit INTEGER    脚本处理时间限制</span><br><span class="line">  --help                          显示帮助信息</span><br></pre></td></tr></table></figure><hr><h2 id="【18-2-4】运行-WebUI"><a href="#【18-2-4】运行-WebUI" class="headerlink" title="【18.2.4】运行 WebUI"></a><font color="#1BC3FB">【18.2.4】运行 WebUI</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyspider webui [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --host TEXT                   运行地址</span><br><span class="line">  --port INTEGER                运行端口</span><br><span class="line">  --cdn TEXT                    JS 和 CSS 的 CDN 服务器</span><br><span class="line">  --scheduler-rpc TEXT          Scheduler 的 xmlrpc 路径</span><br><span class="line">  --fetcher-rpc TEXT            Fetcher 的 xmlrpc 路径</span><br><span class="line">  --max-rate FLOAT              每个项目最大的 rate 值</span><br><span class="line">  --max-burst FLOAT             每个项目最大的 burst 值</span><br><span class="line">  --username TEXT               Auth 验证的用户名</span><br><span class="line">  --password TEXT               Auth 验证的密码</span><br><span class="line">  --need-auth                   是否需要验证</span><br><span class="line">  --webui-instance TEXT         运行时使用的 Flask 应用</span><br><span class="line">  --process-time-limit INTEGER  调试中的脚本处理时间限制</span><br><span class="line">  --help                        显示帮助信息</span><br></pre></td></tr></table></figure><hr><h1 id="【18-3】crawl-方法各参数"><a href="#【18-3】crawl-方法各参数" class="headerlink" title="【18.3】crawl() 方法各参数"></a><font color="#ff0000">【18.3】crawl() 方法各参数</font></h1><p>参数文档：<a href="http://docs.pyspider.org/en/latest/apis/self.crawl/" target="_blank" rel="noopener">http://docs.pyspider.org/en/latest/apis/self.crawl/</a></p><hr><ul><li><font color="#ff0000"><strong>url</strong></font>：爬取目标 URL，可以定义为单个 URL 字符串，也可以定义成 URL 列表</li></ul><hr><ul><li><font color="#ff0000"><strong>callback</strong></font>：回调函数，指定了该 URL 对应的响应内容用哪个方法来解析，示例：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>代码解释：指定 <code>callback</code> 为 <code>index_page</code>，代表爬取 <a href="http://www.itrhx.com/">http://www.itrhx.com/</a> 得到的响应会用 <code>index_page()</code> 方法来解析，而 <code>index_page()</code> 方法的第一个参数就是响应对象，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>age</strong></font>：任务的有效时间，如果某个任务在有效时间内且已经被执行，则它不会重复执行，有如下两种设置方法：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.callback, age=<span class="number">10</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(age=10 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>priority</strong></font>：爬取任务的优先级，其值默认是 0，priority 的数值越大，对应的请求会越优先被调度，如下所示，<code>2.html</code> 页面将会优先爬取：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/1.html'</span>, callback=self.index_page)</span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/2.html'</span>, callback=self.detail_page, priority=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>exetime</strong></font>：设置定时任务，其值是时间戳，默认是 0，即代表立即执行，如下所示表示该任务会在 30 分钟之后执行：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.callback, exetime=time.time()+<span class="number">30</span>*<span class="number">60</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>retries</strong></font>：定义重试次数，其值默认是 3</li></ul><hr><ul><li><font color="#ff0000"><strong>itag</strong></font>：设置判定网页是否发生变化的节点值，在爬取时会判定次当前节点是否和上次爬取到的节点相同。如果节点相同，则证明页面没有更新，就不会重复爬取，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">  <span class="keyword">for</span> item <span class="keyword">in</span> response.doc(<span class="string">'.item'</span>).items():</span><br><span class="line">      self.crawl(item.find(<span class="string">'a'</span>).attr.url, callback=self.detail_page, itag=item.find(<span class="string">'.update-time'</span>).text())</span><br></pre></td></tr></table></figure><p>代码解释：设置 <code>update-time</code> 这个节点的值为 itag，在下次爬取时就会首先检测这个值有没有发生变化，如果没有变化，则不再重复爬取，否则执行爬取</p><hr><ul><li><font color="#ff0000"><strong>auto_recrawl</strong></font>：开启时，爬取任务在过期后会重新执行，循环时间即定义的 age 时间长度，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.callback, age=<span class="number">5</span>*<span class="number">60</span>*<span class="number">60</span>, auto_recrawl=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>代码解释：定义 <code>age</code> 有效期为 5 小时，设置了 <code>auto_recrawl</code> 为 <code>True</code>，这样任务就会每 5 小时执行一次</p><hr><ul><li><font color="#ff0000"><strong>method</strong></font>：HTTP 请求方式，默认为 GET，如果想发起 POST 请求，可以将 method 设置为 POST</li></ul><hr><ul><li><font color="#ff0000"><strong>params</strong></font>：定义 GET 请求参数，如下所示表示两个等价的爬取任务：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/get'</span>, callback=self.callback, params=&#123;<span class="string">'a'</span>: <span class="number">123</span>, <span class="string">'b'</span>: <span class="string">'c'</span>&#125;)</span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/get?a=123&amp;b=c'</span>, callback=self.callback)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>data</strong></font>：POST 表单数据，当请求方式为 POST 时，我们可以通过此参数传递表单数据，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/post'</span>, callback=self.callback, method=<span class="string">'POST'</span>, data=&#123;<span class="string">'a'</span>: <span class="number">123</span>, <span class="string">'b'</span>: <span class="string">'c'</span>&#125;)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>files</strong></font>：上传的文件，需要指定文件名，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/post'</span>, callback=self.callback, method=<span class="string">'POST'</span>, files=&#123;field: &#123;filename: <span class="string">'content'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>user_agent</strong></font>：爬取使用的 User-Agent</li></ul><hr><ul><li><font color="#ff0000"><strong>headers</strong></font>：爬取时使用的 Headers，即 Request Headers</li></ul><hr><ul><li><font color="#ff0000"><strong>cookies</strong></font>：爬取时使用的 Cookies，为字典格式</li></ul><hr><ul><li><font color="#ff0000"><strong>connect_timeout</strong></font>：在初始化连接时的最长等待时间，默认为 20 秒</li></ul><hr><ul><li><font color="#ff0000"><strong>timeout</strong></font>：抓取网页时的最长等待时间，默认为 120 秒</li></ul><hr><ul><li><font color="#ff0000"><strong>allow_redirects</strong></font>：确定是否自动处理重定向，默认为 True</li></ul><hr><ul><li><font color="#ff0000"><strong>validate_cert</strong></font>：确定是否验证证书，此选项对 HTTPS 请求有效，默认为 True</li></ul><hr><ul><li><font color="#ff0000"><strong>proxy</strong></font>：爬取时使用的代理，支持用户名密码的配置，格式为 <code>username:password@hostname:port</code>，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://httpbin.org/get'</span>, callback=self.callback, proxy=<span class="string">'127.0.0.1:9743'</span>)</span><br></pre></td></tr></table></figure><p>也可以设置 <code>craw_config</code> 来实现全局配置，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">  crawl_config = &#123;<span class="string">'proxy'</span>: <span class="string">'127.0.0.1:9743'</span>&#125;</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>fetch_type</strong></font>：开启 PhantomJS 渲染，如果遇到 JavaScript 渲染的页面，指定此字段即可实现 PhantomJS 的对接，pyspider 将会使用 PhantomJS 进行网页的抓取，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'https://www.taobao.com'</span>, callback=self.index_page, fetch_type=<span class="string">'js'</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>js_script</strong></font>：页面加载完毕后执行的 JavaScript 脚本，如下所示，页面加载成功后将执行页面混动的 JavaScript 代码，页面会下拉到最底部：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.example.org/'</span>, callback=self.callback,</span><br><span class="line">             fetch_type=<span class="string">'js'</span>, js_script=<span class="string">'''</span></span><br><span class="line"><span class="string">             function() &#123;window.scrollTo(0,document.body.scrollHeight);</span></span><br><span class="line"><span class="string">                 return 123;</span></span><br><span class="line"><span class="string">             &#125;</span></span><br><span class="line"><span class="string">             '''</span>)</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>js_run_at</strong></font>：代表 JavaScript 脚本运行的位置，是在页面节点开头还是结尾，默认是结尾，即 <code>document-end</code></li></ul><hr><ul><li><font color="#ff0000"><strong>js_viewport_width/js_viewport_height</strong></font>：JavaScript 渲染页面时的窗口大小</li></ul><hr><ul><li><font color="#ff0000"><strong>load_images</strong></font>：在加载 JavaScript 页面时确定是否加载图片，默认为否</li></ul><hr><ul><li><font color="#ff0000"><strong>save</strong></font>：在不同的方法之间传递参数，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">  self.crawl(<span class="string">'http://www.example.org/'</span>, callback=self.callback,</span><br><span class="line">             save=&#123;<span class="string">'page'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(self, response)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> response.save[<span class="string">'page'</span>]</span><br></pre></td></tr></table></figure><hr><ul><li><font color="#ff0000"><strong>cancel</strong></font>：取消任务，如果一个任务是 <code>ACTIVE</code> 状态的，则需要将 <code>force_update</code> 设置为 <code>True</code></li></ul><hr><ul><li><font color="#ff0000"><strong>force_update</strong></font>：即使任务处于 ACTIVE 状态，那也会强制更新状态</li></ul><hr><h1 id="【18-4】任务区分"><a href="#【18-4】任务区分" class="headerlink" title="【18.4】任务区分"></a><font color="#ff0000">【18.4】任务区分</font></h1><p>pyspider 判断两个任务是否是重复的是使用的是该任务对应的 URL 的 MD5 值作为任务的唯一 ID，如果 ID 相同，那么两个任务就会判定为相同，其中一个就不会爬取了</p><p>某些情况下，请求的链接是同一个，但是 POST 的参数不同，这时可以重写 <code>task_id()</code> 方法，利用 URL 和 POST 的参数来生成 ID，改变这个 ID 的计算方式来实现不同任务的区分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyspider.libs.utils <span class="keyword">import</span> md5string</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_taskid</span><span class="params">(self, task)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> md5string(task[<span class="string">'url'</span>]+json.dumps(task[<span class="string">'fetch'</span>].get(<span class="string">'data'</span>, <span class="string">''</span>)))</span><br></pre></td></tr></table></figure><hr><h1 id="【18-5】全局配置"><a href="#【18-5】全局配置" class="headerlink" title="【18.5】全局配置"></a><font color="#ff0000">【18.5】全局配置</font></h1><p>pyspider 可以使用 <code>crawl_config</code> 来指定全局的配置，配置中的参数会和 <code>crawl()</code> 方法创建任务时的参数合并：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">        <span class="string">'headers'</span>: &#123;<span class="string">'User-Agent'</span>: <span class="string">'GoogleBot'</span>,&#125;</span><br><span class="line">        <span class="string">'proxy'</span>: <span class="string">'127.0.0.1:9743'</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h1 id="【18-6】定时爬取"><a href="#【18-6】定时爬取" class="headerlink" title="【18.6】定时爬取"></a><font color="#ff0000">【18.6】定时爬取</font></h1><p>通过 <code>every</code> 属性来设置爬取的时间间隔，如下代码表示每天执行一次爬取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@every(minutes=24 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urllist:</span><br><span class="line">        self.crawl(url, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>注意事项：如果设置了任务的有效时间（age 参数），因为在有效时间内爬取不会重复，所以要把有效时间设置得比重复时间更短，这样才可以实现定时爬取</p><p>错误举例：设定任务的过期时间为 5 天，而自动爬取的时间间隔为 1 天，当第二次尝试重新爬取的时候，pyspider 会监测到此任务尚未过期，便不会执行爬取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@every(minutes=24 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.crawl(<span class="string">'http://www.itrhx.com/'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">@config(age=5 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十八章 —— 【爬虫框架 pyspider — 深入理解】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="pyspider" scheme="https://www.itrhx.com/tags/pyspider/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C17</title>
    <link href="https://www.itrhx.com/2019/09/18/A49-Python3-spider-C17/"/>
    <id>https://www.itrhx.com/2019/09/18/A49-Python3-spider-C17/</id>
    <published>2019-09-18T06:18:23.904Z</published>
    <updated>2019-09-24T12:41:15.652Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十七章 —— 【爬虫框架 pyspider — 基本使用】</font></center></blockquote><a id="more"></a><hr><h1 id="【17-1】初识-pyspider"><a href="#【17-1】初识-pyspider" class="headerlink" title="【17.1】初识 pyspider"></a><font color="#ff0000">【17.1】初识 pyspider</font></h1><p>pyspider 是由国人 Binux 编写的一个 Python 爬虫框架</p><ul><li>GitHub：<a href="https://github.com/binux/pyspider" target="_blank" rel="noopener">https://github.com/binux/pyspider</a> </li><li>官方文档（英文）：<a href="http://docs.pyspider.org/" target="_blank" rel="noopener">http://docs.pyspider.org/</a></li><li>非官方文档（中文）：<a href="http://book.crifan.com/books/python_spider_pyspider/website/" target="_blank" rel="noopener">http://book.crifan.com/books/python_spider_pyspider/website/</a></li><li>非官方文档（中文）：<a href="https://www.cntofu.com/book/156/index.md" target="_blank" rel="noopener">https://www.cntofu.com/book/156/index.md</a></li></ul><p>pyspider 特性：</p><ul><li>python 脚本控制，可以使用任何 html 解析包（内置 pyquery）</li><li>WEB 界面编写调试脚本，起停脚本，监控执行状态，查看活动历史，获取结果产出</li><li>支持 MySQL、MongoDB、Redis、SQLite、Elasticsearch、PostgreSQL</li><li>对接了 PhantomJS，支持抓取 JavaScript 的页面</li><li>组件可替换，支持单机和分布式部署，支持 Docker 部署</li><li>提供优先级控制、失败重试、定时抓取等功能</li></ul><p>Windows 系统安装 pyspider：</p><p>使用命令 <code>pip install pyspider</code> 安装，若报 PyCurl 相关错误，可访问 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycurl" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycurl</a> 下载对应 wheel 文件并使用命令 <code>pip install whl文件名</code> 安装即可</p><p>如果要爬取 JavaScrip 渲染的页面，还要下载 PhantomJS，并将 PhantomJS 的路径配置到环境变量里，或者直接复制到 Python 安装目录的 Scripts 文件夹，需要用到数据库储存的话，同样要安装好相应的数据库</p><p>准备就绪后，使用 <code>pyspider all</code> 命令可启动 pyspider，浏览器打开：<a href="http://localhost:5000/" target="_blank" rel="noopener">http://localhost:5000/</a> 可以看到 pyspider 的 WebUI 管理界面</p><hr><h1 id="【17-2】使用-pyspider"><a href="#【17-2】使用-pyspider" class="headerlink" title="【17.2】使用 pyspider"></a><font color="#ff0000">【17.2】使用 pyspider</font></h1><hr><h2 id="【17-2-1】主界面"><a href="#【17-2-1】主界面" class="headerlink" title="【17.2.1】主界面"></a><font color="#1BC3FB">【17.2.1】主界面</font></h2><p>当成功创建了一个爬虫项目后，主界面如下所示：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/01.png" alt="01"><br></fancybox><ul><li><p><font color="#ff0000">Recent Active Tasks</font>：查看最近活动的任务，会跳转到一个页面有列表显示</p></li><li><p><font color="#ff0000">Create</font>：创建一个新的爬虫项目</p></li><li><p><font color="#ff0000">group</font>：定义项目的分组，以方便管理，若 group 设置为 delete，则该项目将会在24小时之后删除</p></li><li><p><font color="#ff0000">project name</font>：爬虫项目名称</p></li><li><p><font color="#ff0000">status</font>：项目状态，各状态如下：<br> <font color="#1BC3FB">TODO</font>：一个爬虫项目刚刚创建时的状态，此状态下可以编辑 Python 代码<br> <font color="#1BC3FB">STOP</font>：中止项目的运行<br> <font color="#1BC3FB">CHECKING</font>：当一个运行中的项目被编辑时项目状态会被自动设置成此状态并中止运行<br> <font color="#1BC3FB">DEBUG</font>：会运行爬虫，顾名思义找 BUG，一般来说用于调试阶段<br> <font color="#1BC3FB">RUNNING</font>：运行爬虫项目<br> <font color="#1BC3FB">PAUSED</font>：项目暂停运行，默认没有这个状态，但是当你在运行过程中突然断网就会出现此状态</p></li><li><p><font color="#ff0000">rate/burst</font>：当前的爬取速率，rate 代表 1 秒发出多少个请求，burst 相当于流量控制中的令牌桶算法的令牌数，rate 和 burst 设置的越大，爬取速率越快，速率的设定需要考虑本机性能和爬取过快被封的问题</p></li><li><p><font color="#ff0000">avg time</font>：任务平均时间</p></li><li><p><font color="#ff0000">process</font>：5m、1h、1d 分别指的是最近 5 分、1 小时、1 天内的请求情况，all 代表所有的请求情况，请求由不同颜色表示，蓝色的代表等待被执行的请求，绿色的代表成功的请求，黄色的代表请求失败后等待重试的请求，红色的代表失败次数过多而被忽略的请求</p></li><li><p><font color="#ff0000">actions</font>：对爬虫项目的操作，各操作如下：<br> <font color="#1BC3FB">Run</font>：立即执行任务，需要 status 为 RUNNING 或者 DEBUG 状态；假如在配置的调度执行时间内已经执行过，再点 run 是无效的，需要删除 task.db 里的数据才行<br> <font color="#1BC3FB">Active Tasks</font>：查看当前爬虫项目的活动任务<br> <font color="#1BC3FB">Results</font>：查看项目运行结果</p></li></ul><hr><h2 id="【17-2-2】项目界面"><a href="#【17-2-2】项目界面" class="headerlink" title="【17.2.2】项目界面"></a><font color="#1BC3FB">【17.2.2】项目界面</font></h2><p>创建一个爬虫项目，界面如下所示：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/02.png" alt="02"><br></fancybox><ul><li><font color="#ff0000">创建项目</font>：点击 Create 即可新建一个爬虫项目</li><li><font color="#ff0000">Project Name</font>：爬虫项目名称</li><li><font color="#ff0000">Start URL(s)</font> ：爬虫入口地址，选填，可在项目中更改</li></ul><p>项目创建完成进入调试界面：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/03.png" alt="03"><br></fancybox><ul><li><p><font color="#ff0000">调试界面右边</font>：编写代码的区域</p></li><li><p><font color="#ff0000">调试界面左边</font>：调试的区域，用于执行代码，显示输出信息等用途</p></li><li><p><font color="#ff0000">run</font>：单步调试爬虫程序，点击就可运行当前任务</p></li><li><p><font color="#ff0000">&lt; &gt; 箭头</font>：上一步、下一步，用于调试过程中切换到上一步骤或者下一步骤</p></li><li><p><font color="#ff0000">save</font>：保存当前代码，当代码变更后只有保存了再运行才能得到最新结果</p></li><li><p><font color="#ff0000">enable css selector helper</font>： CSS 选择器辅助程序</p></li><li><p><font color="#ff0000">web</font>：页面预览</p></li><li><p><font color="#ff0000">html</font>：可以查看页面源代码</p></li><li><p><font color="#ff0000">follows</font>：表示爬取请求，点击可查看所有的请求</p></li></ul><p>在新建一个爬虫项目的时候，pyspider 已经自动生成了如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2019-09-17 21:18:13</span></span><br><span class="line"><span class="comment"># Project: 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'__START_URL__'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'a[href^="http"]'</span>).items():</span><br><span class="line">            self.crawl(each.attr.href, callback=self.detail_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">"url"</span>: response.url,</span><br><span class="line">            <span class="string">"title"</span>: response.doc(<span class="string">'title'</span>).text(),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li><p><font color="#ff0000">class Handler()：</font>pyspider 爬虫的主类，可以在此处定义爬取、解析、存储的逻辑。整个爬虫的功能只需要一个 Handler 即可完成</p></li><li><p><font color="#ff0000">crawl_config 属性：</font>项目的所有爬取配置将会统一定义到这里，如定义 headers、设置代理等，配置之后全局生效</p></li><li><p><font color="#ff0000">on_start() 方法：</font>爬取入口，初始的爬取请求会在这里产生，该方法通过调用 <code>crawl()</code> 方法即可新建一个爬取请求，第一个参数是爬取的 URL，另一个参数 <code>callback</code> 指定了这个页面爬取成功后用哪个方法进行解析，默认指定为 <code>index_page()</code> 方法，即如果这个 URL 对应的页面爬取成功了，那 Response 将交给 <code>index_page()</code> 方法解析</p></li><li><p><font color="#ff0000">index_page() 方法：</font>接收 Response 参数，Response 对接了 pyquery。直接调用 <code>doc()</code> 方法传入相应的 CSS 选择器，就可以像 pyquery 一样解析此页面，代码中默认是 <code>a[href^=&quot;http&quot;]</code>，即解析页面的所有链接，然后将链接遍历，再次调用了 <code>crawl()</code> 方法生成了新的爬取请求，同时再指定了 callback 为 detail_page，表示这些页面爬取成功了就调用 <code>detail_page()</code> 方法解析。<code>index_page()</code> 实现了两个功能，一是将爬取的结果进行解析，二是生成新的爬取请求</p></li><li><p><font color="#ff0000">detail_page() 方法：</font>同样接收 Response 作为参数。<code>detail_page()</code> 抓取的就是详情页的信息，就不会生成新的请求，只对 Response 对象做解析，解析之后将结果以字典的形式返回。当然也可以进行后续处理，如将结果保存到数据库等操作</p></li></ul><p>PS：pyspider 默认的 web 预览页面窗口较小，可以找到 pyspider 文件夹有个 debug.min.css 文件（如：E:\Python\Lib\site-packages\pyspider\webui\static\debug.min.css），搜索 iframe，将原样式：<code>iframe{border-width:0;width:100%}</code> 改为 <code>iframe{border-width:0;width:100%;height:400px !important}</code> 即可，清除浏览器缓存后就会生效！</p><hr><h1 id="【17-3】使用-pyspider-爬取去哪儿网"><a href="#【17-3】使用-pyspider-爬取去哪儿网" class="headerlink" title="【17.3】使用 pyspider 爬取去哪儿网"></a><font color="#ff0000">【17.3】使用 pyspider 爬取去哪儿网</font></h1><p>爬取地址：<a href="http://travel.qunar.com/travelbook/list.htm" target="_blank" rel="noopener">http://travel.qunar.com/travelbook/list.htm</a><br>爬取目标：去哪儿网旅游攻略，发帖作者、标题、正文等</p><hr><h2 id="【17-3-1】爬取首页"><a href="#【17-3-1】爬取首页" class="headerlink" title="【17.3.1】爬取首页"></a><font color="#1BC3FB">【17.3.1】爬取首页</font></h2><p>创建一个名为 qunar 的爬虫项目，Start URL 设置为 <a href="http://travel.qunar.com/travelbook/list.htm" target="_blank" rel="noopener">http://travel.qunar.com/travelbook/list.htm</a> ，点击 run 出现一个爬取请求</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/04.png" alt="04"><br></fancybox><p>左边调试区域出现以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"process"</span>: &#123;</span><br><span class="line">    <span class="string">"callback"</span>: <span class="string">"on_start"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"project"</span>: <span class="string">"qunar"</span>,</span><br><span class="line">  <span class="string">"taskid"</span>: <span class="string">"data:,on_start"</span>,</span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"data:,on_start"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>callback 为 on_start，表示此时执行了 <code>on_start()</code> 方法。在 <code>on_start()</code> 方法中，利用 <code>crawl()</code> 方法即可生成一个爬取请求，点击 index_page 链接后面的箭头会出现许多新的爬取请求，即首页所包含的所有链接</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/05.png" alt="05"><br></fancybox><p>此时左边调试区域代码变为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"fetch"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"process"</span>: &#123;</span><br><span class="line">    <span class="string">"callback"</span>: <span class="string">"index_page"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"project"</span>: <span class="string">"qunar"</span>,</span><br><span class="line">  <span class="string">"schedule"</span>: &#123;</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">864000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"taskid"</span>: <span class="string">"73a789f99528a2bdc3ab83a13902962a"</span>,</span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"http://travel.qunar.com/travelbook/list.htm"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>callback 变为了 index_page，表示此时执行了 <code>index_page()</code> 方法。传入 <code>index_page()</code> 方法的 response 参数为刚才生成的第一个爬取请求的 response 对象，然后调用 <code>doc()</code> 方法，传入提取所有 a 节点的 CSS 选择器，获取 a 节点的属性 href，实现了页面所有链接的提取，随后遍历所有链接，调用 <code>crawl()</code> 方法，把每个链接构造成新的爬取请求，可以看到 follows 新生成了 229 个爬取请求。点击 web 按钮可以直接预览当前页面，点击 html 按钮可以查看此页面源代码</p><hr><h2 id="【17-3-2】信息匹配"><a href="#【17-3-2】信息匹配" class="headerlink" title="【17.3.2】信息匹配"></a><font color="#1BC3FB">【17.3.2】信息匹配</font></h2><p>代码 <code>for each in response.doc(&#39;a[href^=&quot;http&quot;]&#39;).items():</code> 实现了对整个页面链接的获取，我们需要提取网页的攻略的标题，内容等信息，那么直接替换 <code>doc()</code> 方法里的匹配语句即可，pyspider 提供了非常方便的 CSS 选择器，点击 <code>enable css selector helper</code> 按钮后，选择要匹配的信息并点击，再点击箭头 add to editor 即可得到匹配语句</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/06.png" alt="06"><br></fancybox><p>完成了 CSS 选择器的替换，点击 <code>save</code> 保存，再次点击 <code>run</code> 重新执行 <code>index_page()</code> 方法，可以看到 follows 变为了 10 个，即抓取到了 10 篇攻略</p><hr><h2 id="【17-3-3】抓取下一页数据"><a href="#【17-3-3】抓取下一页数据" class="headerlink" title="【17.3.3】抓取下一页数据"></a><font color="#1BC3FB">【17.3.3】抓取下一页数据</font></h2><p>每一页只有 10 篇攻略，想要爬取所有页面的攻略，必须要得到下一页的数据，优化 <code>index_page()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(age=10 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'li &gt; .tit &gt; a'</span>).items():</span><br><span class="line">        self.crawl(each.attr.href, callback=self.detail_page)</span><br><span class="line">    next = response.doc(<span class="string">'.next'</span>).attr.href</span><br><span class="line">    self.crawl(next, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>匹配下一页按钮，获取下一页按钮的 URL 并赋值给 next，将该 URL 传给 <code>crawl()</code> 方法，指定回调函数为 <code>index_page()</code> 方法，这样会再次调用 <code>index_page()</code> 方法，提取下一页的攻略标题</p><hr><h2 id="【17-3-4】抓取JS渲染数据"><a href="#【17-3-4】抓取JS渲染数据" class="headerlink" title="【17.3.4】抓取JS渲染数据"></a><font color="#1BC3FB">【17.3.4】抓取JS渲染数据</font></h2><p>随便点击一个获取到的攻略，预览该页面，可以观察到头图一直在加载中，切换到 html 查看源代码页面，可以观察到没有 img 节点，那么此处就是后期经过 JavaScript 渲染后才出现的</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/07.png" alt="07"><br></fancybox><p>针对 JavaScript 渲染页面，可以通过 PhantomJS 来实现，具体到 pyspider 中，只需要在 <code>index_page()</code> 的 <code>crawl()</code> 抓取方法中添加一个参数 <code>fetch_type</code> 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(age=10 * 24 * 60 * 60)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'li &gt; .tit &gt; a'</span>).items():</span><br><span class="line">        self.crawl(each.attr.href, callback=self.detail_page, fetch_type=<span class="string">'js'</span>)</span><br><span class="line">    next = response.doc(<span class="string">'.next'</span>).attr.href</span><br><span class="line">    self.crawl(next, callback=self.index_page)</span><br></pre></td></tr></table></figure><p>保存之后再次运行即可看到正常页面</p><hr><h2 id="【17-3-5】抓取所有数据"><a href="#【17-3-5】抓取所有数据" class="headerlink" title="【17.3.5】抓取所有数据"></a><font color="#1BC3FB">【17.3.5】抓取所有数据</font></h2><p>改写 <code>detail_page()</code> 方法，同样通过 CSS 选择器提取 URL、标题、日期、作者、正文、图片等信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@config(priority=2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'url'</span>: response.url,</span><br><span class="line">        <span class="string">'title'</span>: response.doc(<span class="string">'#booktitle'</span>).text(),</span><br><span class="line">        <span class="string">'date'</span>: response.doc(<span class="string">'.when .data'</span>).text(),</span><br><span class="line">        <span class="string">'day'</span>: response.doc(<span class="string">'.howlong .data'</span>).text(),</span><br><span class="line">        <span class="string">'who'</span>: response.doc(<span class="string">'.who .data'</span>).text(),</span><br><span class="line">        <span class="string">'text'</span>: response.doc(<span class="string">'#b_panel_schedule'</span>).text(),</span><br><span class="line">        <span class="string">'image'</span>: response.doc(<span class="string">'.cover_img'</span>).attr.src</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="【17-3-6】启动爬虫项目"><a href="#【17-3-6】启动爬虫项目" class="headerlink" title="【17.3.6】启动爬虫项目"></a><font color="#1BC3FB">【17.3.6】启动爬虫项目</font></h2><p>该爬虫项目完整代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- encoding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Created on 2019-09-18 09:48:29</span></span><br><span class="line"><span class="comment"># Project: qunar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'http://travel.qunar.com/travelbook/list.htm'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'li &gt; .tit &gt; a'</span>).items():</span><br><span class="line">            self.crawl(each.attr.href, callback=self.detail_page, fetch_type=<span class="string">'js'</span>)</span><br><span class="line">        next = response.doc(<span class="string">'.next'</span>).attr.href</span><br><span class="line">        self.crawl(next, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @config(priority=2)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="string">'url'</span>: response.url,</span><br><span class="line">            <span class="string">'title'</span>: response.doc(<span class="string">'#booktitle'</span>).text(),</span><br><span class="line">            <span class="string">'date'</span>: response.doc(<span class="string">'.when .data'</span>).text(),</span><br><span class="line">            <span class="string">'day'</span>: response.doc(<span class="string">'.howlong .data'</span>).text(),</span><br><span class="line">            <span class="string">'who'</span>: response.doc(<span class="string">'.who .data'</span>).text(),</span><br><span class="line">            <span class="string">'text'</span>: response.doc(<span class="string">'#b_panel_schedule'</span>).text(),</span><br><span class="line">            <span class="string">'image'</span>: response.doc(<span class="string">'.cover_img'</span>).attr.src</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>保存代码后，回到主界面，将项目 status 修改为 RUNNING ，点击 actions 的 run 按钮即可启动爬虫</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/08.png" alt="08"><br></fancybox><p>点击 Active Tasks，即可查看最近请求的详细状况：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/09.png" alt="09"><br></fancybox><p>点击 Results，即可查看所有的爬取结果：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A49/10.png" alt="10"><br></fancybox><p>另外，右上角还可以选择 JSON、CSV 格式</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十七章 —— 【爬虫框架 pyspider — 基本使用】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="pyspider" scheme="https://www.itrhx.com/tags/pyspider/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客提交百度、谷歌搜索引擎收录</title>
    <link href="https://www.itrhx.com/2019/09/17/A48-submit-search-engine-inclusion/"/>
    <id>https://www.itrhx.com/2019/09/17/A48-submit-search-engine-inclusion/</id>
    <published>2019-09-17T07:59:46.143Z</published>
    <updated>2019-12-29T07:20:01.329Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="●-写在前面（必看）"><a href="#●-写在前面（必看）" class="headerlink" title="● 写在前面（必看）"></a><font color="#ff0000">● 写在前面（必看）</font></h1><p>网站在没有提交搜索引擎收录之前，直接搜索你网站的内容是搜不到的，只有提交搜索引擎之后，搜索引擎才能收录你的站点，通过爬虫抓取你网站的东西，<font color="#ff0000">对于 hexo 博客来说，如果你是部署在 GitHub Pages，那么你是无法被百度收录的，因为 GitHub 禁止了百度爬虫</font>，最常见的解决办法是双线部署到 Coding Pages 和 GitHub Pages，因为百度爬虫可以爬取到 Coding 上的内容，从而实现百度收录，如果你的 hexo 博客还没有实现双线部署，请参考：<a href="https://blog.csdn.net/qq_36759224/article/details/100879609" target="_blank" rel="noopener">《Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS》</a>，另外百度收录的所需的时间较长，大约半个月左右才会看到效果！</p><hr><h1 id="●-查看网站是否被收录"><a href="#●-查看网站是否被收录" class="headerlink" title="● 查看网站是否被收录"></a><font color="#ff0000">● 查看网站是否被收录</font></h1><p>首先我们可以输入 <code>site:域名</code> 来查看域名是否被搜索引擎收录，如下图所示，表示没有收录：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/01.png" alt="01"><br></fancybox><hr><h1 id="●-百度资源平台添加网站"><a href="#●-百度资源平台添加网站" class="headerlink" title="● 百度资源平台添加网站"></a><font color="#ff0000">● 百度资源平台添加网站</font></h1><p>访问<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度搜索资源平台官网</a>，注册或者登陆百度账号，依次选择【用户中心】-【站点管理】，添加你的网站，在添加站点时会让你选择协议头（http 或者 https），如果选择 https，它会验证你的站点，大约能在一天之内完成，我的网站已经实现了全站 https，因此选择了 https 协议，但是不知道为什么始终验证失败，实在是无解，只能选择 http 协议了，如果你的站点也实现了全站 https，也可以尝试一下</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/02.png" alt="02"><br></fancybox><p>之后会让你验证网站所有权，提供三种验证方式：</p><ul><li>文件验证：下载给定的文件，将其放到本地<font color="#ff0000">主题目录 source 文件夹</font>，然后部署上去完成验证</li><li>HTML 标签验证：一般是给一个 meta 标签，放到首页 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间即可完成验证</li><li>CNAME 验证：个人觉得这种方法最简单，去域名 DNS 添加一个 CNAME 记录即可完成验证</li></ul><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/03.png" alt="03"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/04.png" alt="04"><br></fancybox><hr><h1 id="●-提交百度搜索"><a href="#●-提交百度搜索" class="headerlink" title="● 提交百度搜索"></a><font color="#ff0000">● 提交百度搜索</font></h1><p>百度提供了自动提交和手动提交两种方式，其中自动提交又分为主动推送、自动推送和 sitemap 三种方式，以下是官方给出的解释：</p><ul><li><p>主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录</p></li><li><p>自动推送：是轻量级链接提交组件，将自动推送的 JS 代码放置在站点每一个页面源代码中，当页面被访问时，页面链接会自动推送给百度，有利于新页面更快被百度发现</p></li><li><p>sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送</p></li><li><p>手动提交：如果您不想通过程序提交，那么可以采用此种方式，手动将链接提交给百度</p></li></ul><p>四种提交方式对比：</p><table><thead><tr><th style="text-align:center">方式</th><th style="text-align:center">主动推送</th><th style="text-align:center">自动推送</th><th style="text-align:center">Sitemap</th><th style="text-align:center">手动提交</th></tr></thead><tbody><tr><td style="text-align:center">速度</td><td style="text-align:center">最快</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">开发成本</td><td style="text-align:center">高</td><td style="text-align:center">低</td><td style="text-align:center">中</td><td style="text-align:center">不需开发</td></tr><tr><td style="text-align:center">可提交量</td><td style="text-align:center">低</td><td style="text-align:center">高</td><td style="text-align:center">高</td><td style="text-align:center">低</td></tr><tr><td style="text-align:center">是否建议提交历史连接</td><td style="text-align:center">否</td><td style="text-align:center">是</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">和其他提交方法是否有冲突</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td><td style="text-align:center">无</td></tr></tbody></table><p><strong>个人推荐同时使用主动推送和 sitemap 方式</strong>，下面将逐一介绍这四种提交方式的具体实现方法</p><hr><h2 id="●-主动推送"><a href="#●-主动推送" class="headerlink" title="● 主动推送"></a><font color="#1BC3FB">● 主动推送</font></h2><p>在博客根目录安装插件 <code>npm install hexo-baidu-url-submit --save</code>，然后在根目录 <code>_config.yml</code> 文件里写入以下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">baidu_url_submit:</span><br><span class="line">  count: 1               # 提交最新的多少个链接</span><br><span class="line">  host: www.itrhx.com    # 在百度站长平台中添加的域名</span><br><span class="line">  token: your_token      # 秘钥</span><br><span class="line">  path: baidu_urls.txt   # 文本文档的地址， 新链接会保存在此文本文档里</span><br></pre></td></tr></table></figure><p>其中的 <code>token</code> 可以在【链接提交】-【自动提交】-【主动推送】下面看到，接口调用地址最后面 <code>token=xxxxx</code> 即为你的 <code>token</code></p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/05.png" alt="05"><br></fancybox><p>同样是在根目录的 <code>_config.yml</code> 文件，大约第 17 行处，url 要改为在百度站长平台添加的域名，也就是你网站的首页地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://www.itrhx.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure><p>最后，加入新的 deployer：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repository:</span><br><span class="line">    github: git@github.com:TRHX/TRHX.github.io.git  # 这是原来的 github 配置</span><br><span class="line">    coding: git@git.dev.tencent.com:TRHX/TRHX.git   # 这是原来的 coding 配置</span><br><span class="line">  branch: master</span><br><span class="line">- type: baidu_url_submitter                         # 这是新加的主动推送</span><br></pre></td></tr></table></figure><p>最后执行 <code>hexo g -d</code> 部署一遍即可实现主动推送，推送成功的标志是：在执行部署命令最后会显示类似如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"remain"</span>:4999953,<span class="string">"success"</span>:47&#125;</span><br><span class="line">INFO  Deploy <span class="keyword">done</span>: baidu_url_submitter</span><br></pre></td></tr></table></figure><p>这表示有 47 个页面已经主动推送成功，remain 的意思是当天剩余的可推送 url 条数</p><p>主动推送相关原理介绍：</p><ul><li>新链接的产生：hexo generate 会产生一个文本文件，里面包含最新的链接</li><li>新链接的提交：hexo deploy 会从上述文件中读取链接，提交至百度搜索引擎</li></ul><p>该插件的 GitHub 地址：<a href="https://github.com/huiwang/hexo-baidu-url-submit" target="_blank" rel="noopener">https://github.com/huiwang/hexo-baidu-url-submit</a></p><hr><h2 id="●-自动推送"><a href="#●-自动推送" class="headerlink" title="● 自动推送"></a><font color="#1BC3FB">● 自动推送</font></h2><p>关于自动推送百度官网给出的解释是：自动推送是百度搜索资源平台为提高站点新增网页发现速度推出的工具，安装自动推送JS代码的网页，在页面被访问时，页面URL将立即被推送给百度</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/06.png" alt="06"><br></fancybox><p>此时要注意，有些 hexo 主题集成了这项功能，比如 next 主题，在 <code>themes\next\layout_scripts\</code> 下有个 <code>baidu_push.swig</code> 文件，我们只需要把如下代码粘贴到该文件，然后在主题配置文件设置 <code>baidu_push: true</code> 即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.baidu_push %&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><p>然而大部分主题是没有集成这项功能的，对于大部分主题来说，我们可以把以下代码粘贴到 <code>head.ejs</code> 文件的 <code>&lt;head&gt;</code> 与 <code>&lt;/head&gt;</code> 标签之间即可，从而实现自动推送（比如我使用的是 <a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material X</a> 主题，那么只需要把代码粘贴到 <code>\themes\material-x\layout\_partial\head.ejs</code> 中即可）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    <span class="keyword">var</span> curProtocol = <span class="built_in">window</span>.location.protocol.split(<span class="string">':'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (curProtocol === <span class="string">'https'</span>) &#123;</span><br><span class="line">        bp.src = <span class="string">'https://zz.bdstatic.com/linksubmit/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        bp.src = <span class="string">'http://push.zhanzhang.baidu.com/push.js'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="●-sitemap"><a href="#●-sitemap" class="headerlink" title="● sitemap"></a><font color="#1BC3FB">● sitemap</font></h2><p>首先我们要使用以下命令生成一个网站地图：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save     </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>这里也注意一下，将根目录的 <code>_config.yml</code> 文件，大约第 17 行处，url 改为在百度站长平台添加的域名，也就是你网站的首页地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">url: https://www.itrhx.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br></pre></td></tr></table></figure><p>然后使用命令 <code>hexo g -d</code> 将网站部署上去，然后访问 <code>你的首页/sitemap.xml</code> 或者 <code>你的首页/baidusitemap.xml</code> 就可以看到网站地图了</p><p>比如我的是：<a href="https://www.itrhx.com/baidusitemap.xml">https://www.itrhx.com/baidusitemap.xml</a> 或者 <a href="https://www.itrhx.com/sitemap.xml">https://www.itrhx.com/sitemap.xml</a></p><p>其中 <code>sitemap.xml</code> 文件是搜索引擎通用的 sitemap 文件，<code>baidusitemap.xml</code> 是百度专用的 sitemap 文件</p><p>然后来到百度站长平台的 sitemap 提交页面，将你的 sitemap 地址提交即可，如果成功的话状态会显示为正常，初次提交要等几分钟，sitemap.xml 相比 baidusitemap.xml 来说等待时间也会更长，如果以后你博客有新的文章或其他页面，可以点击<strong>手动更新文件</strong>，更新一下新的 sitemap</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/07.png" alt="07"><br></fancybox><hr><h2 id="●-手动提交"><a href="#●-手动提交" class="headerlink" title="● 手动提交"></a><font color="#1BC3FB">● 手动提交</font></h2><p>手动提交不需要其他额外操作，直接把需要收录的页面的 url 提交即可，这种方法效率较低，更新较慢，不推荐使用</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/08.png" alt="08"><br></fancybox><hr><h1 id="●-提交谷歌搜索"><a href="#●-提交谷歌搜索" class="headerlink" title="● 提交谷歌搜索"></a><font color="#ff0000">● 提交谷歌搜索</font></h1><p>提交谷歌搜索引擎比较简单，在提交之前，我们依然可以使用 <code>site:域名</code> 查看网站是否被收录，我的网站搭建了有差不多一年了，之前也没提交过收录，不过谷歌爬虫的确是强大，即使没有提交过，现在也能看到有一百多条结果了：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/09.png" alt="09"><br></fancybox><p>接下来我们将网站提交谷歌搜索引擎搜索，进入<a href="https://www.google.com/webmasters/" target="_blank" rel="noopener">谷歌站长平台</a>，登录你的谷歌账号之后会让你验证网站所有权：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/10.png" alt="10"><br></fancybox><p>有两种验证方式，分别是网域和网址前缀，两种资源类型区别如下：</p><table><thead><tr><th></th><th style="text-align:left"><center>网址前缀资源</center></th><th style="text-align:left"><center>网域资源</center></th></tr></thead><tbody><tr><td>说明</td><td style="text-align:left">仅包含具有指定前缀（包括协议 http/https）的网址。如果希望资源匹配任何协议或子网域（http/https/www./m. 等），建议改为添加网域资源。</td><td style="text-align:left">包括所有子网域（m、www 等）和多种协议（http、https、ftp）的网域级资源。</td></tr><tr><td>验证</td><td style="text-align:left">多种类型</td><td style="text-align:left">仅 DNS 记录验证</td></tr><tr><td>示例</td><td style="text-align:left">资源 <a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a><br><br><font color="#ff0000">✔</font> <a href="http://example.com/dresses/1234" target="_blank" rel="noopener">http://example.com/dresses/1234</a><br><font color="#ff0000">X</font> <a href="https://example.com/dresses/1234" target="_blank" rel="noopener">https://example.com/dresses/1234</a><br><font color="#ff0000">X</font> <a href="http://www.example.com/dresses/1234" target="_blank" rel="noopener">http://www.example.com/dresses/1234</a></td><td style="text-align:left">资源 example.com<br><br><font color="#ff0000">✔</font> <a href="http://example.com/dresses/1234" target="_blank" rel="noopener">http://example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="https://example.com/dresses/1234" target="_blank" rel="noopener">https://example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="http://www.example.com/dresses/1234" target="_blank" rel="noopener">http://www.example.com/dresses/1234</a><br><font color="#ff0000">✔</font> <a href="http://support.m.example.com/dresses/1234" target="_blank" rel="noopener">http://support.m.example.com/dresses/1234</a></td></tr></tbody></table><p>由对比可知选择网域资源验证方式比较好，只需要一个域名就可以匹配到多种格式的 URL，之后会给你一个 TXT 的记录值，复制它到你域名 DNS 增加一个 TXT 记录，点击验证即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/11.png" alt="11"><br></fancybox><p>提交谷歌收录比较简单，选择站点地图，将我们之前生成的 sitemap 提交就行了，过几分钟刷新一下看到成功字样表示提交成功！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A48/12.png" alt="12"><br></fancybox>]]></content>
    
    <summary type="html">
    
      网站 SEO 优化，Hexo 博客提交百度、谷歌搜索引擎收录
    
    </summary>
    
      <category term="Hexo" scheme="https://www.itrhx.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.itrhx.com/tags/Hexo/"/>
    
      <category term="SEO" scheme="https://www.itrhx.com/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HTTPS</title>
    <link href="https://www.itrhx.com/2019/09/16/A47-hexo-deployed-to-github-and-coding/"/>
    <id>https://www.itrhx.com/2019/09/16/A47-hexo-deployed-to-github-and-coding/</id>
    <published>2019-09-16T06:11:40.959Z</published>
    <updated>2020-03-14T08:00:06.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>部署到 Coding Pages 的好处：国内访问速度更快，可以提交百度收录（GitHub 禁止了百度的爬取）</p></blockquote><blockquote><p>部署到 Coding Pages 的坏处：就今年来说，Coding 不太稳定，随时有宕机的可能，群里的朋友已经经历过几次了，不过相信以后会越来越稳定的</p></blockquote><blockquote><p>部署过程中常见的问题：无法实现全站 HTTPS，Coding 申请 SSL 证书失败，浏览器可能会提示不是安全链接</p></blockquote><blockquote><p>本文前提：你已经将 Hexo 成功部署到了 GitHub Pages，如果还没有，请参考：<a href="https://blog.csdn.net/qq_36759224/article/details/82121420" target="_blank" rel="noopener">《使用Github Pages和Hexo搭建自己的独立博客【超级详细的小白教程】》</a></p></blockquote><blockquote><p>本文将全面讲述如何成功双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS，同时解决一些常见的问题！</p></blockquote><hr><h1 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a><font color="#ff0000">1.创建项目</font></h1><p>进入 <a href="https://coding.net/" target="_blank" rel="noopener">Coding 官网</a>，点击个人版登陆，没有账号就注册一个并登录，由于 Coding 已经被腾讯收购了，所以登录就会来到腾讯云开发者平台，点击创建项目</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/01.jpg" alt="01"><br></fancybox><p>项目名称建议和你的用户名一致，这样做的好处是：到时候可以直接通过 <code>user_name.coding.me</code> 访问你的博客，如果项目名与用户名不一致，则需要通过 <code>user_name.coding.me/project_name</code> 才能访问，项目描述可以随便写</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/02.jpg" alt="02"><br></fancybox><hr><h1 id="2-配置公钥"><a href="#2-配置公钥" class="headerlink" title="2.配置公钥"></a><font color="#ff0000">2.配置公钥</font></h1><p>配置 SSH 公钥方法与 GitHub Pages 的方式差不多，点击你的头像，依次选择【个人设置】-【SSH公钥】-【新增公钥】</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/03.jpg" alt="03"><br></fancybox><p>前面部署到 GitHub Pages 的时候就已经有了一对公钥，我们直接将该公钥粘贴进去就行，公钥名称可以随便写，选中永久有效选项</p><p>PS：公钥储存位置一般在 <font color="#ff0000">C:\Users\用户名\.ssh</font> 目录下的 <font color="#ff0000">id_rsa.pub</font> 文件里，用记事本打开复制其内容即可</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/04.jpg" alt="04"><br></fancybox><p>添加公钥后，我们可以右键 <code>Get Bash</code>，输入以下命令来检查是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><p>若出现以下提示，则证明配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Coding 提示: Hello XXX, You<span class="string">'ve connected to Coding.net via SSH. This is a personal key.</span></span><br><span class="line"><span class="string">XXX，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-配置-config-yml"><a href="#3-配置-config-yml" class="headerlink" title="3.配置 _config.yml"></a><font color="#ff0000">3.配置 _config.yml</font></h1><p>进入你的项目，在右下角有选择连接方式，选择 SSH 方式（HTTPS 方式也可以，但是这种方式有时候可能连接不上，SSH 连接不容易出问题），一键复制，然后打开你本地博客根目录的 <code>_config.yml</code> 文件，找到 <code>deploy</code> 关键字，添加 coding 地址：<code>coding: git@git.dev.tencent.com:user_name/user_name.git</code>，也就是刚刚复制的 SSH 地址</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/05.jpg" alt="05"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/06.jpg" alt="06"><br></fancybox><p>添加完成后先执行命令 <code>hexo clean</code> 清理一下缓存，然后执行命令 <code>hexo g -d</code> 将博客双线部署到 Coding Pages 和 GitHub Pages，如下图所示表示部署成功：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/13.jpg" alt="13"><br></fancybox><h1 id="4-开启-Coding-Pages"><a href="#4-开启-Coding-Pages" class="headerlink" title="4.开启 Coding Pages"></a><font color="#ff0000">4.开启 Coding Pages</font></h1><p>进入你的项目，在代码栏下选择 Pages 服务，一键开启 Coding Pages，等待几秒后刷新网页即可看到已经开启的 Coding Pages，到目前为止，你就可以通过 xxxx.coding.me（比如我的是 trhx.coding.me）访问你的 Coding Pages 页面了</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/07.jpg" alt="07"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/08.jpg" alt="08"><br></fancybox><h1 id="5-绑定域名并开启-HPPTS"><a href="#5-绑定域名并开启-HPPTS" class="headerlink" title="5.绑定域名并开启 HPPTS"></a><font color="#ff0000">5.绑定域名并开启 HPPTS</font></h1><p>首先在你的域名 DNS 设置中添加一条 <code>CNAME</code> 记录指向 <code>xxxx.coding.me</code>，解析路线选择 <code>默认</code>，将 GitHub 的解析路线改为 <code>境外</code>，这样境外访问就会走 GitHub，境内就会走 Coding，也有人说阿里云是智能解析，自动分配路线，如果解析路线都是默认，境外访问同样会智能选择走 GitHub，境内走 Coding，我没有验证过，有兴趣的可以自己试试，我的解析如下图所示：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/09.jpg" alt="09"><br></fancybox><p>然后点击静态 Pages 应用右上角的设置，进入设置页面，这里要注意，如果你之前已经部署到了 GitHub Pages 并开启了 HTTPS，那么直接在设置页面绑定你自己的域名，SSL/TLS 安全证书就会显示申请错误，如下图所示，没有申请到 SSL 证书，当你访问你的网站时，浏览器就会提示不是安全连接</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/10.jpg" alt="10"><br></fancybox><p>申请错误原因是：在验证域名所有权时会定位到 Github Pages 的主机上导致 SSL 证书申请失败</p><p>正确的做法是：<font color="#ff0000">先去域名 DNS 把 GitHub 的解析暂停掉，然后再重新申请 SSL 证书</font>，大约十秒左右就能申请成功，然后开启强制 HTTPS 访问</p><p>这里也建议同时绑定有 www 前缀和没有 www 前缀的，如果要绑定没有 www 前缀的，首先要去域名 DNS 添加一个 <code>A</code> 记录，主机记录为 <code>@</code>，记录值为你博客 IP 地址，IP 地址可以在 cmd 命令行 ping 一下得到，然后在 Coding Pages 中设置其中一个为【首选】，另一个设置【跳转至首选】，这样不管用户是否输入 www 前缀都会跳到有 www 前缀的了</p><p>在博客资源引用的时候也要注意所有资源的 URL 必须是以 https:// 开头，不然浏览器依旧会提示不安全！</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/13.png" alt="13"><br></fancybox><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/11_1.png" alt="11_1"><br></fancybox><p>至此，我们的 Hexo 博客就成功双线部署到 Coding Pages 和 GitHub Pages 了，并且也实现了全站 HPPTS，最后来一张 GitHub Pages 和 Coding Pages 在国内的速度对比图，可以明显看到速度的提升</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A47/12.jpg" alt="12"><br></fancybox>]]></content>
    
    <summary type="html">
    
      Hexo 双线部署到 Coding Pages 和 GitHub Pages 并实现全站 HPPTS
    
    </summary>
    
      <category term="Hexo" scheme="https://www.itrhx.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://www.itrhx.com/tags/Hexo/"/>
    
      <category term="Coding Pages" scheme="https://www.itrhx.com/tags/Coding-Pages/"/>
    
      <category term="GitHub Pages" scheme="https://www.itrhx.com/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C16</title>
    <link href="https://www.itrhx.com/2019/09/14/A46-Python3-spider-C16/"/>
    <id>https://www.itrhx.com/2019/09/14/A46-Python3-spider-C16/</id>
    <published>2019-09-13T16:44:50.577Z</published>
    <updated>2019-09-24T12:43:19.863Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十六章 —— 【数据储存系列 — Redis】</font></center></blockquote><a id="more"></a><hr><h1 id="【16-1】关于-Redis"><a href="#【16-1】关于-Redis" class="headerlink" title="【16.1】关于 Redis"></a><font color="#ff0000">【16.1】关于 Redis</font></h1><p>Redis 是一个基于内存的高效的键值型（key-value）非关系型数据库，它支持存储的 value 类型非常多，包括 string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合) 和 hash（哈希类型），它的性能十分优越，可以支持每秒十几万此的读/写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，此外，它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。</p><hr><h1 id="【16-2】使用-Redis"><a href="#【16-2】使用-Redis" class="headerlink" title="【16.2】使用 Redis"></a><font color="#ff0000">【16.2】使用 Redis</font></h1><p>首先安装 Redis 和 redis-py 库，管理 Redis 可以使用可视化工具 Redis Desktop Manager，该工具现在收费了，分享个 0.8.8.384 的免费版本</p><p>安装 redis-py 库：<code>pip install redis</code><br>Redis 官网：<a href="https://redis.io" target="_blank" rel="noopener">https://redis.io</a><br>官方文档：<a href="https://redis.io/documentation" target="_blank" rel="noopener">https://redis.io/documentation</a><br>中文官网：<a href="http://www.redis.cn" target="_blank" rel="noopener">http://www.redis.cn</a><br>中文教程：<a href="http://www.runoob.com/redis/redis-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/redis/redis-tutorial.html</a><br>GitHub：<a href="https://github.com/antirez/redis" target="_blank" rel="noopener">https://github.com/antirez/redis</a><br>Redis Windows下载地址一：<a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">https://github.com/microsoftarchive/redis/releases</a> （最新版 3.2.100，似乎不再更新）<br>Redis Windows下载地址二：<a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noopener">https://github.com/tporadowski/redis/releases</a> （最新版）<br>Redis Desktop Manager 官网：<a href="https://redisdesktop.com/" target="_blank" rel="noopener">https://redisdesktop.com/</a><br>Redis Desktop Manager 0.8.8.384 免费版：<a href="https://pan.baidu.com/s/18MKeCqT0MG0hc89jfkpIkA" target="_blank" rel="noopener">https://pan.baidu.com/s/18MKeCqT0MG0hc89jfkpIkA</a> （提取码：3ovc）</p><p>利用 Python 连接 Redis 示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis</span><br><span class="line"></span><br><span class="line">redis = StrictRedis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'000000'</span>)</span><br><span class="line">redis.set(<span class="string">'name'</span>, <span class="string">'TRHX'</span>)</span><br><span class="line">print(redis.get(<span class="string">'name'</span>))</span><br></pre></td></tr></table></figure><p>传入 Redis 的地址、运行端口、使用的数据库和密码， 4 个参数默认值分别为 localhost、6379、0 和 None，声明一个 StrictRedis 对象，调用 set() 方法，设置一个键值对，输出结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b'TRHX'</span></span><br></pre></td></tr></table></figure><p>另外也可以使用 ConnectionPool 来连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool  </span><br><span class="line"></span><br><span class="line">pool = ConnectionPool(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">'000000'</span>)  </span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p>ConnectionPool 也支持通过 URL 来构建：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis://[:password]@host:port/db  <span class="comment"># 创建 Redis TCP 连接</span></span><br><span class="line">rediss://[:password]@host:port/db  <span class="comment"># 创建 Redis TCP+SSL 连接</span></span><br><span class="line">unix://[:password]@/path/to/socket.sock?db=db  # 创建 Redis UNIX socket 连接</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool</span><br><span class="line"></span><br><span class="line">url = <span class="string">'redis://:000000@localhost:6379/0'</span>  </span><br><span class="line">pool = ConnectionPool.from_url(url)  </span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p>以下是有关的键操作、字符串操作、列表操作、集合操作、散列操作的各种方法，记录一下，方便查阅<br>来源：《Python3 网络爬虫开发实战（崔庆才著）》<br>Redis 命令参考：<a href="http://redisdoc.com/" target="_blank" rel="noopener">http://redisdoc.com/</a> 、<a href="http://doc.redisfans.com/" target="_blank" rel="noopener">http://doc.redisfans.com/</a></p><hr><h1 id="【16-3】Key（键）操作"><a href="#【16-3】Key（键）操作" class="headerlink" title="【16.3】Key（键）操作"></a><font color="#ff0000">【16.3】Key（键）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>exists(name)</td><td>判断一个键是否存在</td><td>name：键名</td><td>redis.exists(‘name’)</td><td>是否存在 name 这个键</td><td>True</td></tr><tr><td>delete(name)</td><td>删除一个键</td><td>name：键名</td><td>redis.delete(‘name’)</td><td>删除 name 这个键</td><td>1</td></tr><tr><td>type(name)</td><td>判断键类型</td><td>name：键名</td><td>redis.type(‘name’)</td><td>判断 name 这个键类型</td><td>b’string’</td></tr><tr><td>keys(pattern)</td><td>获取所有符合规则的键</td><td>pattern：匹配规则</td><td>redis.keys(‘n*’)</td><td>获取所有以 n 开头的键</td><td>[b’name’]</td></tr><tr><td>randomkey()</td><td>获取随机的一个键</td><td></td><td>randomkey()</td><td>获取随机的一个键</td><td>b’name’</td></tr><tr><td>rename(src, dst)</td><td>重命名键</td><td>src：原键名；dst：新键名</td><td>redis.rename(‘name’, ‘nickname’)</td><td>将 name 重命名为 nickname</td><td>True</td></tr><tr><td>dbsize()</td><td>获取当前数据库中键的数目</td><td></td><td>dbsize()</td><td>获取当前数据库中键的数目</td><td>100</td></tr><tr><td>expire(name, time)</td><td>设定键的过期时间，单位为秒</td><td>name：键名；time：秒数</td><td>redis.expire(‘name’, 2)</td><td>将 name 键的过期时间设置为 2 秒</td><td>True</td></tr><tr><td>ttl(name)</td><td>获取键的过期时间，单位为秒，-1 表示永久不过期</td><td>name：键名</td><td>redis.ttl(‘name’)</td><td>获取 name 这个键的过期时间</td><td>-1</td></tr><tr><td>move(name, db)</td><td>将键移动到其他数据库</td><td>name：键名；db：数据库代号</td><td>move(‘name’, 2)</td><td>将 name 移动到 2 号数据库</td><td>True</td></tr><tr><td>flushdb()</td><td>删除当前选择数据库中的所有键</td><td></td><td>flushdb()</td><td>删除当前选择数据库中的所有键</td><td>True</td></tr><tr><td>flushall()</td><td>删除所有数据库中的所有键</td><td></td><td>flushall()</td><td>删除所有数据库中的所有键</td><td>True</td></tr></tbody></table><hr><h1 id="【16-4】String（字符串）操作"><a href="#【16-4】String（字符串）操作" class="headerlink" title="【16.4】String（字符串）操作"></a><font color="#ff0000">【16.4】String（字符串）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>set(name, value)</td><td>给数据库中键名为 name 的 string 赋予值 value</td><td>name：键名；value：值</td><td>redis.set(‘name’, ‘Bob’)</td><td>给 name 这个键的 value 赋值为 Bob</td><td>True</td></tr><tr><td>get(name)</td><td>返回数据库中键名为 name 的 string 的 value</td><td>name：键名</td><td>redis.get(‘name’)</td><td>返回 name 这个键的 value</td><td>b’Bob’</td></tr><tr><td>getset(name, value)</td><td>给数据库中键名为 name 的 string 赋予值 value 并返回上次的 value</td><td>name：键名；value：新值</td><td>redis.getset(‘name’, ‘Mike’)</td><td>赋值 name 为 Mike 并得到上次的 value</td><td>b’Bob’</td></tr><tr><td>mget(keys, *args)</td><td>返回多个键对应的 value 组成的列表</td><td>keys：键名序列</td><td>redis.mget([‘name’, ‘nickname’])</td><td>返回 name 和 nickname 的 value</td><td>[b’Mike’, b’Miker’]</td></tr><tr><td>setnx(name, value)</td><td>如果不存在这个键值对，则更新 value，否则不变</td><td>name：键名</td><td>redis.setnx(‘newname’, ‘James’)</td><td>如果 newname 这个键不存在，则设置值为 James</td><td>第一次运行结果是 True，第二次运行结果是 False</td></tr><tr><td>setex(name, time, value)</td><td>设置可以对应的值为 string 类型的 value，并指定此键值对应的有效期</td><td>name：键名；time：有效期；value：值</td><td>redis.setex(‘name’, 1, ‘James’)</td><td>将 name 这个键的值设为 James，有效期为 1 秒</td><td>True</td></tr><tr><td>setrange(name, offset, value)</td><td>设置指定键的 value 值的子字符串</td><td>name：键名；offset：偏移量；value：值</td><td>redis.set(‘name’, ‘Hello’) redis.setrange (‘name’, 6, ‘World’)</td><td>设置 name 为 Hello 字符串，并在 index 为 6 的位置补 World</td><td>11，修改后的字符串长度</td></tr><tr><td>mset(mapping)</td><td>批量赋值</td><td>mapping：字典或关键字参数</td><td>redis.mset({‘name1’: ‘Durant’, ‘name2’: ‘James’})</td><td>将 name1 设为 Durant，name2 设为 James</td><td>True</td></tr><tr><td>msetnx(mapping)</td><td>键均不存在时才批量赋值</td><td>mapping：字典或关键字参数</td><td>redis.msetnx({‘name3’: ‘Smith’, ‘name4’: ‘Curry’})</td><td>在 name3 和 name4 均不存在的情况下才设置二者值</td><td>True</td></tr><tr><td>incr(name, amount=1)</td><td>键名为 name 的 value 增值操作，默认为 1，键不存在则被创建并设为 amount</td><td>name：键名；amount：增长的值</td><td>redis.incr(‘age’, 1)</td><td>age 对应的值增 1，若不存在，则会创建并设置为 1</td><td>1，即修改后的值</td></tr><tr><td>decr(name, amount=1)</td><td>键名为 name 的 value 减值操作，默认为 1，键不存在则被创建并将 value 设置为 - amount</td><td>name：键名；amount：减少的值</td><td>redis.decr(‘age’, 1)</td><td>age 对应的值减 1，若不存在，则会创建并设置为-1</td><td>-1，即修改后的值</td></tr><tr><td>append(key, value)</td><td>键名为 key 的 string 的值附加 value</td><td>key：键名</td><td>redis.append(‘nickname’, ‘OK’)</td><td>向键名为 nickname 的值后追加 OK</td><td>13，即修改后的字符串长度</td></tr><tr><td>substr(name, start, end=-1)</td><td>返回键名为 name 的 string 的子字符串</td><td>name：键名；start：起始索引；end：终止索引，默认为-1，表示截取到末尾</td><td>redis.substr(‘name’, 1, 4)</td><td>返回键名为 name 的值的字符串，截取索引为 1~4 的字符</td><td>b’ello’</td></tr><tr><td>getrange(key, start, end)</td><td>获取键的 value 值从 start 到 end 的子字符串</td><td>key：键名；start：起始索引；end：终止索引</td><td>redis.getrange(‘name’, 1, 4)</td><td>返回键名为 name 的值的字符串，截取索引为 1~4 的字符</td><td>b’ello</td></tr></tbody></table><hr><h1 id="【16-5】Hash（哈希表）操作"><a href="#【16-5】Hash（哈希表）操作" class="headerlink" title="【16.5】Hash（哈希表）操作"></a><font color="#ff0000">【16.5】Hash（哈希表）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>hset(name, key, value)</td><td>向键名为 name 的散列表中添加映射</td><td>name：键名；key：映射键名；value：映射键值</td><td>hset(‘price’, ‘cake’, 5)</td><td>向键名为 price 的散列表中添加映射关系，cake 的值为 5</td><td>1，即添加的映射个数</td></tr><tr><td>hsetnx(name, key, value)</td><td>如果映射键名不存在，则向键名为 name 的散列表中添加映射</td><td>name：键名；key：映射键名；value：映射键值</td><td>hsetnx(‘price’, ‘book’, 6)</td><td>向键名为 price 的散列表中添加映射关系，book 的值为 6</td><td>1，即添加的映射个数</td></tr><tr><td>hget(name, key)</td><td>返回键名为 name 的散列表中 key 对应的值</td><td>name：键名；key：映射键名</td><td>redis.hget(‘price’, ‘cake’)</td><td>获取键名为 price 的散列表中键名为 cake 的值</td><td>5</td></tr><tr><td>hmget(name, keys, *args)</td><td>返回键名为 name 的散列表中各个键对应的值</td><td>name：键名；keys：键名序列</td><td>redis.hmget(‘price’, [‘apple’, ‘orange’])</td><td>获取键名为 price 的散列表中 apple 和 orange 的值</td><td>[b’3’, b’7’]</td></tr><tr><td>hmset(name, mapping)</td><td>向键名为 name 的散列表中批量添加映射</td><td>name：键名；mapping：映射字典</td><td>redis.hmset(‘price’, {‘banana’: 2, ‘pear’: 6})</td><td>向键名为 price 的散列表中批量添加映射</td><td>True</td></tr><tr><td>hincrby(name, key, amount=1)</td><td>将键名为 name 的散列表中映射的值增加 amount</td><td>name：键名；key：映射键名；amount：增长量</td><td>redis.hincrby(‘price’, ‘apple’, 3)</td><td>key 为 price 的散列表中 apple 的值增加 3</td><td>6，修改后的值</td></tr><tr><td>hexists(name, key)</td><td>键名为 name 的散列表中是否存在键名为键的映射</td><td>name：键名；key：映射键名</td><td>redis.hexists(‘price’, ‘banana’)</td><td>键名为 price 的散列表中 banana 的值是否存在</td><td>True</td></tr><tr><td>hdel(name, *keys)</td><td>在键名为 name 的散列表中，删除键名为键的映射</td><td>name：键名；keys：键名序列</td><td>redis.hdel(‘price’, ‘banana’)</td><td>从键名为 price 的散列表中删除键名为 banana 的映射</td><td>True</td></tr><tr><td>hlen(name)</td><td>从键名为 name 的散列表中获取映射个数</td><td>name：键名</td><td>redis.hlen(‘price’)</td><td>从键名为 price 的散列表中获取映射个数</td><td>6</td></tr><tr><td>hkeys(name)</td><td>从键名为 name 的散列表中获取所有映射键名</td><td>name：键名</td><td>redis.hkeys(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键名</td><td>[b’cake’, b’book’, b’banana’, b’pear’]</td></tr><tr><td>hvals(name)</td><td>从键名为 name 的散列表中获取所有映射键值</td><td>name：键名</td><td>redis.hvals(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键值</td><td>[b’5’, b’6’, b’2’, b’6’]</td></tr><tr><td>hgetall(name)</td><td>从键名为 name 的散列表中获取所有映射键值对</td><td>name：键名</td><td>redis.hgetall(‘price’)</td><td>从键名为 price 的散列表中获取所有映射键值对</td><td>{b’cake’: b’5’, b’book’: b’6’, b’orange’: b’7’, b’pear’: b’6’}</td></tr></tbody></table><hr><h1 id="【16-6】List（列表）操作"><a href="#【16-6】List（列表）操作" class="headerlink" title="【16.6】List（列表）操作"></a><font color="#ff0000">【16.6】List（列表）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>rpush(name, *values)</td><td>在键名为 name 的列表末尾添加值为 value 的元素，可以传多个</td><td>name：键名；values：值</td><td>redis.rpush(‘list’, 1, 2, 3)</td><td>向键名为 list 的列表尾添加 1、2、3</td><td>3，列表大小</td></tr><tr><td>lpush(name, *values)</td><td>在键名为 name 的列表头添加值为 value 的元素，可以传多个</td><td>name：键名；values：值</td><td>redis.lpush(‘list’, 0)</td><td>向键名为 list 的列表头部添加 0</td><td>4，列表大小</td></tr><tr><td>llen(name)</td><td>返回键名为 name 的列表的长度</td><td>name：键名</td><td>redis.llen(‘list’)</td><td>返回键名为 list 的列表的长度</td><td>4</td></tr><tr><td>lrange(name, start, end)</td><td>返回键名为 name 的列表中 start 至 end 之间的元素</td><td>name：键名；start：起始索引；end：终止索引</td><td>redis.lrange(‘list’, 1, 3)</td><td>返回起始索引为 1 终止索引为 3 的索引范围对应的列表</td><td>[b’3’, b’2’, b’1’]</td></tr><tr><td>ltrim(name, start, end)</td><td>截取键名为 name 的列表，保留索引为 start 到 end 的内容</td><td>name：键名；start：起始索引；end：终止索引</td><td>ltrim(‘list’, 1, 3)</td><td>保留键名为 list 的索引为 1 到 3 的元素</td><td>True</td></tr><tr><td>lindex(name, index)</td><td>返回键名为 name 的列表中 index 位置的元素</td><td>name：键名；index：索引</td><td>redis.lindex(‘list’, 1)</td><td>返回键名为 list 的列表索引为 1 的元素</td><td>b’2’</td></tr><tr><td>lset(name, index, value)</td><td>给键名为 name 的列表中 index 位置的元素赋值，越界则报错</td><td>name：键名；index：索引位置；value：值</td><td>redis.lset(‘list’, 1, 5)</td><td>将键名为 list 的列表中索引为 1 的位置赋值为 5</td><td>True</td></tr><tr><td>lrem(name, count, value)</td><td>删除 count 个键的列表中值为 value 的元素</td><td>name：键名；count：删除个数；value：值</td><td>redis.lrem(‘list’, 2, 3)</td><td>将键名为 list 的列表删除两个 3</td><td>1，即删除的个数</td></tr><tr><td>lpop(name)</td><td>返回并删除键名为 name 的列表中的首元素</td><td>name：键名</td><td>redis.lpop(‘list’)</td><td>返回并删除名为 list 的列表中的第一个元素</td><td>b’5’</td></tr><tr><td>rpop(name)</td><td>返回并删除键名为 name 的列表中的尾元素</td><td>name：键名</td><td>redis.rpop(‘list’)</td><td>返回并删除名为 list 的列表中的最后一个元素</td><td>b’2’</td></tr><tr><td>blpop(keys, timeout=0)</td><td>返回并删除名称在 keys 中的 list 中的首个元素，如果列表为空，则会一直阻塞等待</td><td>keys：键名序列；timeout：超时等待时间，0 为一直等待</td><td>redis.blpop(‘list’)</td><td>返回并删除键名为 list 的列表中的第一个元素</td><td>[b’5’]</td></tr><tr><td>brpop(keys, timeout=0)</td><td>返回并删除键名为 name 的列表中的尾元素，如果 list 为空，则会一直阻塞等待</td><td>keys：键名序列；timeout：超时等待时间，0 为一直等待</td><td>redis.brpop(‘list’)</td><td>返回并删除名为 list 的列表中的最后一个元素</td><td>[b’2’]</td></tr><tr><td>rpoplpush(src, dst)</td><td>返回并删除名称为 src 的列表的尾元素，并将该元素添加到名称为 dst 的列表头部</td><td>src：源列表的键；dst：目标列表的 key</td><td>redis.rpoplpush(‘list’, ‘list2’)</td><td>将键名为 list 的列表尾元素删除并将其添加到键名为 list2 的列表头部，然后返回</td><td>b’2’</td></tr></tbody></table><hr><h1 id="【16-7】Set（集合）操作"><a href="#【16-7】Set（集合）操作" class="headerlink" title="【16.7】Set（集合）操作"></a><font color="#ff0000">【16.7】Set（集合）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>sadd(name, *values)</td><td>向键名为 name 的集合中添加元素</td><td>name：键名；values：值，可为多个</td><td>redis.sadd(‘tags’, ‘Book’, ‘Tea’, ‘Coffee’)</td><td>向键名为 tags 的集合中添加 Book、Tea 和 Coffee 这 3 个内容</td><td>3，即插入的数据个数</td></tr><tr><td>srem(name, *values)</td><td>从键名为 name 的集合中删除元素</td><td>name：键名；values：值，可为多个</td><td>redis.srem(‘tags’, ‘Book’)</td><td>从键名为 tags 的集合中删除 Book</td><td>1，即删除的数据个数</td></tr><tr><td>spop(name)</td><td>随机返回并删除键名为 name 的集合中的一个元素</td><td>name：键名</td><td>redis.spop(‘tags’)</td><td>从键名为 tags 的集合中随机删除并返回该元素</td><td>b’Tea’</td></tr><tr><td>smove(src, dst, value)</td><td>从 src 对应的集合中移除元素并将其添加到 dst 对应的集合中</td><td>src：源集合；dst：目标集合；value：元素值</td><td>redis.smove(‘tags’, ‘tags2’, ‘Coffee’)</td><td>从键名为 tags 的集合中删除元素 Coffee 并将其添加到键为 tags2 的集合</td><td>True</td></tr><tr><td>scard(name)</td><td>返回键名为 name 的集合的元素个数</td><td>name：键名</td><td>redis.scard(‘tags’)</td><td>获取键名为 tags 的集合中的元素个数</td><td>3</td></tr><tr><td>sismember(name, value)</td><td>测试 member 是否是键名为 name 的集合的元素</td><td>name：键值</td><td>redis.sismember(‘tags’, ‘Book’)</td><td>判断 Book 是否是键名为 tags 的集合元素</td><td>True</td></tr><tr><td>sinter(keys, *args)</td><td>返回所有给定键的集合的交集</td><td>keys：键名序列</td><td>redis.sinter([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的交集</td><td>{b’Coffee’}</td></tr><tr><td>sinterstore(dest, keys, *args)</td><td>求交集并将交集保存到 dest 的集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sinterstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的交集并将其保存为 inttag</td><td>1</td></tr><tr><td>sunion(keys, *args)</td><td>返回所有给定键的集合的并集</td><td>keys：键名序列</td><td>redis.sunion([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的并集</td><td>{b’Coffee’, b’Book’, b’Pen’}</td></tr><tr><td>sunionstore(dest, keys, *args)</td><td>求并集并将并集保存到 dest 的集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sunionstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的并集并将其保存为 inttag</td><td>3</td></tr><tr><td>sdiff(keys, *args)</td><td>返回所有给定键的集合的差集</td><td>keys：键名序列</td><td>redis.sdiff([‘tags’, ‘tags2’])</td><td>返回键名为 tags 的集合和键名为 tags2 的集合的差集</td><td>{b’Book’, b’Pen’}</td></tr><tr><td>sdiffstore(dest, keys, *args)</td><td>求差集并将差集保存到 dest 集合</td><td>dest：结果集合；keys：键名序列</td><td>redis.sdiffstore (‘inttag’, [‘tags’, ‘tags2’])</td><td>求键名为 tags 的集合和键名为 tags2 的集合的差集并将其保存为 inttag</td><td>3</td></tr><tr><td>smembers(name)</td><td>返回键名为 name 的集合的所有元素</td><td>name：键名</td><td>redis.smembers(‘tags’)</td><td>返回键名为 tags 的集合的所有元素</td><td>{b’Pen’, b’Book’, b’Coffee’}</td></tr><tr><td>srandmember(name)</td><td>随机返回键名为 name 的集合中的一个元素，但不删除元素</td><td>name：键值</td><td>redis.srandmember(‘tags’)</td><td>随机返回键名为 tags 的集合中的一个元素</td><td>Srandmember (name)</td></tr></tbody></table><hr><h1 id="【16-8】SortedSet（有序集合）操作"><a href="#【16-8】SortedSet（有序集合）操作" class="headerlink" title="【16.8】SortedSet（有序集合）操作"></a><font color="#ff0000">【16.8】SortedSet（有序集合）操作</font></h1><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>zadd(name, args, *kwargs)</td><td>向键名为 name 的 zset 中添加元素 member，score 用于排序。如果该元素存在，则更新其顺序</td><td>name：键名；args：可变参数</td><td>redis.zadd(‘grade’, 100, ‘Bob’, 98, ‘Mike’)</td><td>向键名为 grade 的 zset 中添加 Bob（其 score 为 100），并添加 Mike（其 score 为 98）</td><td>2，即添加的元素个数</td></tr><tr><td>zrem(name, *values)</td><td>删除键名为 name 的 zset 中的元素</td><td>name：键名；values：元素</td><td>redis.zrem(‘grade’, ‘Mike’)</td><td>从键名为 grade 的 zset 中删除 Mike</td><td>1，即删除的元素个数</td></tr><tr><td>zincrby(name, value, amount=1)</td><td>如果在键名为 name 的 zset 中已经存在元素 value，则将该元素的 score 增加 amount；否则向该集合中添加该元素，其 score 的值为 amount</td><td>name：键名；value：元素；amount：增长的 score 值</td><td>redis.zincrby(‘grade’, ‘Bob’, -2)</td><td>键名为 grade 的 zset 中 Bob 的 score 减 2</td><td>98.0，即修改后的值</td></tr><tr><td>zrank(name, value)</td><td>返回键名为 name 的 zset 中元素的排名，按 score 从小到大排序，即名次</td><td>name：键名；value：元素值</td><td>redis.zrank(‘grade’, ‘Amy’)</td><td>得到键名为 grade 的 zset 中 Amy 的排名</td><td>1</td></tr><tr><td>zrevrank(name, value)</td><td>返回键为 name 的 zset 中元素的倒数排名（按 score 从大到小排序），即名次</td><td>name：键名；value：元素值</td><td>redis.zrevrank (‘grade’, ‘Amy’)</td><td>得到键名为 grade 的 zset 中 Amy 的倒数排名</td><td>2</td></tr><tr><td>zrevrange(name, start, end, withscores= False)</td><td>返回键名为 name 的 zset（按 score 从大到小排序）中 index 从 start 到 end 的所有元素</td><td>name：键值；start：开始索引；end：结束索引；withscores：是否带 score</td><td>redis.zrevrange (‘grade’, 0, 3)</td><td>返回键名为 grade 的 zset 中前四名元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zrangebyscore (name, min, max, start=None, num=None, withscores=False)</td><td>返回键名为 name 的 zset 中 score 在给定区间的元素</td><td>name：键名；min：最低 score；max：最高 score；start：起始索引；num：个数；withscores：是否带 score</td><td>redis.zrangebyscore (‘grade’, 80, 95)</td><td>返回键名为 grade 的 zset 中 score 在 80 和 95 之间的元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zcount(name, min, max)</td><td>返回键名为 name 的 zset 中 score 在给定区间的数量</td><td>name：键名；min：最低 score；max：最高 score</td><td>redis.zcount(‘grade’, 80, 95)</td><td>返回键名为 grade 的 zset 中 score 在 80 到 95 的元素个数</td><td>2</td></tr><tr><td>zcard(name)</td><td>返回键名为 name 的 zset 的元素个数</td><td>name：键名</td><td>redis.zcard(‘grade’)</td><td>获取键名为 grade 的 zset 中元素的个数</td><td>3</td></tr><tr><td>zremrangebyrank (name, min, max)</td><td>删除键名为 name 的 zset 中排名在给定区间的元素</td><td>name：键名；min：最低位次；max：最高位次</td><td>redis.zremrangebyrank (‘grade’, 0, 0)</td><td>删除键名为 grade 的 zset 中排名第一的元素</td><td>1，即删除的元素个数</td></tr><tr><td>zremrangebyscore (name, min, max)</td><td>删除键名为 name 的 zset 中 score 在给定区间的元素</td><td>name：键名；min：最低 score；max：最高 score</td><td>redis.zremrangebyscore (‘grade’, 80, 90)</td><td>删除 score 在 80 到 90 之间的元素</td><td>1，即删除的元素个数</td></tr></tbody></table><hr><h1 id="【16-9】RedisDump"><a href="#【16-9】RedisDump" class="headerlink" title="【16.9】RedisDump"></a><font color="#ff0000">【16.9】RedisDump</font></h1><p>RedisDump 是 Redis 一个数据导入导出工具，是基于 Ruby 实现的，首先访问 Ruby 官网安装对应操作系统的 Ruby：<a href="http://www.ruby-lang.org/zh_cn/downloads/" target="_blank" rel="noopener">http://www.ruby-lang.org/zh_cn/downloads/</a> ，安装完成即可使用 gem 命令，该命令类似于 Python 当中的 pip 命令，使用 <code>gem install redis-dump</code> 即可完成 RedisDump 的安装，安装完成后就可以使用导出数据 <code>redis-dump</code> 命令和导入数据 <code>redis-load</code> 命令了</p><hr><h2 id="【16-9-1】导出数据-redis-dump"><a href="#【16-9-1】导出数据-redis-dump" class="headerlink" title="【16.9.1】导出数据 redis-dump"></a><font color="#1BC3FB">【16.9.1】导出数据 redis-dump</font></h2><p>在命令行输入 <code>redis-dump -h</code> 可以查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Usage: E:/Ruby26-x64/bin/redis-dump [global options] COMMAND [command options]</span><br><span class="line">    -u, --uri=S                      Redis URI (e.g. redis://hostname[:port])</span><br><span class="line">    -d, --database=S                 Redis database (e.g. -d 15)</span><br><span class="line">    -a, --password=S                 Redis password (e.g. -a 'my@pass/word')</span><br><span class="line">    -s, --sleep=S                    Sleep for S seconds after dumping (for debugging)</span><br><span class="line">    -c, --count=S                    Chunk size (default: 10000)</span><br><span class="line">    -f, --filter=S                   Filter selected keys (passed directly to redis' KEYS command)</span><br><span class="line">    -b, --base64                     Encode key values as base64 (useful for binary values)</span><br><span class="line">    -O, --without_optimizations      Disable run time optimizations</span><br><span class="line">    -V, --version                    Display version</span><br><span class="line">    -D, --debug</span><br><span class="line">        --nosafe</span><br></pre></td></tr></table></figure><p>命令解释：</p><ul><li>-u Redis 连接字符串</li><li>-d 数据库代号</li><li>-a 数据库密码</li><li>-s 导出之后的休眠时间</li><li>-c 分块大小，默认是 10000</li><li>-f 导出时的过滤器</li><li>-b 将键值编码为 base64（对二进制值有用）</li><li>-O 禁用运行时优化</li><li>-V 显示版本</li><li>-D 开启调试</li></ul><p>导出数据示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis-dump</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定端口</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定端口和密码</span></span><br><span class="line">redis-dump -u :password@127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出指定数据库</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379 -d 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出包含特定值的数据</span></span><br><span class="line">redis-dump -u 127.0.0.1:6379 -f age</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 导出所有数据</span></span><br><span class="line">&#123;"db":0,"key":"name5","ttl":-1,"type":"string","value":"DDD","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name2","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name4","ttl":-1,"type":"string","value":"CCC","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name6","ttl":-1,"type":"string","value":"CCC","size":3&#125;</span><br><span class="line">&#123;"db":0,"key":"name","ttl":-1,"type":"string","value":"TRHX","size":4&#125;</span><br><span class="line">&#123;"db":0,"key":"name3","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":1,"key":"name2","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":1,"key":"name1","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":2,"key":"name2","ttl":-1,"type":"string","value":"BBB","size":3&#125;</span><br><span class="line">&#123;"db":2,"key":"name1","ttl":-1,"type":"string","value":"AAA","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name2","ttl":-1,"type":"string","value":"HHH","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name1","ttl":-1,"type":"string","value":"RRR","size":3&#125;</span><br><span class="line">&#123;"db":4,"key":"age","ttl":-1,"type":"string","value":"20","size":2&#125;</span><br><span class="line">&#123;"db":4,"key":"age2","ttl":-1,"type":"string","value":"19","size":2&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出 3 号数据库</span></span><br><span class="line">&#123;"db":3,"key":"name2","ttl":-1,"type":"string","value":"HHH","size":3&#125;</span><br><span class="line">&#123;"db":3,"key":"name1","ttl":-1,"type":"string","value":"RRR","size":3&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 导出 key 包含 age 的数据</span></span><br><span class="line">&#123;"db":4,"key":"age","ttl":-1,"type":"string","value":"20","size":2&#125;</span><br><span class="line">&#123;"db":4,"key":"age2","ttl":-1,"type":"string","value":"19","size":2&#125;</span><br></pre></td></tr></table></figure><p>导出所有数据为 JSON 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 &gt; db_full.json</span><br></pre></td></tr></table></figure><p>该命令将会在当前目录生成一个名为 db_full.json 的文件，文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name5"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"DDD"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name4"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name6"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"TRHX"</span>,<span class="attr">"size"</span>:<span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name3"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"HHH"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"RRR"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"20"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"19"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>使用参数 -d 指定某个数据库的所有数据导出为 JSON 文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 -d 4 &gt; db_db4.json</span><br></pre></td></tr></table></figure><p>该命令会将 4 号数据库的数据导出到 db_db4.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"20"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">4</span>,<span class="attr">"key"</span>:<span class="string">"age2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"19"</span>,<span class="attr">"size"</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>使用参数 -f 过滤数据，只导出特定的数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-dump -u 127.0.0.1:6379 -f name &gt; db_name.json</span><br></pre></td></tr></table></figure><p>该命令会导出 key 包含 name 的数据到 db_name.json 文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name5"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"DDD"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name4"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name6"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"CCC"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"TRHX"</span>,<span class="attr">"size"</span>:<span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">0</span>,<span class="attr">"key"</span>:<span class="string">"name3"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">1</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"BBB"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">2</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"AAA"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name2"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"HHH"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="attr">"db"</span>:<span class="number">3</span>,<span class="attr">"key"</span>:<span class="string">"name1"</span>,<span class="attr">"ttl"</span>:<span class="number">-1</span>,<span class="attr">"type"</span>:<span class="string">"string"</span>,<span class="attr">"value"</span>:<span class="string">"RRR"</span>,<span class="attr">"size"</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="【16-9-2】导入数据-redis-load"><a href="#【16-9-2】导入数据-redis-load" class="headerlink" title="【16.9.2】导入数据 redis-load"></a><font color="#1BC3FB">【16.9.2】导入数据 redis-load</font></h2><p>在命令行输入 <code>redis-load -h</code> 可以查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis-load --help  </span><br><span class="line">  Try: redis-load [global options] COMMAND [command options]   </span><br><span class="line">    -u, --uri=S                      Redis URI (e.g. redis://hostname[:port])  </span><br><span class="line">    -d, --database=S                 Redis database (e.g. -d 15)  </span><br><span class="line">    -s, --sleep=S                    Sleep for S seconds after dumping (for debugging)  </span><br><span class="line">    -n, --no_check_utf8  </span><br><span class="line">    -V, --version                    Display version  </span><br><span class="line">    -D, --debug  </span><br><span class="line">        --nosafe</span><br></pre></td></tr></table></figure><p>命令解释：</p><ul><li>-u Redis 连接字符串</li><li>-d 数据库代号，默认是全部</li><li>-s 导出之后的休眠时间</li><li>-n 不检测 UTF-8 编码</li><li>-V 显示版本</li><li>-D 开启调试</li></ul><p>导入示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件所有内容导入到数据库</span></span><br><span class="line">&lt; test.json redis-load -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件 db 值为 6 的数据导入到数据库 </span></span><br><span class="line">&lt; test.json redis-load -u 127.0.0.1:6379 -d 6</span><br></pre></td></tr></table></figure><p>另外，以下方法也能导入数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件所有内容导入到数据库</span></span><br><span class="line">cat test.json | redis-load -u 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 test.json 文件 db 值为 6 的数据导入到数据库 </span></span><br><span class="line">cat test.json | redis-load -u 127.0.0.1:6379 -d 6</span><br></pre></td></tr></table></figure><p>注意：<code>cat</code> 是 Linux 系统专有的命令，在 Windows 系统里没有 <code>cat</code> 这个命令，可以使用 Windows 批处理命令 <code>type</code> 代替 <code>cat</code></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十六章 —— 【数据储存系列 — Redis】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Redis" scheme="https://www.itrhx.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C15</title>
    <link href="https://www.itrhx.com/2019/09/10/A45-Python3-spider-C15/"/>
    <id>https://www.itrhx.com/2019/09/10/A45-Python3-spider-C15/</id>
    <published>2019-09-10T11:46:13.293Z</published>
    <updated>2019-09-24T12:41:02.822Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十五章 —— 【代理的基本使用】</font></center></blockquote><a id="more"></a><hr><h1 id="【15-1】代理初识"><a href="#【15-1】代理初识" class="headerlink" title="【15.1】代理初识"></a><font color="#ff0000">【15.1】代理初识</font></h1><p>大多数网站都有反爬虫机制，如果一段时间内同一个 IP 发送的请求过多，服务器就会拒绝访问，直接禁封该 IP，此时，设置代理即可解决这个问题，网络上有许多免费代理和付费代理，比如<a href="https://www.xicidaili.com/" target="_blank" rel="noopener">西刺代理</a>，<a href="http://www.goubanjia.com/" target="_blank" rel="noopener">全网代理 IP</a>，<a href="https://www.kuaidaili.com/" target="_blank" rel="noopener">快代理</a>等，设置代理需要用到的就是代理 IP 地址和端口号，如果电脑上装有代理软件（例如：酸酸乳SSR），软件一般会在本机创建 HTTP 或 SOCKS 代理服务，直接使用此代理也可以</p><h1 id="【15-2】urllib-库使用代理"><a href="#【15-2】urllib-库使用代理" class="headerlink" title="【15.2】urllib 库使用代理"></a><font color="#ff0000">【15.2】urllib 库使用代理</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.open(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><p><a href="http://httpbin.org/get" target="_blank" rel="noopener">http://httpbin.org/get</a> 是一个请求测试站点，借助 ProxyHandler 设置代理，参数为字典类型，键名为协议类型，键值为代理，代理的写法：<code>proxy = &#39;127.0.0.1:1080&#39;</code>，其中 127.0.0.1 为 IP 地址，1080 为端口号，这里表示本机的代理软件已经在本地 1080 端口创建了代理服务，代理前面需要加上 http 或者 https 协议，当请求的链接为 http 协议时，ProxyHandler 会自动调用 http 代理，同理，当请求的链接为 https 协议时，ProxyHandler 会自动调用 https 代理，<code>build_opener()</code> 方法传入 ProxyHandler 对象来创建一个 opener，调用 <code>open()</code> 方法传入一个 url 即可通过代理访问该链接，运行结果为一个 JSON，origin 字段为此时客户端的 IP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"identity"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Python-urllib/3.6"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是需要认证的代理，只需要在代理前面加入代理认证的用户名密码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> ProxyHandler, build_opener</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'username:password@127.0.0.1:1080'</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line">opener = build_opener(proxy_handler)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = opener.open(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><p>如果代理是 SOCKS5 类型，需要用到 <code>socks</code> 模块，设置代理方法如下：</p><blockquote><p>扩展：SOCKS5 是一个代理协议，它在使用TCP/IP协议通讯的前端机器和服务器机器之间扮演一个中介角色，使得内部网中的前端机器变得能够访问 Internet 网中的服务器，或者使通讯更加安全</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> URLError</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">'127.0.0.1'</span>, <span class="number">1080</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br></pre></td></tr></table></figure><h1 id="【15-3】requests-库使用代理"><a href="#【15-3】requests-库使用代理" class="headerlink" title="【15.3】requests 库使用代理"></a><font color="#ff0000">【15.3】requests 库使用代理</font></h1><p>requests 库使用代理只需要传入 proxies 参数即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxies = (&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"*/*"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"python-requests/2.22.0"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的，如果是需要认证的代理，也只需要在代理前面加入代理认证的用户名密码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'username:password@127.0.0.1:1080'</span></span><br><span class="line">proxies = (&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'http://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'https://'</span> + proxy</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ChunkedEncodingError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>如果代理是 SOCKS5 类型，需要用到  <code>requests[socks]</code> 模块或者 <code>socks</code> 模块，使用 <code>requests[socks]</code> 模块时设置代理方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'socks5://'</span> + proxy,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'socks5://'</span> + proxy</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>, proxies=proxies)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><p>使用 <code>socks</code> 模块时设置代理方法如下（此类方法为全局设置）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">socks.set_default_proxy(socks.SOCKS5, <span class="string">'127.0.0.1'</span>, <span class="number">1080</span>)</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">    print(response.text)</span><br><span class="line"><span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'Error'</span>, e.args)</span><br></pre></td></tr></table></figure><h1 id="【15-4】Selenium-使用代理"><a href="#【15-4】Selenium-使用代理" class="headerlink" title="【15.4】Selenium 使用代理"></a><font color="#ff0000">【15.4】Selenium 使用代理</font></h1><h2 id="【15-4-1】Chrome"><a href="#【15-4-1】Chrome" class="headerlink" title="【15.4.1】Chrome"></a><font color="#1BC3FB">【15.4.1】Chrome</font></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">proxy = <span class="string">'127.0.0.1:1080'</span></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--proxy-server=http://'</span> + proxy)</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>通过 ChromeOptions 来设置代理，在创建 Chrome 对象的时候用 chrome_options 参数传递即可，访问目标链接后显示如下信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.9"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"Upgrade-Insecure-Requests"</span>: <span class="string">"1"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是认证代理，则设置方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">1080</span></span><br><span class="line">username = <span class="string">'username'</span></span><br><span class="line">password = <span class="string">'password'</span></span><br><span class="line"></span><br><span class="line">manifest_json = <span class="string">"""&#123;"version":"1.0.0","manifest_version": 2,"name":"Chrome Proxy","permissions": ["proxy","tabs","unlimitedStorage","storage","&lt;all_urls&gt;","webRequest","webRequestBlocking"],"background": &#123;"scripts": ["background.js"]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">background_js =<span class="string">"""</span></span><br><span class="line"><span class="string">var config = &#123;</span></span><br><span class="line"><span class="string">        mode: "fixed_servers",</span></span><br><span class="line"><span class="string">        rules: &#123;</span></span><br><span class="line"><span class="string">          singleProxy: &#123;</span></span><br><span class="line"><span class="string">            scheme: "http",</span></span><br><span class="line"><span class="string">            host: "%(ip) s",</span></span><br><span class="line"><span class="string">            port: %(port) s</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.proxy.settings.set(&#123;value: config, scope: "regular"&#125;, function() &#123;&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function callbackFn(details) &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">        authCredentials: &#123;username: "%(username) s",</span></span><br><span class="line"><span class="string">            password: "%(password) s"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">chrome.webRequest.onAuthRequired.addListener(</span></span><br><span class="line"><span class="string">            callbackFn,</span></span><br><span class="line"><span class="string">            &#123;urls: ["&lt;all_urls&gt;"]&#125;,</span></span><br><span class="line"><span class="string">            ['blocking']</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">"""</span> % &#123;<span class="string">'ip'</span>: ip, <span class="string">'port'</span>: port, <span class="string">'username'</span>: username, <span class="string">'password'</span>: password&#125;</span><br><span class="line"></span><br><span class="line">plugin_file = <span class="string">'proxy_auth_plugin.zip'</span></span><br><span class="line"><span class="keyword">with</span> zipfile.ZipFile(plugin_file, <span class="string">'w'</span>) <span class="keyword">as</span> zp:</span><br><span class="line">    zp.writestr(<span class="string">"manifest.json"</span>, manifest_json)</span><br><span class="line">    zp.writestr(<span class="string">"background.js"</span>, background_js)</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">"--start-maximized"</span>)</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">chrome_options.add_extension(plugin_file)</span><br><span class="line">browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><p>需要在本地创建一个 manifest.json 配置文件和 background.js 脚本来设置认证代理。运行代码之后本地会生成一个 proxy_auth_plugin.zip 文件来保存当前配置</p><h2 id="【15-4-1】PhantomJS"><a href="#【15-4-1】PhantomJS" class="headerlink" title="【15.4.1】PhantomJS"></a><font color="#1BC3FB">【15.4.1】PhantomJS</font></h2><p>借助 service_args 参数，也就是命令行参数即可设置代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">service_args = [</span><br><span class="line">    <span class="string">'--proxy=127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="string">'--proxy-type=http'</span></span><br><span class="line">]</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">browser = webdriver.PhantomJS(executable_path=path, service_args=service_args)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(browser.page_source)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;pre style="word-wrap: break-word; white-space: pre-wrap;"&gt;&#123;</span><br><span class="line">  <span class="string">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">"headers"</span>: &#123;</span><br><span class="line">    <span class="string">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, </span><br><span class="line">    <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>, </span><br><span class="line">    <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,en,*"</span>, </span><br><span class="line">    <span class="string">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/538.1 (KHTML, like Gecko) PhantomJS/2.1.1 Safari/538.1"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">"origin"</span>: <span class="string">"168.70.60.141, 168.70.60.141"</span>, </span><br><span class="line">  <span class="string">"url"</span>: <span class="string">"https://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>如果是需要认证的代理，只需要在 service_args 参数加入 –proxy-auth 选项即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">service_args = [</span><br><span class="line">    <span class="string">'--proxy=127.0.0.1:1080'</span>,</span><br><span class="line">    <span class="string">'--proxy-type=http'</span>,</span><br><span class="line">    <span class="string">'--proxy-auth=username:password'</span></span><br><span class="line">]</span><br><span class="line">path = <span class="string">r'F:\PycharmProjects\Python3爬虫\phantomjs-2.1.1\bin\phantomjs.exe'</span></span><br><span class="line">browser = webdriver.PhantomJS(executable_path=path, service_args=service_args)</span><br><span class="line">browser.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(browser.page_source)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十五章 —— 【代理的基本使用】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="代理" scheme="https://www.itrhx.com/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C14</title>
    <link href="https://www.itrhx.com/2019/09/08/A44-Python3-spider-C14/"/>
    <id>https://www.itrhx.com/2019/09/08/A44-Python3-spider-C14/</id>
    <published>2019-09-07T17:38:41.491Z</published>
    <updated>2019-09-24T12:43:31.445Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十四章 —— 【验证码对抗系列 — 点触验证码】</font></center></blockquote><a id="more"></a><hr><h1 id="【14-1】关于点触验证码"><a href="#【14-1】关于点触验证码" class="headerlink" title="【14.1】关于点触验证码"></a><font color="#ff0000">【14.1】关于点触验证码</font></h1><p>点触验证码是由杭州微触科技有限公司研发的新一代的互联网验证码，使用点击的形式完成验证，采用专利的印刷算法以及加密算法，保证每次请求到的验证图具有极高的安全性，常见的点触验证码如下：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A44/01.png" alt="01"><br></fancybox><hr><h1 id="【14-2】点触验证码攻克思路"><a href="#【14-2】点触验证码攻克思路" class="headerlink" title="【14.2】点触验证码攻克思路"></a><font color="#ff0000">【14.2】点触验证码攻克思路</font></h1><p>点触验证码相对其他类型验证码比较复杂，如果依靠 OCR 图像识别点触验证码，则识别难度非常大，此时就要用到互联网的验证码服务平台，这些服务平台全部都是人工在线识别，准确率非常高，原理就是先将验证码图片提交给平台，平台会返回识别结果在图片中的坐标位置，然后我们再解析坐标模拟点击即可，常见的打码平台有超级鹰、云打码等，打码平台是收费的，拿超级鹰来说，1元 = 1000题分，识别一次验证码将花费一定的题分，不同类型验证码需要的题分不同，验证码越复杂所需题分越高，比如 7 位中文汉字需要 70 题分，常见 4 ~ 6 位英文数字只要 10 题分，其他打码平台价格也都差不多</p><p>以下以<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">超级鹰打码平台</a>和<a href="https://www.12306.cn/" target="_blank" rel="noopener">中国铁路12306官网</a>来做练习</p><hr><h1 id="【14-3】模拟登录-12306-—-总体思路"><a href="#【14-3】模拟登录-12306-—-总体思路" class="headerlink" title="【14.3】模拟登录 12306 — 总体思路"></a><font color="#ff0000">【14.3】模拟登录 12306 — 总体思路</font></h1><p>首先在超级鹰打码平台注册账号并申请一个软件 ID，官网：<a href="http://www.chaojiying.com/" target="_blank" rel="noopener">http://www.chaojiying.com/</a> ，先充值一块钱得到 1000 题分，观察 12306 官网，发现验证码是要我们点击所有满足条件的图片，一般有 1~4 张图片满足要求，由此可确定在超级鹰打码平台的验证码类型为 9004（坐标多选,返回1~4个坐标,如:x1,y1|x2,y2|x3,y3）， 获取其 Python API：<a href="http://www.chaojiying.com/download/Chaojiying_Python.rar" target="_blank" rel="noopener">http://www.chaojiying.com/download/Chaojiying_Python.rar</a> ，然后用 Selenium 模拟登陆，获取到验证码，并将验证码发送给超级鹰后台，返回识别图片的坐标，最后模拟点击即可，整个过程的实现由主程序 <code>12306.py</code> 和超级鹰 API <code>chaojiying.py</code> 组成</p><p>整个程序包含的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">()</span>:</span> 初始化 WebDriver、Chaojiying 对象等</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">()</span>:</span> 破解入口、获取、识别验证码、模拟登录</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">()</span>:</span> 账号密码输入</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">()</span>:</span> 整个页面截图</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">()</span>:</span> 获取验证码位置</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">()</span>:</span> 获取验证码坐标</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">()</span>:</span> 剪裁验证码部分</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span> 分析超级鹰返回的坐标</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span> 模拟点击符合要求的图片</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span> 点击登陆按钮，完成模拟登录</span><br></pre></td></tr></table></figure><p>整个程序用到的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br></pre></td></tr></table></figure><hr><h1 id="【14-4】主函数"><a href="#【14-4】主函数" class="headerlink" title="【14.4】主函数"></a><font color="#ff0000">【14.4】主函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackTouClick()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure><hr><h1 id="【14-5】初始化函数"><a href="#【14-5】初始化函数" class="headerlink" title="【14.5】初始化函数"></a><font color="#ff0000">【14.5】初始化函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'*******'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'*******'</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'********'</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = Chaojiying_Client(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br></pre></td></tr></table></figure><p>定义 12306 账号（<code>USERNAME</code>）、密码（<code>PASSWORD</code>）、超级鹰用户名（<code>CHAOJIYING_USERNAME</code>）、超级鹰登录密码（<code>CHAOJIYING_PASSWORD</code>）、超级鹰软件 ID（<code>CHAOJIYING_SOFT_ID</code>）、验证码类型（<code>CHAOJIYING_KIND</code>），登录链接 url：<a href="https://kyfw.12306.cn/otn/resources/login.html" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/resources/login.html</a> ，谷歌浏览器驱动的目录（<code>path</code>），浏览器启动参数，并将相关参数传递给超级鹰 API</p><hr><h1 id="【14-6】破解入口函数"><a href="#【14-6】破解入口函数" class="headerlink" title="【14.6】破解入口函数"></a><font color="#ff0000">【14.6】破解入口函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.open()</span><br><span class="line">    image = self.get_touclick_image()</span><br><span class="line">    bytes_array = BytesIO()</span><br><span class="line">    image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">    result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">    print(result)</span><br><span class="line">    locations = self.get_points(result)</span><br><span class="line">    self.touch_click_words(locations)</span><br><span class="line">    self.login()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'用户姓名'</span>))</span><br><span class="line">        print(success)</span><br><span class="line">        cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">        print(cc.text)</span><br><span class="line">    <span class="keyword">except</span> TimeoutException:</span><br><span class="line">        self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">        self.crack()</span><br></pre></td></tr></table></figure><p>调用 <code>open()</code> 函数输入账号密码</p><p>调用 <code>get_touclick_image()</code> 函数获取验证码图片</p><p>利用超级鹰 Python API <code>PostPic()</code> 方法即可把图片发送给超级鹰后台，发送的图像是字节流格式，返回的结果是一个 JSON，如果识别成功，典型的返回结果类似于：<code>{&#39;err_no&#39;: 0, &#39;err_str&#39;: &#39;OK&#39;, &#39;pic_id&#39;: &#39;6002001380949200001&#39;, &#39;pic_str&#39;: &#39;132,127|56,77&#39;, &#39;md5&#39;: &#39;1f8e1d4bef8b11484cb1f1f34299865b&#39;}</code>，其中，pic_str 就是识别的文字的坐标，是以字符串形式返回的，每个坐标都以 | 分隔</p><p>调用 <code>get_points()</code> 函数解析超级鹰识别结果</p><p>调用 <code>touch_click_words()</code> 函数对符合要求的图片进行点击，然后点击登陆按钮模拟登陆</p><p>使用 <code>try-except</code> 语句判断是否出现了用户信息，判断依据是是否有用户姓名的出现，出现的姓名和实际姓名一致则登录成功，如果失败了就重试，超级鹰会返回该分值</p><hr><h1 id="【14-7】账号密码输入函数"><a href="#【14-7】账号密码输入函数" class="headerlink" title="【14.7】账号密码输入函数"></a><font color="#ff0000">【14.7】账号密码输入函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.browser.get(self.url)</span><br><span class="line">    login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">    login.click()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">    password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">    username.send_keys(self.email)</span><br><span class="line">    password.send_keys(self.password)</span><br></pre></td></tr></table></figure><p>分析页面可知，登陆页面 URL 为：<a href="https://kyfw.12306.cn/otn/resources/login.html" target="_blank" rel="noopener">https://kyfw.12306.cn/otn/resources/login.html</a> ，该页面默认出现的是扫描二维码登陆，所以要先点击账号登录，找到该 CSS 元素为 <code>login-hd-account</code>，调用 <code>click()</code> 方法实现模拟点击，此时出现账号密码输入框，同样找到其 ID 分别为 <code>J-userName</code> 和 <code>J-password</code>，调用 <code>send_keys()</code> 方法输入账号密码</p><hr><h1 id="【14-8】页面截图函数"><a href="#【14-8】页面截图函数" class="headerlink" title="【14.8】页面截图函数"></a><font color="#ff0000">【14.8】页面截图函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">(self)</span>:</span></span><br><span class="line">    screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">    screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">    <span class="keyword">return</span> screenshot</span><br></pre></td></tr></table></figure><p>对整个页面进行截图</p><hr><h1 id="【14-9】验证码元素查找函数"><a href="#【14-9】验证码元素查找函数" class="headerlink" title="【14.9】验证码元素查找函数"></a><font color="#ff0000">【14.9】验证码元素查找函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">(self)</span>:</span></span><br><span class="line">    element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">    <span class="keyword">return</span> element</span><br></pre></td></tr></table></figure><p>同样分析页面，验证码所在位置的 CSS 为 <code>login-pwd-code</code></p><hr><h1 id="【14-10】获取验证码坐标函数"><a href="#【14-10】获取验证码坐标函数" class="headerlink" title="【14.10】获取验证码坐标函数"></a><font color="#ff0000">【14.10】获取验证码坐标函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">    element = self.get_touclick_element()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    location = element.location</span><br><span class="line">    size = element.size</span><br><span class="line">    top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</span><br><span class="line">    <span class="keyword">return</span> (top, bottom, left, right)</span><br></pre></td></tr></table></figure><p>location 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x 轴向右递增，y 轴向下递增，size 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息</p><hr><h1 id="【14-11】验证码剪裁函数"><a href="#【14-11】验证码剪裁函数" class="headerlink" title="【14.11】验证码剪裁函数"></a><font color="#ff0000">【14.11】验证码剪裁函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">    top, bottom, left, right = self.get_position()</span><br><span class="line">    screenshot = self.get_screenshot()</span><br><span class="line">    captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">    captcha.save(name)</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure><p>根据验证码的坐标信息，对页面截图进行剪裁，得到验证码部分，将其保存为 12306.png</p><hr><h1 id="【14-12】验证码坐标解析函数"><a href="#【14-12】验证码坐标解析函数" class="headerlink" title="【14.12】验证码坐标解析函数"></a><font color="#ff0000">【14.12】验证码坐标解析函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">    groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">    locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">    <span class="keyword">return</span> locations</span><br></pre></td></tr></table></figure><p><code>get_points()</code> 方法将超级鹰的验证码识别结果变成列表的形式</p><hr><h1 id="【14-13】验证码模拟点击函数"><a href="#【14-13】验证码模拟点击函数" class="headerlink" title="【14.13】验证码模拟点击函数"></a><font color="#ff0000">【14.13】验证码模拟点击函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">        print(location)</span><br><span class="line">        ActionChains(self.browser).move_to_element_with_offset(self.get_touclick_element(), location[<span class="number">0</span>]/<span class="number">1.25</span>, location[<span class="number">1</span>]/<span class="number">1.25</span>).click().perform()</span><br></pre></td></tr></table></figure><p><code>touch_click_words()</code> 方法通过调用 <code>move_to_element_with_offset()</code> 方法依次传入解析后的坐标，点击即可</p><hr><h1 id="【14-14】模拟点击登陆函数"><a href="#【14-14】模拟点击登陆函数" class="headerlink" title="【14.14】模拟点击登陆函数"></a><font color="#ff0000">【14.14】模拟点击登陆函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">    submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">    submit.click()</span><br></pre></td></tr></table></figure><p>分析页面，找到登陆按钮的 ID 为 <code>J-login</code>，调用 <code>click()</code> 方法模拟点击按钮实现登录</p><hr><h1 id="【14-15】效果实现动图"><a href="#【14-15】效果实现动图" class="headerlink" title="【14.15】效果实现动图"></a><font color="#ff0000">【14.15】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A44/12306.gif" alt="02"><br></fancybox><hr><h1 id="【14-16】完整代码"><a href="#【14-16】完整代码" class="headerlink" title="【14.16】完整代码"></a><font color="#ff0000">【14.16】完整代码</font></h1><p><code>12306.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying_Client</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"></span><br><span class="line">USERNAME = <span class="string">'155********'</span></span><br><span class="line">PASSWORD = <span class="string">'***********'</span></span><br><span class="line"></span><br><span class="line">CHAOJIYING_USERNAME = <span class="string">'***********'</span></span><br><span class="line">CHAOJIYING_PASSWORD = <span class="string">'***********'</span></span><br><span class="line">CHAOJIYING_SOFT_ID = <span class="string">'******'</span></span><br><span class="line">CHAOJIYING_KIND = <span class="string">'9004'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CrackTouClick</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>     <span class="comment">#登陆</span></span><br><span class="line">        self.url = <span class="string">'https://kyfw.12306.cn/otn/resources/login.html'</span></span><br><span class="line">        path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">        self.browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">        self.wait = WebDriverWait(self.browser, <span class="number">20</span>)</span><br><span class="line">        self.email = USERNAME</span><br><span class="line">        self.password = PASSWORD</span><br><span class="line">        self.chaojiying = Chaojiying_Client(CHAOJIYING_USERNAME, CHAOJIYING_PASSWORD, CHAOJIYING_SOFT_ID)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.open()</span><br><span class="line">        image = self.get_touclick_image()</span><br><span class="line">        bytes_array = BytesIO()</span><br><span class="line">        image.save(bytes_array, format=<span class="string">'PNG'</span>)</span><br><span class="line">        result = self.chaojiying.PostPic(bytes_array.getvalue(), CHAOJIYING_KIND)</span><br><span class="line">        print(result)</span><br><span class="line">        locations = self.get_points(result)</span><br><span class="line">        self.touch_click_words(locations)</span><br><span class="line">        self.login()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            success = self.wait.until(EC.text_to_be_present_in_element((By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>), <span class="string">'谭仁侯'</span>))</span><br><span class="line">            print(success)</span><br><span class="line">            cc = self.browser.find_element(By.CSS_SELECTOR, <span class="string">'.welcome-name'</span>)</span><br><span class="line">            print(cc.text)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> TimeoutException:</span><br><span class="line">            self.chaojiying.ReportError(result[<span class="string">'pic_id'</span>])</span><br><span class="line">            self.crack()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.browser.get(self.url)</span><br><span class="line">        login = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-hd-account'</span>)))</span><br><span class="line">        login.click()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        username = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-userName'</span>)))</span><br><span class="line">        password = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'input#J-password'</span>)))</span><br><span class="line">        username.send_keys(self.email)</span><br><span class="line">        password.send_keys(self.password)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_screenshot</span><span class="params">(self)</span>:</span></span><br><span class="line">        screenshot = self.browser.get_screenshot_as_png()</span><br><span class="line">        screenshot = Image.open(BytesIO(screenshot))</span><br><span class="line">        <span class="keyword">return</span> screenshot</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_touclick_element</span><span class="params">(self)</span>:</span></span><br><span class="line">        element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.login-pwd-code'</span>)))</span><br><span class="line">        <span class="keyword">return</span> element</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_position</span><span class="params">(self)</span>:</span></span><br><span class="line">        element = self.get_touclick_element()</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        location = element.location</span><br><span class="line">        size = element.size</span><br><span class="line">        top, bottom, left, right = location[<span class="string">'y'</span>], location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>], location[<span class="string">'x'</span>], location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</span><br><span class="line">        <span class="keyword">return</span> (top, bottom, left, right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_touclick_image</span><span class="params">(self, name=<span class="string">'12306.png'</span>)</span>:</span></span><br><span class="line">        top, bottom, left, right = self.get_position()</span><br><span class="line">        screenshot = self.get_screenshot()</span><br><span class="line">        captcha = screenshot.crop((left, top, right, bottom))</span><br><span class="line">        captcha.save(name)</span><br><span class="line">        <span class="keyword">return</span> captcha</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_points</span><span class="params">(self, captcha_result)</span>:</span></span><br><span class="line">        groups = captcha_result.get(<span class="string">'pic_str'</span>).split(<span class="string">'|'</span>)</span><br><span class="line">        locations = [[int(number) <span class="keyword">for</span> number <span class="keyword">in</span> group.split(<span class="string">','</span>)] <span class="keyword">for</span> group <span class="keyword">in</span> groups]</span><br><span class="line">        <span class="keyword">return</span> locations</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">touch_click_words</span><span class="params">(self, locations)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> location <span class="keyword">in</span> locations:</span><br><span class="line">            print(location)</span><br><span class="line">            ActionChains(self.browser).move_to_element_with_offset(self.get_touclick_element(), location[<span class="number">0</span>]/<span class="number">1.25</span>, location[<span class="number">1</span>]/<span class="number">1.25</span>).click().perform()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        submit = self.wait.until(EC.element_to_be_clickable((By.ID, <span class="string">'J-login'</span>)))</span><br><span class="line">        submit.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    crack = CrackTouClick()</span><br><span class="line">    crack.crack()</span><br></pre></td></tr></table></figure><p><code>chaojiying.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chaojiying_Client</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username, password, soft_id)</span>:</span></span><br><span class="line">        self.username = username</span><br><span class="line">        password = password.encode(<span class="string">'utf8'</span>)</span><br><span class="line">        self.password = md5(password).hexdigest()</span><br><span class="line">        self.soft_id = soft_id</span><br><span class="line">        self.base_params = &#123;</span><br><span class="line">            <span class="string">'user'</span>: self.username,</span><br><span class="line">            <span class="string">'pass2'</span>: self.password,</span><br><span class="line">            <span class="string">'softid'</span>: self.soft_id,</span><br><span class="line">        &#125;</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">'Connection'</span>: <span class="string">'Keep-Alive'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostPic</span><span class="params">(self, im, codetype)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im: 图片字节</span></span><br><span class="line"><span class="string">        codetype: 题目类型 参考 http://www.chaojiying.com/price.html</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'codetype'</span>: codetype,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        files = &#123;<span class="string">'userfile'</span>: (<span class="string">'ccc.jpg'</span>, im)&#125;</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/Processing.php'</span>, data=params, files=files, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReportError</span><span class="params">(self, im_id)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        im_id:报错题目的图片ID</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'id'</span>: im_id,</span><br><span class="line">        &#125;</span><br><span class="line">        params.update(self.base_params)</span><br><span class="line">        r = requests.post(<span class="string">'http://upload.chaojiying.net/Upload/ReportError.php'</span>, data=params, headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.json()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十四章 —— 【验证码对抗系列 — 点触验证码】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="点触验证码" scheme="https://www.itrhx.com/tags/%E7%82%B9%E8%A7%A6%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C13</title>
    <link href="https://www.itrhx.com/2019/09/07/A43-Python3-spider-C13/"/>
    <id>https://www.itrhx.com/2019/09/07/A43-Python3-spider-C13/</id>
    <published>2019-09-06T19:52:14.161Z</published>
    <updated>2019-09-24T12:40:56.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十三章 —— 【验证码对抗系列 — 滑动验证码】</font></center></blockquote><a id="more"></a><hr><h1 id="【13-1】关于滑动验证码"><a href="#【13-1】关于滑动验证码" class="headerlink" title="【13.1】关于滑动验证码"></a><font color="#ff0000">【13.1】关于滑动验证码</font></h1><p>滑动验证码属于行为式验证码，需要通过用户的操作行为来完成验证，一般是根据提示用鼠标将滑块拖动到指定的位置完成验证，此类验证码背景图片采用多种图像加密技术，且添加了很多随机效果，能有效防止OCR文字识别，另外，验证码上的文字采用了随机印刷技术，能够随机采用多种字体、多种变形的实时随机印刷，防止暴力破解；斗鱼、哔哩哔哩、淘宝等平台都使用了滑动验证码</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/01.png" alt="01"><br></fancybox><hr><h1 id="【13-2】滑动验证码攻克思路"><a href="#【13-2】滑动验证码攻克思路" class="headerlink" title="【13.2】滑动验证码攻克思路"></a><font color="#ff0000">【13.2】滑动验证码攻克思路</font></h1><p>利用自动化测试工具 Selenium 直接模拟人的行为方式来完成验证，首先要分析页面，想办法找到滑动验证码的完整图片、带有缺口的图片和需要滑动的图片，通过对比原始的图片和带滑块缺口的图片的像素，像素不同的地方就是缺口位置，计算出滑块缺口的位置，得到所需要滑动的距离，最后利用 Selenium 进行对滑块的拖拽，拖拽时要模仿人的行为，由于有个对准过程，所以是先快后慢，匀速移动、随机速度移动都不会成功</p><p>以下以哔哩哔哩为例来做模拟登录练习</p><hr><h1 id="【13-3】模拟登录-bilibili-—-总体思路"><a href="#【13-3】模拟登录-bilibili-—-总体思路" class="headerlink" title="【13.3】模拟登录 bilibili — 总体思路"></a><font color="#ff0000">【13.3】模拟登录 bilibili — 总体思路</font></h1><p>首先使用 Selenium 模拟登陆 bilibili，自动输入账号密码，查找到登陆按钮并点击，使其出现滑动验证码，此时分析页面，滑动验证组件是由3个 canvas 组成，分别代表完整图片、带有缺口的图片和需要滑动的图片，3个 canvas 元素包含 CSS  <code>display</code> 属性，<code>display:block</code> 为可见，<code>display:none</code> 为不可见，分别获取三张图片时要将其他两张图片设置为 <code>display:none</code>，获取元素位置后即可对图片截图并保存，通过图片像素对比，找到缺口位置即为滑块要移动的距离，随后构造滑动轨迹，按照先加速后减速的方式移动滑块完成验证。</p><p>整个程序包含的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span> 初始化函数，定义全局变量</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span> 登录函数，输入账号密码并点击登录</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span> 验证码元素查找函数，查找三张图的元素</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">()</span>:</span> 设置元素不可见函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">()</span>:</span> 设置元素可见函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">()</span>:</span> 验证码截图函数，截取三张图并保存</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span> 滑动函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">()</span>:</span> 像素判断函数，寻找缺口位置</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">()</span>:</span> 计算滑块移动距离函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_track</span><span class="params">()</span>:</span> 构造移动轨迹函数</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">()</span>:</span> 模拟拖动函数</span><br></pre></td></tr></table></figure><p>整个程序用到的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br></pre></td></tr></table></figure><hr><h1 id="【13-4】主函数"><a href="#【13-4】主函数" class="headerlink" title="【13.4】主函数"></a><font color="#ff0000">【13.4】主函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    login()</span><br><span class="line">    find_element()</span><br><span class="line">    slide()</span><br></pre></td></tr></table></figure><hr><h1 id="【13-5】初始化函数"><a href="#【13-5】初始化函数" class="headerlink" title="【13.5】初始化函数"></a><font color="#ff0000">【13.5】初始化函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>global 关键字定义了全局变量，随后是登录页面url、谷歌浏览器驱动的目录path、实例化 Chrome 浏览器、设置浏览器分辨率最大化、用户名、密码、WebDriverWait() 方法设置等待超时</p><hr><h1 id="【13-6】登录函数"><a href="#【13-6】登录函数" class="headerlink" title="【13.6】登录函数"></a><font color="#ff0000">【13.6】登录函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    login_btn.click()</span><br></pre></td></tr></table></figure><p>等待用户名输入框和密码输入框对应的 ID 节点加载出来，分析页面可知，用户名输入框 <code>id=&quot;login-username&quot;</code>，密码输入框 <code>id=&quot;login-passwd&quot;</code>，获取这两个节点，调用 <code>send_keys()</code> 方法输入用户名和密码，随后获取登录按钮，分析页面可知登录按钮 <code>class=&quot;btn btn-login&quot;</code>，随机产生一个数并将其扩大三倍作为暂停时间，最后调用 <code>click()</code> 方法实现登录按钮的点击</p><hr><h1 id="【13-7】验证码元素查找函数"><a href="#【13-7】验证码元素查找函数" class="headerlink" title="【13.7】验证码元素查找函数"></a><font color="#ff0000">【13.7】验证码元素查找函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br></pre></td></tr></table></figure><p>我们要获取验证码的三张图片，分别是完整的图片、带有缺口的图片和需要滑动的图片，分析页面代码，这三张图片是由 3 个 canvas 组成，3 个 canvas 元素包含 CSS  <code>display</code> 属性，<code>display:block</code> 为可见，<code>display:none</code> 为不可见，在分别获取三张图片时要将其他两张图片设置为 <code>display:none</code>，这样做才能单独提取到每张图片，定位三张图片的 class 分别为：带有缺口的图片（c_background）：<code>geetest_canvas_bg geetest_absolute</code>、需要滑动的图片（c_slice）：<code>geetest_canvas_slice geetest_absolute</code>、完整图片（c_full_bg）：<code>geetest_canvas_fullbg geetest_fade geetest_absolute</code>，随后传值给 <code>save_screenshot()</code> 函数，进一步对验证码进行处理</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/02.png" alt="02"><br></fancybox><hr><h1 id="【13-8】元素可见性设置函数"><a href="#【13-8】元素可见性设置函数" class="headerlink" title="【13.8】元素可见性设置函数"></a><font color="#ff0000">【13.8】元素可见性设置函数</font></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设置元素不可见</span><br><span class="line">def hide_element(element):</span><br><span class="line">    browser.execute_script(&quot;arguments[0].style=arguments[1]&quot;, element, &quot;display: none;&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置元素可见</span><br><span class="line">def show_element(element):</span><br><span class="line">    browser.execute_script(&quot;arguments[0].style=arguments[1]&quot;, element, &quot;display: block;&quot;)</span><br></pre></td></tr></table></figure><hr><h1 id="【13-9】验证码截图函数"><a href="#【13-9】验证码截图函数" class="headerlink" title="【13.9】验证码截图函数"></a><font color="#ff0000">【13.9】验证码截图函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br></pre></td></tr></table></figure><p><code>location</code> 属性可以返回该图片对象在浏览器中的位置，坐标轴是以屏幕左上角为原点，x轴向右递增，y轴向下递增，<code>size</code> 属性可以返回该图片对象的高度和宽度，由此可以得到验证码的位置信息，首先调用 <code>save_screenshot()</code> 属性对整个页面截图并保存，然后向 <code>crop()</code> 方法传入验证码的位置信息，由位置信息再对验证码进行剪裁并保存</p><hr><h1 id="【13-10】滑动函数"><a href="#【13-10】滑动函数" class="headerlink" title="【13.10】滑动函数"></a><font color="#ff0000">【13.10】滑动函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>向 <code>get_distance()</code> 函数传入完整的图片和缺口图片，计算滑块需要滑动的距离，再把距离信息传入 <code>get_trace()</code> 函数，构造滑块的移动轨迹，最后根据轨迹信息调用 <code>move_to_gap()</code> 函数移动滑块完成验证</p><hr><h1 id="【13-11】计算滑块移动距离函数"><a href="#【13-11】计算滑块移动距离函数" class="headerlink" title="【13.11】计算滑块移动距离函数"></a><font color="#ff0000">【13.11】计算滑块移动距离函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p><code>get_distance()</code> 方法即获取缺口位置的方法，此方法的参数是两张图片，一张为完整的图片，另一张为带缺口的图片，distance 为滑块的初始位置，遍历两张图片的每个像素，利用 <code>is_pixel_equal()</code> 像素判断函数判断两张图片同一位置的像素是否相同，比较两张图 RGB 的绝对值是否均小于定义的阈值 threshold，如果绝对值均在阈值之内，则代表像素点相同，继续遍历，否则代表不相同的像素点，即缺口的位置</p><hr><h1 id="【13-12】像素判断函数"><a href="#【13-12】像素判断函数" class="headerlink" title="【13.12】像素判断函数"></a><font color="#ff0000">【13.12】像素判断函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>将完整图片和缺口图片两个对象分别赋值给变量 bg_image和 fullbg_image，接下来对比图片获取缺口。我们在这里遍历图片的每个坐标点，获取两张图片对应像素点的 RGB 数据，判断像素的各个颜色之差，<code>abs()</code> 用于取绝对值，如果二者的 RGB 数据差距在一定范围内，那就代表两个像素相同，继续比对下一个像素点，如果差距超过一定范围，则代表像素点不同，当前位置即为缺口位置</p><hr><h1 id="【13-13】构造移动轨迹函数"><a href="#【13-13】构造移动轨迹函数" class="headerlink" title="【13.13】构造移动轨迹函数"></a><font color="#ff0000">【13.13】构造移动轨迹函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">20</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-20</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="keyword">return</span> trace</span><br></pre></td></tr></table></figure><p><code>get_trace()</code> 方法传入的参数为移动的总距离，返回的是运动轨迹，运动轨迹用 trace 表示，它是一个列表，列表的每个元素代表每次移动多少距离，利用 Selenium 进行对滑块的拖拽时要模仿人的行为，由于有个对准过程，所以是先快后慢，匀速移动、随机速度移动都不会成功，因此要设置一个加速和减速的距离，这里设置加速距离 <code>faster_distance</code> 是总距离 <code>distance</code> 的4/5倍，滑块滑动的加速度用 a 来表示，当前速度用 v 表示，初速度用 v0 表示，位移用 move 表示，所需时间用 t 表示，它们之间满足以下关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">move = v0 * t + 0.5 * a * t * t </span><br><span class="line">v = v0 + a * t</span><br></pre></td></tr></table></figure><p>设置初始位置、初始速度、时间间隔分别为0, 0, 0.1，加速阶段和减速阶段的加速度分别设置为20和-20，直到运动轨迹达到总距离时，循环终止，最后得到的 trace 记录了每个时间间隔移动了多少位移，这样滑块的运动轨迹就得到了</p><hr><h1 id="【13-14】模拟拖动函数"><a href="#【13-14】模拟拖动函数" class="headerlink" title="【13.14】模拟拖动函数"></a><font color="#ff0000">【13.14】模拟拖动函数</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ActionChains(browser).release().perform()</span><br></pre></td></tr></table></figure><p>传入的参数为运动轨迹，首先查找到滑动按钮，然后调用 ActionChains 的 <code>click_and_hold()</code> 方法按住拖动底部滑块，<code>perform()</code> 方法用于执行，遍历运动轨迹获取每小段位移距离，调用 <code>move_by_offset()</code> 方法移动此位移，最后调用 <code>release()</code> 方法松开鼠标即可</p><hr><h1 id="【13-15】效果实现动图"><a href="#【13-15】效果实现动图" class="headerlink" title="【13.15】效果实现动图"></a><font color="#ff0000">【13.15】效果实现动图</font></h1><p>最终实现效果图：（关键信息已经过打码处理）</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A43/bilibili.gif" alt="03"><br></fancybox><hr><h1 id="【13-16】完整代码"><a href="#【13-16】完整代码" class="headerlink" title="【13.16】完整代码"></a><font color="#ff0000">【13.16】完整代码</font></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> url, browser, username, password, wait</span><br><span class="line">    url = <span class="string">'https://passport.bilibili.com/login'</span></span><br><span class="line">    path = <span class="string">r'F:\PycharmProjects\Python3爬虫\chromedriver.exe'</span></span><br><span class="line">    chrome_options = Options()</span><br><span class="line">    chrome_options.add_argument(<span class="string">'--start-maximized'</span>)</span><br><span class="line">    browser = webdriver.Chrome(executable_path=path, chrome_options=chrome_options)</span><br><span class="line">    username = <span class="string">'155********'</span></span><br><span class="line">    password = <span class="string">'***********'</span></span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    browser.get(url)</span><br><span class="line">    user = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-username'</span>)))</span><br><span class="line">    passwd = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'login-passwd'</span>)))</span><br><span class="line">    user.send_keys(username)</span><br><span class="line">    passwd.send_keys(password)</span><br><span class="line">    login_btn = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'a.btn.btn-login'</span>)))</span><br><span class="line">    time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">    login_btn.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_element</span><span class="params">()</span>:</span></span><br><span class="line">    c_background = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_bg.geetest_absolute'</span>)))</span><br><span class="line">    c_slice = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_slice.geetest_absolute'</span>)))</span><br><span class="line">    c_full_bg = wait.until(</span><br><span class="line">        EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'canvas.geetest_canvas_fullbg.geetest_fade.geetest_absolute'</span>)))</span><br><span class="line">    hide_element(c_slice)</span><br><span class="line">    save_screenshot(c_background, <span class="string">'back'</span>)</span><br><span class="line">    show_element(c_slice)</span><br><span class="line">    save_screenshot(c_slice, <span class="string">'slice'</span>)</span><br><span class="line">    show_element(c_full_bg)</span><br><span class="line">    save_screenshot(c_full_bg, <span class="string">'full'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hide_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: none;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_element</span><span class="params">(element)</span>:</span></span><br><span class="line">    browser.execute_script(<span class="string">"arguments[0].style=arguments[1]"</span>, element, <span class="string">"display: block;"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_screenshot</span><span class="params">(obj, name)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        pic_url = browser.save_screenshot(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        print(<span class="string">"%s:截图成功!"</span> % pic_url)</span><br><span class="line">        left = obj.location[<span class="string">'x'</span>]</span><br><span class="line">        top = obj.location[<span class="string">'y'</span>]</span><br><span class="line">        right = left + obj.size[<span class="string">'width'</span>]</span><br><span class="line">        bottom = top + obj.size[<span class="string">'height'</span>]</span><br><span class="line">        print(<span class="string">'图：'</span> + name)</span><br><span class="line">        print(<span class="string">'Left %s'</span> % left)</span><br><span class="line">        print(<span class="string">'Top %s'</span> % top)</span><br><span class="line">        print(<span class="string">'Right %s'</span> % right)</span><br><span class="line">        print(<span class="string">'Bottom %s'</span> % bottom)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        im = Image.open(<span class="string">'.\\bilibili.png'</span>)</span><br><span class="line">        im = im.crop((left, top, right, bottom))</span><br><span class="line">        file_name = <span class="string">'bili_'</span> + name + <span class="string">'.png'</span></span><br><span class="line">        im.save(file_name)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> msg:</span><br><span class="line">        print(<span class="string">"%s:截图失败!"</span> % msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">slide</span><span class="params">()</span>:</span></span><br><span class="line">    distance = get_distance(Image.open(<span class="string">'.\\bili_back.png'</span>), Image.open(<span class="string">'.\\bili_full.png'</span>))</span><br><span class="line">    print(<span class="string">'计算偏移量为：%s Px'</span> % distance)</span><br><span class="line">    trace = get_trace(distance - <span class="number">5</span>)</span><br><span class="line">    move_to_gap(trace)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_distance</span><span class="params">(bg_image, fullbg_image)</span>:</span></span><br><span class="line">    distance = <span class="number">60</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(distance, fullbg_image.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(fullbg_image.size[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> is_pixel_equal(fullbg_image, bg_image, i, j):</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_pixel_equal</span><span class="params">(bg_image, fullbg_image, x, y)</span>:</span></span><br><span class="line">    bg_pixel = bg_image.load()[x, y]</span><br><span class="line">    fullbg_pixel = fullbg_image.load()[x, y]</span><br><span class="line">    threshold = <span class="number">60</span></span><br><span class="line">    <span class="keyword">if</span> (abs(bg_pixel[<span class="number">0</span>] - fullbg_pixel[<span class="number">0</span>] &lt; threshold) <span class="keyword">and</span> abs(bg_pixel[<span class="number">1</span>] - fullbg_pixel[<span class="number">1</span>] &lt; threshold) <span class="keyword">and</span> abs(</span><br><span class="line">            bg_pixel[<span class="number">2</span>] - fullbg_pixel[<span class="number">2</span>] &lt; threshold)):</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_trace</span><span class="params">(distance)</span>:</span></span><br><span class="line">    trace = []</span><br><span class="line">    faster_distance = distance * (<span class="number">4</span> / <span class="number">5</span>)</span><br><span class="line">    start, v0, t = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span></span><br><span class="line">    <span class="keyword">while</span> start &lt; distance:</span><br><span class="line">        <span class="keyword">if</span> start &lt; faster_distance:</span><br><span class="line">            a = <span class="number">20</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">-20</span></span><br><span class="line">        move = v0 * t + <span class="number">1</span> / <span class="number">2</span> * a * t * t</span><br><span class="line">        v = v0 + a * t</span><br><span class="line">        v0 = v</span><br><span class="line">        start += move</span><br><span class="line">        trace.append(round(move))</span><br><span class="line">    <span class="keyword">return</span> trace</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_to_gap</span><span class="params">(trace)</span>:</span></span><br><span class="line">    slider = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'div.geetest_slider_button'</span>)))</span><br><span class="line">    ActionChains(browser).click_and_hold(slider).perform()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> trace:</span><br><span class="line">        ActionChains(browser).move_by_offset(xoffset=x, yoffset=<span class="number">0</span>).perform()</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    ActionChains(browser).release().perform()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    init()</span><br><span class="line">    login()</span><br><span class="line">    find_element()</span><br><span class="line">    slide()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十三章 —— 【验证码对抗系列 — 滑动验证码】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="滑动验证码" scheme="https://www.itrhx.com/tags/%E6%BB%91%E5%8A%A8%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python3 爬虫学习笔记 C12</title>
    <link href="https://www.itrhx.com/2019/09/05/A42-Python3-spider-C12/"/>
    <id>https://www.itrhx.com/2019/09/05/A42-Python3-spider-C12/</id>
    <published>2019-09-05T14:54:48.887Z</published>
    <updated>2019-09-24T12:40:54.127Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><center><font color="#1BC3FB" size="4">Python3 爬虫学习笔记第十二章 —— 【验证码对抗系列 — 图形验证码】</font></center></blockquote><a id="more"></a><h1 id="【12-1】关于普通图形验证码"><a href="#【12-1】关于普通图形验证码" class="headerlink" title="【12.1】关于普通图形验证码"></a><font color="#ff0000">【12.1】关于普通图形验证码</font></h1><p>普通图形验证码一般由四位纯数字、纯字母或者字母数字组合构成，是最常见的验证码，也是最简单的验证码，利用 tesserocr 或者 pytesseract 库即可识别此类验证码，前提是已经安装好 Tesseract-OCR 软件</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/01.png" alt="01"><br></fancybox><h1 id="【12-2】tesserocr-库识别验证码"><a href="#【12-2】tesserocr-库识别验证码" class="headerlink" title="【12.2】tesserocr 库识别验证码"></a><font color="#ff0000">【12.2】tesserocr 库识别验证码</font></h1><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">result = tesserocr.image_to_text(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>新建一个 Image 对象，调用 tesserocr 的 <code>image_to_text()</code> 方法，传入 Image 对象即可完成识别，另一种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line">print(tesserocr.file_to_text(<span class="string">'code.png'</span>))</span><br></pre></td></tr></table></figure><h1 id="【12-3】pytesseract-库识别验证码"><a href="#【12-3】pytesseract-库识别验证码" class="headerlink" title="【12.3】pytesseract 库识别验证码"></a><font color="#ff0000">【12.3】pytesseract 库识别验证码</font></h1><p>简单示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">img = img.convert(<span class="string">'RGB'</span>)</span><br><span class="line">img.show()</span><br><span class="line">print(pytesseract.image_to_string(img))</span><br></pre></td></tr></table></figure><p>pytesseract 的各种方法：</p><ul><li>get_tesseract_version：返回 Tesseract 的版本信息；</li><li>image_to_string：将图像上的 Tesseract OCR 运行结果返回到字符串；</li><li>image_to_boxes：返回包含已识别字符及其框边界的结果；</li><li>image_to_data：返回包含框边界，置信度和其他信息的结果。需要 Tesseract 3.05+；</li><li>image_to_osd：返回包含有关方向和脚本检测的信息的结果。</li></ul><p>有关参数：</p><p><code>image_to_data(image, lang=&#39;&#39;, config=&#39;&#39;, nice=0, output_type=Output.STRING)</code></p><ul><li>image：图像对象；</li><li>lang：Tesseract 语言代码字符串；</li><li>config：任何其他配置为字符串，例如：config=’–psm 6’；</li><li>nice：修改 Tesseract 运行的处理器优先级。Windows不支持。尼斯调整了类似 unix 的流程的优点；</li><li>output_type：类属性，指定输出的类型，默认为string。</li></ul><p>lang 参数，常见语言代码如下：</p><ul><li>chi_sim：简体中文</li><li>chi_tra：繁体中文</li><li>eng：英文</li><li>rus：俄罗斯语</li><li>fra：法语</li><li>deu：德语</li><li>jpn：日语</li></ul><h1 id="【12-4】验证码处理"><a href="#【12-4】验证码处理" class="headerlink" title="【12.4】验证码处理"></a><font color="#ff0000">【12.4】验证码处理</font></h1><p>利用 Image 对象的 <code>convert()</code> 方法传入不同参数可以对验证码做一些额外的处理，如转灰度、二值化等操作，经过处理过后的验证码会更加容易被识别，识别准确度更高，各种参数及含义：</p><ul><li>1：1位像素，黑白，每字节一个像素存储；</li><li>L：8位像素，黑白；</li><li>P：8位像素，使用调色板映射到任何其他模式；</li><li>RGB：3x8位像素，真彩色；</li><li>RGBA：4x8位像素，带透明度掩模的真彩色；</li><li>CMYK：4x8位像素，分色；</li><li>YCbCr：3x8位像素，彩色视频格式；</li><li>I：32位有符号整数像素；</li><li>F：32位浮点像素。</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">image = image.convert(<span class="string">'L'</span>)</span><br><span class="line">image.show()</span><br><span class="line">result = pytesseract.image_to_string(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>Image 对象的 <code>convert()</code> 方法参数传入 L，即可将图片转化为灰度图像，转换前后对比：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/02.png" alt="02"><br></fancybox><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">image = Image.open(<span class="string">'code.png'</span>)</span><br><span class="line">image = image.convert(<span class="string">'1'</span>)</span><br><span class="line">image.show()</span><br><span class="line">result = pytesseract.image_to_string(image)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>Image 对象的 <code>convert()</code> 方法参数传入 1，即可将图片进行二值化处理，处理前后对比：</p><fancybox><br><img src="https://cdn.jsdelivr.net/gh/TRHX/ImageHosting/ITRHX-PIC/A42/03.png" alt="03"><br></fancybox><h1 id="【12-5】tesserocr-与-pytesserocr-相关资料"><a href="#【12-5】tesserocr-与-pytesserocr-相关资料" class="headerlink" title="【12.5】tesserocr 与 pytesserocr 相关资料"></a><font color="#ff0000">【12.5】tesserocr 与 pytesserocr 相关资料</font></h1><ul><li><p>tesserocr GitHub：<a href="https://github.com/sirfz/tesserocr" target="_blank" rel="noopener">https://github.com/sirfz/tesserocr</a></p></li><li><p>tesserocr PyPI：<a href="https://pypi.python.org/pypi/tesserocr" target="_blank" rel="noopener">https://pypi.python.org/pypi/tesserocr</a></p></li><li><p>pytesserocr GitHub：<a href="https://github.com/madmaze/pytesseract" target="_blank" rel="noopener">https://github.com/madmaze/pytesseract</a></p></li><li><p>pytesserocr PyPI：<a href="https://pypi.org/project/pytesseract/" target="_blank" rel="noopener">https://pypi.org/project/pytesseract/</a></p></li><li><p>Tesseract-OCR 下载地址：<a href="http://digi.bib.uni-mannheim.de/tesseract" target="_blank" rel="noopener">http://digi.bib.uni-mannheim.de/tesseract</a></p></li><li><p>tesseract GitHub：<a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract</a></p></li><li><p>tesseract 语言包：<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tessdata</a></p></li><li><p>tesseract 文档：<a href="https://github.com/tesseract-ocr/tesseract/wiki/Documentation" target="_blank" rel="noopener">https://github.com/tesseract-ocr/tesseract/wiki/Documentation</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;center&gt;&lt;font color=&quot;#1BC3FB&quot; size=&quot;4&quot;&gt;Python3 爬虫学习笔记第十二章 —— 【验证码对抗系列 — 图形验证码】&lt;/font&gt;&lt;/center&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python3 学习笔记" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="爬虫学习" scheme="https://www.itrhx.com/categories/Python3-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="爬虫" scheme="https://www.itrhx.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="图形验证码" scheme="https://www.itrhx.com/tags/%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    
  </entry>
  
</feed>
